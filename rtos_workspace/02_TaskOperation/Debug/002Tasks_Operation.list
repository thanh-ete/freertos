
002Tasks_Operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000445c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080045ec  080045ec  000055ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004710  08004710  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004710  08004710  00005710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004718  08004718  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004720  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          0000416c  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200041d8  200041d8  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbc0  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002619  00000000  00000000  00013c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00016278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b43  00000000  00000000  00017130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002302d  00000000  00000000  00017c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe30  00000000  00000000  0003aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d67  00000000  00000000  0004aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d837  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004400  00000000  00000000  0011d87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00121c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045d4 	.word	0x080045d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080045d4 	.word	0x080045d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000088 	.word	0x20000088
 8000590:	200000dc 	.word	0x200000dc

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t idx = 0;
int _write(int file, char *ptr, int len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	int i = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x2a>
		ITM_SendChar((*ptr++));
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffc7 	bl	8000594 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x16>
	return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fab5 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f837 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f89f 	bl	8000770 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("starting....\n");
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <main+0x68>)
 8000634:	f003 f96a 	bl	800390c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <main+0x6c>)
 800063a:	f107 041c 	add.w	r4, r7, #28
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fb4b 	bl	8001cee <osThreadCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <main+0x70>)
 800065c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task2, Task2_init,osPriorityAboveNormal,0, 128);
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <main+0x74>)
 8000660:	463c      	mov	r4, r7
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2handler = osThreadCreate(osThread(Task2), NULL);
 8000670:	463b      	mov	r3, r7
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fb3a 	bl	8001cee <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a06      	ldr	r2, [pc, #24]	@ (8000698 <main+0x78>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f001 fb2e 	bl	8001ce0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <main+0x64>
 8000688:	080045ec 	.word	0x080045ec
 800068c:	08004608 	.word	0x08004608
 8000690:	200002dc 	.word	0x200002dc
 8000694:	0800462c 	.word	0x0800462c
 8000698:	200002e4 	.word	0x200002e4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fa0e 	bl	8003acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fb5b 	bl	8000ddc <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f8a2 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2105      	movs	r1, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fdbc 	bl	80012cc <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 f88b 	bl	8000874 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x30>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x30>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x30>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Default-Task\n");
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <StartDefaultTask+0x1c>)
 80007ae:	f003 f8ad 	bl	800390c <puts>
    osDelay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b6:	f001 faf2 	bl	8001d9e <osDelay>
	printf("Default-Task\n");
 80007ba:	bf00      	nop
 80007bc:	e7f6      	b.n	80007ac <StartDefaultTask+0x8>
 80007be:	bf00      	nop
 80007c0:	08004648 	.word	0x08004648

080007c4 <Task2_init>:
  }
  /* USER CODE END 5 */
}

void Task2_init(void const * argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		while(1)
		{
			printf("Task-2 running..., index = %d\n", idx++);
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <Task2_init+0x70>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	b2d1      	uxtb	r1, r2
 80007d4:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <Task2_init+0x70>)
 80007d6:	7011      	strb	r1, [r2, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4817      	ldr	r0, [pc, #92]	@ (8000838 <Task2_init+0x74>)
 80007dc:	f003 f82e 	bl	800383c <iprintf>
			osDelay(2000);
 80007e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e4:	f001 fadb 	bl	8001d9e <osDelay>

			if(idx == 4)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <Task2_init+0x70>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d107      	bne.n	8000800 <Task2_init+0x3c>
			{
				printf("Suspending Default-Task\n");
 80007f0:	4812      	ldr	r0, [pc, #72]	@ (800083c <Task2_init+0x78>)
 80007f2:	f003 f88b 	bl	800390c <puts>
				osThreadSuspend(defaultTaskHandle);
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <Task2_init+0x7c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fae3 	bl	8001dc6 <osThreadSuspend>
			}

			if(idx == 8)
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <Task2_init+0x70>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b08      	cmp	r3, #8
 8000806:	d107      	bne.n	8000818 <Task2_init+0x54>
			{
				printf("Resuming Default-Task\n");
 8000808:	480e      	ldr	r0, [pc, #56]	@ (8000844 <Task2_init+0x80>)
 800080a:	f003 f87f 	bl	800390c <puts>
				osThreadResume(defaultTaskHandle);
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <Task2_init+0x7c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fae4 	bl	8001de0 <osThreadResume>
			}
			if(idx == 10)
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <Task2_init+0x70>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b0a      	cmp	r3, #10
 800081e:	d1d5      	bne.n	80007cc <Task2_init+0x8>
			{
				printf("Terminating myself\n");
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <Task2_init+0x84>)
 8000822:	f003 f873 	bl	800390c <puts>
				osThreadTerminate(Task2handler);
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <Task2_init+0x88>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f001 faab 	bl	8001d86 <osThreadTerminate>
			printf("Task-2 running..., index = %d\n", idx++);
 8000830:	e7cc      	b.n	80007cc <Task2_init+0x8>
 8000832:	bf00      	nop
 8000834:	200002e0 	.word	0x200002e0
 8000838:	08004658 	.word	0x08004658
 800083c:	08004678 	.word	0x08004678
 8000840:	200002dc 	.word	0x200002dc
 8000844:	08004690 	.word	0x08004690
 8000848:	080046a8 	.word	0x080046a8
 800084c:	200002e4 	.word	0x200002e4

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 f9b9 	bl	8000bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010000 	.word	0x40010000

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <HAL_MspInit+0x54>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <HAL_MspInit+0x54>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210f      	movs	r1, #15
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	f000 fa5f 	bl	8000d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	@ 0x30
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <HAL_InitTick+0xd4>)
 80008ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f0:	4a2e      	ldr	r2, [pc, #184]	@ (80009ac <HAL_InitTick+0xd4>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f8:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <HAL_InitTick+0xd4>)
 80008fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 020c 	add.w	r2, r7, #12
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fee8 	bl	80016e4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000914:	f000 fed2 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 8000918:	4603      	mov	r3, r0
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <HAL_InitTick+0xd8>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800092c:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_InitTick+0xdc>)
 800092e:	4a22      	ldr	r2, [pc, #136]	@ (80009b8 <HAL_InitTick+0xe0>)
 8000930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <HAL_InitTick+0xdc>)
 8000934:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800093a:	4a1e      	ldr	r2, [pc, #120]	@ (80009b4 <HAL_InitTick+0xdc>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_InitTick+0xdc>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <HAL_InitTick+0xdc>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_InitTick+0xdc>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000952:	4818      	ldr	r0, [pc, #96]	@ (80009b4 <HAL_InitTick+0xdc>)
 8000954:	f000 fef8 	bl	8001748 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000962:	2b00      	cmp	r3, #0
 8000964:	d11b      	bne.n	800099e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <HAL_InitTick+0xdc>)
 8000968:	f000 ff48 	bl	80017fc <HAL_TIM_Base_Start_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000976:	2b00      	cmp	r3, #0
 8000978:	d111      	bne.n	800099e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800097a:	2019      	movs	r0, #25
 800097c:	f000 fa20 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b0f      	cmp	r3, #15
 8000984:	d808      	bhi.n	8000998 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000986:	2200      	movs	r2, #0
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	2019      	movs	r0, #25
 800098c:	f000 f9fc 	bl	8000d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_InitTick+0xe4>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	e002      	b.n	800099e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3730      	adds	r7, #48	@ 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	200002e8 	.word	0x200002e8
 80009b8:	40010000 	.word	0x40010000
 80009bc:	20000004 	.word	0x20000004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009fe:	f000 ff6d 	bl	80018dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002e8 	.word	0x200002e8

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
  }

  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f003 f842 	bl	8003b68 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20020000 	.word	0x20020000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	20000330 	.word	0x20000330
 8000b18:	200041d8 	.word	0x200041d8

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f003 f801 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fd55 	bl	8000620 <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b84:	08004720 	.word	0x08004720
  ldr r2, =_sbss
 8000b88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b8c:	200041d8 	.word	0x200041d8

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f8d8 	bl	8000d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f7ff fe88 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe5a 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000334 	.word	0x20000334

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000334 	.word	0x20000334

08000c18 <__NVIC_SetPriorityGrouping>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	@ (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	@ (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	@ 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff4c 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9a:	f7ff ff61 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff ffb1 	bl	8000d0c <NVIC_EncodePriority>
 8000daa:	4602      	mov	r2, r0
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff80 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff54 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e267      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d075      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dfa:	4b88      	ldr	r3, [pc, #544]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d00c      	beq.n	8000e20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e06:	4b85      	ldr	r3, [pc, #532]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d112      	bne.n	8000e38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e12:	4b82      	ldr	r3, [pc, #520]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e1e:	d10b      	bne.n	8000e38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	4b7e      	ldr	r3, [pc, #504]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d05b      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x108>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d157      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e242      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e40:	d106      	bne.n	8000e50 <HAL_RCC_OscConfig+0x74>
 8000e42:	4b76      	ldr	r3, [pc, #472]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a75      	ldr	r2, [pc, #468]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e01d      	b.n	8000e8c <HAL_RCC_OscConfig+0xb0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x98>
 8000e5a:	4b70      	ldr	r3, [pc, #448]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a6f      	ldr	r2, [pc, #444]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b6d      	ldr	r3, [pc, #436]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0xb0>
 8000e74:	4b69      	ldr	r3, [pc, #420]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a68      	ldr	r2, [pc, #416]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b66      	ldr	r3, [pc, #408]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a65      	ldr	r2, [pc, #404]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff feb4 	bl	8000c00 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff feb0 	bl	8000c00 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	@ 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e207      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	4b5b      	ldr	r3, [pc, #364]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0xc0>
 8000eba:	e014      	b.n	8000ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fea0 	bl	8000c00 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fe9c 	bl	8000c00 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	@ 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e1f3      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	4b51      	ldr	r3, [pc, #324]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0xe8>
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d063      	beq.n	8000fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000efe:	4b47      	ldr	r3, [pc, #284]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d11c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f0a:	4b44      	ldr	r3, [pc, #272]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	4b41      	ldr	r3, [pc, #260]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x152>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e1c7      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4937      	ldr	r1, [pc, #220]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	e03a      	b.n	8000fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <HAL_RCC_OscConfig+0x244>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fe55 	bl	8000c00 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fe51 	bl	8000c00 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e1a8      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b28      	ldr	r3, [pc, #160]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4925      	ldr	r1, [pc, #148]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e015      	b.n	8000fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_RCC_OscConfig+0x244>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fe34 	bl	8000c00 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fe30 	bl	8000c00 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e187      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d036      	beq.n	8001034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d016      	beq.n	8000ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_RCC_OscConfig+0x248>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fe14 	bl	8000c00 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fe10 	bl	8000c00 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e167      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_RCC_OscConfig+0x240>)
 8000ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x200>
 8000ffa:	e01b      	b.n	8001034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_RCC_OscConfig+0x248>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fdfd 	bl	8000c00 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001008:	e00e      	b.n	8001028 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fdf9 	bl	8000c00 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d907      	bls.n	8001028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e150      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
 800101c:	40023800 	.word	0x40023800
 8001020:	42470000 	.word	0x42470000
 8001024:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001028:	4b88      	ldr	r3, [pc, #544]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 800102a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ea      	bne.n	800100a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8097 	beq.w	8001170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001046:	4b81      	ldr	r3, [pc, #516]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10f      	bne.n	8001072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b7d      	ldr	r3, [pc, #500]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a7c      	ldr	r2, [pc, #496]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b7a      	ldr	r3, [pc, #488]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800106e:	2301      	movs	r3, #1
 8001070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001072:	4b77      	ldr	r3, [pc, #476]	@ (8001250 <HAL_RCC_OscConfig+0x474>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107a:	2b00      	cmp	r3, #0
 800107c:	d118      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107e:	4b74      	ldr	r3, [pc, #464]	@ (8001250 <HAL_RCC_OscConfig+0x474>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a73      	ldr	r2, [pc, #460]	@ (8001250 <HAL_RCC_OscConfig+0x474>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108a:	f7ff fdb9 	bl	8000c00 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001092:	f7ff fdb5 	bl	8000c00 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e10c      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001250 <HAL_RCC_OscConfig+0x474>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x2ea>
 80010b8:	4b64      	ldr	r3, [pc, #400]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010bc:	4a63      	ldr	r2, [pc, #396]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80010c4:	e01c      	b.n	8001100 <HAL_RCC_OscConfig+0x324>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x30c>
 80010ce:	4b5f      	ldr	r3, [pc, #380]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010d2:	4a5e      	ldr	r2, [pc, #376]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80010da:	4b5c      	ldr	r3, [pc, #368]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010de:	4a5b      	ldr	r2, [pc, #364]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0x324>
 80010e8:	4b58      	ldr	r3, [pc, #352]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010ec:	4a57      	ldr	r2, [pc, #348]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80010f4:	4b55      	ldr	r3, [pc, #340]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010f8:	4a54      	ldr	r2, [pc, #336]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80010fa:	f023 0304 	bic.w	r3, r3, #4
 80010fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d015      	beq.n	8001134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001108:	f7ff fd7a 	bl	8000c00 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110e:	e00a      	b.n	8001126 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff fd76 	bl	8000c00 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e0cb      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001126:	4b49      	ldr	r3, [pc, #292]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0ee      	beq.n	8001110 <HAL_RCC_OscConfig+0x334>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fd64 	bl	8000c00 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113a:	e00a      	b.n	8001152 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113c:	f7ff fd60 	bl	8000c00 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e0b5      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001152:	4b3e      	ldr	r3, [pc, #248]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ee      	bne.n	800113c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4b39      	ldr	r3, [pc, #228]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a38      	ldr	r2, [pc, #224]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 800116a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80a1 	beq.w	80012bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800117a:	4b34      	ldr	r3, [pc, #208]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b08      	cmp	r3, #8
 8001184:	d05c      	beq.n	8001240 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d141      	bne.n	8001212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118e:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <HAL_RCC_OscConfig+0x478>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fd34 	bl	8000c00 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff fd30 	bl	8000c00 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e087      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ae:	4b27      	ldr	r3, [pc, #156]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d0:	085b      	lsrs	r3, r3, #1
 80011d2:	3b01      	subs	r3, #1
 80011d4:	041b      	lsls	r3, r3, #16
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	491b      	ldr	r1, [pc, #108]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <HAL_RCC_OscConfig+0x478>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fd09 	bl	8000c00 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff fd05 	bl	8000c00 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e05c      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x416>
 8001210:	e054      	b.n	80012bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_RCC_OscConfig+0x478>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fcf2 	bl	8000c00 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001220:	f7ff fcee 	bl	8000c00 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e045      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_RCC_OscConfig+0x470>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x444>
 800123e:	e03d      	b.n	80012bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d107      	bne.n	8001258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e038      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000
 8001254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_RCC_OscConfig+0x4ec>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d028      	beq.n	80012b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001270:	429a      	cmp	r2, r3
 8001272:	d121      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d11a      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001288:	4013      	ands	r3, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800128e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001290:	4293      	cmp	r3, r2
 8001292:	d111      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129e:	085b      	lsrs	r3, r3, #1
 80012a0:	3b01      	subs	r3, #1
 80012a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0cc      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e0:	4b68      	ldr	r3, [pc, #416]	@ (8001484 <HAL_RCC_ClockConfig+0x1b8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d90c      	bls.n	8001308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b65      	ldr	r3, [pc, #404]	@ (8001484 <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b63      	ldr	r3, [pc, #396]	@ (8001484 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0b8      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001320:	4b59      	ldr	r3, [pc, #356]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a58      	ldr	r2, [pc, #352]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800132a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001338:	4b53      	ldr	r3, [pc, #332]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a52      	ldr	r2, [pc, #328]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001344:	4b50      	ldr	r3, [pc, #320]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	494d      	ldr	r1, [pc, #308]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d044      	beq.n	80013ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d107      	bne.n	800137a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e07f      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d003      	beq.n	800138a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001386:	2b03      	cmp	r3, #3
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4b3f      	ldr	r3, [pc, #252]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e06f      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b3b      	ldr	r3, [pc, #236]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e067      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013aa:	4b37      	ldr	r3, [pc, #220]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f023 0203 	bic.w	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4934      	ldr	r1, [pc, #208]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fc20 	bl	8000c00 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	e00a      	b.n	80013da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c4:	f7ff fc1c 	bl	8000c00 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e04f      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 020c 	and.w	r2, r3, #12
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1eb      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <HAL_RCC_ClockConfig+0x1b8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d20c      	bcs.n	8001414 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e032      	b.n	800147a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4916      	ldr	r1, [pc, #88]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	4313      	orrs	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800143e:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	490e      	ldr	r1, [pc, #56]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	4313      	orrs	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001452:	f000 f821 	bl	8001498 <HAL_RCC_GetSysClockFreq>
 8001456:	4602      	mov	r2, r0
 8001458:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	490a      	ldr	r1, [pc, #40]	@ (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	5ccb      	ldrb	r3, [r1, r3]
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_RCC_ClockConfig+0x1c8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fa30 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00
 8001488:	40023800 	.word	0x40023800
 800148c:	080046c4 	.word	0x080046c4
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800149c:	b094      	sub	sp, #80	@ 0x50
 800149e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80014a4:	2300      	movs	r3, #0
 80014a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014a8:	2300      	movs	r3, #0
 80014aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b0:	4b79      	ldr	r3, [pc, #484]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x200>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d00d      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x40>
 80014bc:	2b08      	cmp	r3, #8
 80014be:	f200 80e1 	bhi.w	8001684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x34>
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80014ca:	e0db      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b73      	ldr	r3, [pc, #460]	@ (800169c <HAL_RCC_GetSysClockFreq+0x204>)
 80014ce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80014d0:	e0db      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d2:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80014d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014d6:	e0d8      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x200>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x200>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x200>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	2200      	movs	r2, #0
 80014f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
 8001506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800150a:	4622      	mov	r2, r4
 800150c:	462b      	mov	r3, r5
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	0159      	lsls	r1, r3, #5
 8001518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800151c:	0150      	lsls	r0, r2, #5
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4621      	mov	r1, r4
 8001524:	1a51      	subs	r1, r2, r1
 8001526:	6139      	str	r1, [r7, #16]
 8001528:	4629      	mov	r1, r5
 800152a:	eb63 0301 	sbc.w	r3, r3, r1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800153c:	4659      	mov	r1, fp
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	4651      	mov	r1, sl
 8001542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001546:	4651      	mov	r1, sl
 8001548:	018a      	lsls	r2, r1, #6
 800154a:	4651      	mov	r1, sl
 800154c:	ebb2 0801 	subs.w	r8, r2, r1
 8001550:	4659      	mov	r1, fp
 8001552:	eb63 0901 	sbc.w	r9, r3, r1
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800156a:	4690      	mov	r8, r2
 800156c:	4699      	mov	r9, r3
 800156e:	4623      	mov	r3, r4
 8001570:	eb18 0303 	adds.w	r3, r8, r3
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	462b      	mov	r3, r5
 8001578:	eb49 0303 	adc.w	r3, r9, r3
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800158a:	4629      	mov	r1, r5
 800158c:	024b      	lsls	r3, r1, #9
 800158e:	4621      	mov	r1, r4
 8001590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001594:	4621      	mov	r1, r4
 8001596:	024a      	lsls	r2, r1, #9
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800159e:	2200      	movs	r2, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015a8:	f7fe fe62 	bl	8000270 <__aeabi_uldivmod>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4613      	mov	r3, r2
 80015b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015b4:	e058      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b6:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x200>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	099b      	lsrs	r3, r3, #6
 80015bc:	2200      	movs	r2, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	4611      	mov	r1, r2
 80015c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015c6:	623b      	str	r3, [r7, #32]
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80015cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015d0:	4642      	mov	r2, r8
 80015d2:	464b      	mov	r3, r9
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	f04f 0100 	mov.w	r1, #0
 80015dc:	0159      	lsls	r1, r3, #5
 80015de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e2:	0150      	lsls	r0, r2, #5
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4641      	mov	r1, r8
 80015ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80015ee:	4649      	mov	r1, r9
 80015f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001608:	ebb2 040a 	subs.w	r4, r2, sl
 800160c:	eb63 050b 	sbc.w	r5, r3, fp
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	00eb      	lsls	r3, r5, #3
 800161a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161e:	00e2      	lsls	r2, r4, #3
 8001620:	4614      	mov	r4, r2
 8001622:	461d      	mov	r5, r3
 8001624:	4643      	mov	r3, r8
 8001626:	18e3      	adds	r3, r4, r3
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	464b      	mov	r3, r9
 800162c:	eb45 0303 	adc.w	r3, r5, r3
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800163e:	4629      	mov	r1, r5
 8001640:	028b      	lsls	r3, r1, #10
 8001642:	4621      	mov	r1, r4
 8001644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001648:	4621      	mov	r1, r4
 800164a:	028a      	lsls	r2, r1, #10
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001652:	2200      	movs	r2, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	61fa      	str	r2, [r7, #28]
 8001658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800165c:	f7fe fe08 	bl	8000270 <__aeabi_uldivmod>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4613      	mov	r3, r2
 8001666:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x200>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800167a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001682:	e002      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_RCC_GetSysClockFreq+0x204>)
 8001686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800168c:	4618      	mov	r0, r3
 800168e:	3750      	adds	r7, #80	@ 0x50
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	00f42400 	.word	0x00f42400
 80016a0:	007a1200 	.word	0x007a1200

080016a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000

080016bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016c0:	f7ff fff0 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	0b5b      	lsrs	r3, r3, #13
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	4903      	ldr	r1, [pc, #12]	@ (80016e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	080046d4 	.word	0x080046d4

080016e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	220f      	movs	r2, #15
 80016f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_RCC_GetClockConfig+0x5c>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_RCC_GetClockConfig+0x5c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <HAL_RCC_GetClockConfig+0x5c>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_RCC_GetClockConfig+0x5c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <HAL_RCC_GetClockConfig+0x60>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0207 	and.w	r2, r3, #7
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40023c00 	.word	0x40023c00

08001748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e041      	b.n	80017de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f839 	bl	80017e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 f9c0 	bl	8001b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d001      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e04e      	b.n	80018b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a23      	ldr	r2, [pc, #140]	@ (80018c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d022      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800183e:	d01d      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d018      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1e      	ldr	r2, [pc, #120]	@ (80018c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <HAL_TIM_Base_Start_IT+0xd0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00e      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1b      	ldr	r2, [pc, #108]	@ (80018d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d009      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d004      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x80>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a18      	ldr	r2, [pc, #96]	@ (80018d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d111      	bne.n	80018a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b06      	cmp	r3, #6
 800188c:	d010      	beq.n	80018b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189e:	e007      	b.n	80018b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40010000 	.word	0x40010000
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40000800 	.word	0x40000800
 80018cc:	40000c00 	.word	0x40000c00
 80018d0:	40010400 	.word	0x40010400
 80018d4:	40014000 	.word	0x40014000
 80018d8:	40001800 	.word	0x40001800

080018dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d020      	beq.n	8001940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0202 	mvn.w	r2, #2
 8001910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8d2 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 800192c:	e005      	b.n	800193a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8c4 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f8d5 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d020      	beq.n	800198c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0204 	mvn.w	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8ac 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 8001978:	e005      	b.n	8001986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f89e 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8af 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d020      	beq.n	80019d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0208 	mvn.w	r2, #8
 80019a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f886 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 80019c4:	e005      	b.n	80019d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f878 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f889 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d020      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0210 	mvn.w	r2, #16
 80019f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2208      	movs	r2, #8
 80019fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f860 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f852 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f863 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0201 	mvn.w	r2, #1
 8001a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe ff04 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f906 	bl	8001c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00c      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f834 	bl	8001af8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0220 	mvn.w	r2, #32
 8001aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8d8 	bl	8001c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a46      	ldr	r2, [pc, #280]	@ (8001c38 <TIM_Base_SetConfig+0x12c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2a:	d00f      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a43      	ldr	r2, [pc, #268]	@ (8001c3c <TIM_Base_SetConfig+0x130>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00b      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <TIM_Base_SetConfig+0x134>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a41      	ldr	r2, [pc, #260]	@ (8001c44 <TIM_Base_SetConfig+0x138>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a40      	ldr	r2, [pc, #256]	@ (8001c48 <TIM_Base_SetConfig+0x13c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a35      	ldr	r2, [pc, #212]	@ (8001c38 <TIM_Base_SetConfig+0x12c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02b      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b6c:	d027      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a32      	ldr	r2, [pc, #200]	@ (8001c3c <TIM_Base_SetConfig+0x130>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d023      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a31      	ldr	r2, [pc, #196]	@ (8001c40 <TIM_Base_SetConfig+0x134>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a30      	ldr	r2, [pc, #192]	@ (8001c44 <TIM_Base_SetConfig+0x138>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01b      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a2f      	ldr	r2, [pc, #188]	@ (8001c48 <TIM_Base_SetConfig+0x13c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d017      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a2e      	ldr	r2, [pc, #184]	@ (8001c4c <TIM_Base_SetConfig+0x140>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a2d      	ldr	r2, [pc, #180]	@ (8001c50 <TIM_Base_SetConfig+0x144>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00f      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c54 <TIM_Base_SetConfig+0x148>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00b      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <TIM_Base_SetConfig+0x14c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c5c <TIM_Base_SetConfig+0x150>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d003      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a29      	ldr	r2, [pc, #164]	@ (8001c60 <TIM_Base_SetConfig+0x154>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d108      	bne.n	8001bd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <TIM_Base_SetConfig+0x12c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <TIM_Base_SetConfig+0xf8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <TIM_Base_SetConfig+0x13c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d103      	bne.n	8001c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f023 0201 	bic.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40000800 	.word	0x40000800
 8001c44:	40000c00 	.word	0x40000c00
 8001c48:	40010400 	.word	0x40010400
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	40014400 	.word	0x40014400
 8001c54:	40014800 	.word	0x40014800
 8001c58:	40001800 	.word	0x40001800
 8001c5c:	40001c00 	.word	0x40001c00
 8001c60:	40002000 	.word	0x40002000

08001c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9e:	2b84      	cmp	r3, #132	@ 0x84
 8001ca0:	d005      	beq.n	8001cae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ca2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	3303      	adds	r3, #3
 8001cac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cc2:	f3ef 8305 	mrs	r3, IPSR
 8001cc6:	607b      	str	r3, [r7, #4]
  return(result);
 8001cc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001ce4:	f000 fd46 	bl	8002774 <vTaskStartScheduler>
  
  return osOK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}

08001cee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf0:	b089      	sub	sp, #36	@ 0x24
 8001cf2:	af04      	add	r7, sp, #16
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <osThreadCreate+0x54>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685c      	ldr	r4, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691e      	ldr	r6, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ffb6 	bl	8001c8c <makeFreeRtosPriority>
 8001d20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d2a:	9202      	str	r2, [sp, #8]
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	9100      	str	r1, [sp, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4632      	mov	r2, r6
 8001d34:	4629      	mov	r1, r5
 8001d36:	4620      	mov	r0, r4
 8001d38:	f000 f928 	bl	8001f8c <xTaskCreateStatic>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e01c      	b.n	8001d7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685c      	ldr	r4, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff98 	bl	8001c8c <makeFreeRtosPriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	4632      	mov	r2, r6
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f000 f96d 	bl	800204c <xTaskCreate>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d001      	beq.n	8001d7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d86 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa94 	bl	80022bc <vTaskDelete>
  return osOK;
 8001d94:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <osDelay+0x16>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	e000      	b.n	8001db6 <osDelay+0x18>
 8001db4:	2301      	movs	r3, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fb10 	bl	80023dc <vTaskDelay>
  
  return osOK;
 8001dbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fb3a 	bl	8002448 <vTaskSuspend>
  
  return osOK;
 8001dd4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8001de8:	f7ff ff68 	bl	8001cbc <inHandlerMode>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00e      	beq.n	8001e10 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fc4c 	bl	8002690 <xTaskResumeFromISR>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10b      	bne.n	8001e16 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <osThreadResume+0x40>)
 8001e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	e002      	b.n	8001e16 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fbdf 	bl	80025d4 <vTaskResume>
  }
  return osOK;
 8001e16:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	e000ed04 	.word	0xe000ed04

08001e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f103 0208 	add.w	r2, r3, #8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f103 0208 	add.w	r2, r3, #8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0208 	add.w	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d103      	bne.n	8001ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e00c      	b.n	8001f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e002      	b.n	8001ef4 <vListInsert+0x2e>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d2f6      	bcs.n	8001eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6892      	ldr	r2, [r2, #8]
 8001f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6852      	ldr	r2, [r2, #4]
 8001f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d103      	bne.n	8001f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	@ 0x38
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	61fb      	str	r3, [r7, #28]
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	e7fd      	b.n	8001fd2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fd6:	2354      	movs	r3, #84	@ 0x54
 8001fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b54      	cmp	r3, #84	@ 0x54
 8001fde:	d00b      	beq.n	8001ff8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	61bb      	str	r3, [r7, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ff8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01e      	beq.n	800203e <xTaskCreateStatic+0xb2>
 8002000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01b      	beq.n	800203e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	2202      	movs	r2, #2
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002018:	2300      	movs	r3, #0
 800201a:	9303      	str	r3, [sp, #12]
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f850 	bl	80020d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002038:	f000 f8d6 	bl	80021e8 <prvAddNewTaskToReadyList>
 800203c:	e001      	b.n	8002042 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002042:	697b      	ldr	r3, [r7, #20]
	}
 8002044:	4618      	mov	r0, r3
 8002046:	3728      	adds	r7, #40	@ 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	@ 0x30
 8002050:	af04      	add	r7, sp, #16
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f93b 	bl	80032dc <pvPortMalloc>
 8002066:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00e      	beq.n	800208c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800206e:	2054      	movs	r0, #84	@ 0x54
 8002070:	f001 f934 	bl	80032dc <pvPortMalloc>
 8002074:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
 8002082:	e005      	b.n	8002090 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f001 f9f7 	bl	8003478 <vPortFree>
 800208a:	e001      	b.n	8002090 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9303      	str	r3, [sp, #12]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	9302      	str	r3, [sp, #8]
 80020a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f80e 	bl	80020d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020ba:	69f8      	ldr	r0, [r7, #28]
 80020bc:	f000 f894 	bl	80021e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020c0:	2301      	movs	r3, #1
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	e002      	b.n	80020cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80020cc:	69bb      	ldr	r3, [r7, #24]
	}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b088      	sub	sp, #32
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020ee:	3b01      	subs	r3, #1
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f023 0307 	bic.w	r3, r3, #7
 80020fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	617b      	str	r3, [r7, #20]
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01f      	beq.n	8002166 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e012      	b.n	8002152 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	4413      	add	r3, r2
 8002132:	7819      	ldrb	r1, [r3, #0]
 8002134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	3334      	adds	r3, #52	@ 0x34
 800213c:	460a      	mov	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d9e9      	bls.n	800212c <prvInitialiseNewTask+0x56>
 8002158:	e000      	b.n	800215c <prvInitialiseNewTask+0x86>
			{
				break;
 800215a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002164:	e003      	b.n	800216e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	2b06      	cmp	r3, #6
 8002172:	d901      	bls.n	8002178 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002174:	2306      	movs	r3, #6
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800217c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800217e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002182:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002186:	2200      	movs	r2, #0
 8002188:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800218a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218c:	3304      	adds	r3, #4
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fe68 	bl	8001e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002196:	3318      	adds	r3, #24
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fe63 	bl	8001e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	f1c3 0207 	rsb	r2, r3, #7
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	2200      	movs	r2, #0
 80021b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	69b8      	ldr	r0, [r7, #24]
 80021c8:	f000 fe34 	bl	8002e34 <pxPortInitialiseStack>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80021d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80021f0:	f000 ff52 	bl	8003098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <prvAddNewTaskToReadyList+0xb8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <prvAddNewTaskToReadyList+0xb8>)
 80021fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <prvAddNewTaskToReadyList+0xbc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002206:	4a27      	ldr	r2, [pc, #156]	@ (80022a4 <prvAddNewTaskToReadyList+0xbc>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <prvAddNewTaskToReadyList+0xb8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d110      	bne.n	8002236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002214:	f000 fcea 	bl	8002bec <prvInitialiseTaskLists>
 8002218:	e00d      	b.n	8002236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <prvAddNewTaskToReadyList+0xc0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <prvAddNewTaskToReadyList+0xbc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	429a      	cmp	r2, r3
 800222e:	d802      	bhi.n	8002236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002230:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <prvAddNewTaskToReadyList+0xbc>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <prvAddNewTaskToReadyList+0xc4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ac <prvAddNewTaskToReadyList+0xc4>)
 800223e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <prvAddNewTaskToReadyList+0xc8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4313      	orrs	r3, r2
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <prvAddNewTaskToReadyList+0xc8>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4a15      	ldr	r2, [pc, #84]	@ (80022b4 <prvAddNewTaskToReadyList+0xcc>)
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7ff fe08 	bl	8001e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800226e:	f000 ff45 	bl	80030fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002272:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <prvAddNewTaskToReadyList+0xc0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00e      	beq.n	8002298 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <prvAddNewTaskToReadyList+0xbc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <prvAddNewTaskToReadyList+0xd0>)
 800228a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000438 	.word	0x20000438
 80022a4:	20000338 	.word	0x20000338
 80022a8:	20000444 	.word	0x20000444
 80022ac:	20000454 	.word	0x20000454
 80022b0:	20000440 	.word	0x20000440
 80022b4:	2000033c 	.word	0x2000033c
 80022b8:	e000ed04 	.word	0xe000ed04

080022bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80022c4:	f000 fee8 	bl	8003098 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <vTaskDelete+0x18>
 80022ce:	4b39      	ldr	r3, [pc, #228]	@ (80023b4 <vTaskDelete+0xf8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e000      	b.n	80022d6 <vTaskDelete+0x1a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3304      	adds	r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fe2b 	bl	8001f38 <uxListRemove>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d115      	bne.n	8002314 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ec:	4932      	ldr	r1, [pc, #200]	@ (80023b8 <vTaskDelete+0xfc>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <vTaskDelete+0x58>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	2201      	movs	r2, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	4b2c      	ldr	r3, [pc, #176]	@ (80023bc <vTaskDelete+0x100>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4013      	ands	r3, r2
 8002310:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <vTaskDelete+0x100>)
 8002312:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3318      	adds	r3, #24
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe09 	bl	8001f38 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002326:	4b26      	ldr	r3, [pc, #152]	@ (80023c0 <vTaskDelete+0x104>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a24      	ldr	r2, [pc, #144]	@ (80023c0 <vTaskDelete+0x104>)
 800232e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <vTaskDelete+0xf8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d10b      	bne.n	8002352 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4820      	ldr	r0, [pc, #128]	@ (80023c4 <vTaskDelete+0x108>)
 8002342:	f7ff fd9c 	bl	8001e7e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <vTaskDelete+0x10c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	4a1e      	ldr	r2, [pc, #120]	@ (80023c8 <vTaskDelete+0x10c>)
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e009      	b.n	8002366 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002352:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <vTaskDelete+0x110>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3b01      	subs	r3, #1
 8002358:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <vTaskDelete+0x110>)
 800235a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fcb3 	bl	8002cc8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002362:	f000 fce1 	bl	8002d28 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002366:	f000 fec9 	bl	80030fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <vTaskDelete+0x114>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01c      	beq.n	80023ac <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <vTaskDelete+0xf8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d117      	bne.n	80023ac <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <vTaskDelete+0x118>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <vTaskDelete+0xe0>
	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	60bb      	str	r3, [r7, #8]
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800239c:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <vTaskDelete+0x11c>)
 800239e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000338 	.word	0x20000338
 80023b8:	2000033c 	.word	0x2000033c
 80023bc:	20000440 	.word	0x20000440
 80023c0:	20000454 	.word	0x20000454
 80023c4:	2000040c 	.word	0x2000040c
 80023c8:	20000420 	.word	0x20000420
 80023cc:	20000438 	.word	0x20000438
 80023d0:	20000444 	.word	0x20000444
 80023d4:	20000460 	.word	0x20000460
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d018      	beq.n	8002420 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <vTaskDelay+0x64>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <vTaskDelay+0x32>
	__asm volatile
 80023f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	60bb      	str	r3, [r7, #8]
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	e7fd      	b.n	800240a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800240e:	f000 fa13 	bl	8002838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002412:	2100      	movs	r1, #0
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fca7 	bl	8002d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800241a:	f000 fa1b 	bl	8002854 <xTaskResumeAll>
 800241e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <vTaskDelay+0x68>)
 8002428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000460 	.word	0x20000460
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002450:	f000 fe22 	bl	8003098 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <vTaskSuspend+0x18>
 800245a:	4b3d      	ldr	r3, [pc, #244]	@ (8002550 <vTaskSuspend+0x108>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e000      	b.n	8002462 <vTaskSuspend+0x1a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3304      	adds	r3, #4
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fd65 	bl	8001f38 <uxListRemove>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d115      	bne.n	80024a0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002478:	4936      	ldr	r1, [pc, #216]	@ (8002554 <vTaskSuspend+0x10c>)
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <vTaskSuspend+0x58>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	2201      	movs	r2, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <vTaskSuspend+0x110>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4013      	ands	r3, r2
 800249c:	4a2e      	ldr	r2, [pc, #184]	@ (8002558 <vTaskSuspend+0x110>)
 800249e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3318      	adds	r3, #24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fd43 	bl	8001f38 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4828      	ldr	r0, [pc, #160]	@ (800255c <vTaskSuspend+0x114>)
 80024ba:	f7ff fce0 	bl	8001e7e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d103      	bne.n	80024d2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80024d2:	f000 fe13 	bl	80030fc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80024d6:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <vTaskSuspend+0x118>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80024de:	f000 fddb 	bl	8003098 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80024e2:	f000 fc21 	bl	8002d28 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80024e6:	f000 fe09 	bl	80030fc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80024ea:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <vTaskSuspend+0x108>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d128      	bne.n	8002546 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <vTaskSuspend+0x118>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d018      	beq.n	800252e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <vTaskSuspend+0x11c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <vTaskSuspend+0xd4>
	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	60bb      	str	r3, [r7, #8]
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <vTaskSuspend+0x120>)
 800251e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800252c:	e00b      	b.n	8002546 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <vTaskSuspend+0x114>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <vTaskSuspend+0x124>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d103      	bne.n	8002542 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <vTaskSuspend+0x108>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
	}
 8002540:	e001      	b.n	8002546 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8002542:	f000 fadf 	bl	8002b04 <vTaskSwitchContext>
	}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000338 	.word	0x20000338
 8002554:	2000033c 	.word	0x2000033c
 8002558:	20000440 	.word	0x20000440
 800255c:	20000424 	.word	0x20000424
 8002560:	20000444 	.word	0x20000444
 8002564:	20000460 	.word	0x20000460
 8002568:	e000ed04 	.word	0xe000ed04
 800256c:	20000438 	.word	0x20000438

08002570 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8002586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	60fb      	str	r3, [r7, #12]
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	e7fd      	b.n	800259a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <prvTaskIsTaskSuspended+0x5c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10a      	bne.n	80025be <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <prvTaskIsTaskSuspended+0x60>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d005      	beq.n	80025be <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80025be:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80025c0:	4618      	mov	r0, r3
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	20000424 	.word	0x20000424
 80025d0:	200003f8 	.word	0x200003f8

080025d4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <vTaskResume+0x2a>
	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	60bb      	str	r3, [r7, #8]
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	e7fd      	b.n	80025fa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <vTaskResume+0xac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d037      	beq.n	8002678 <vTaskResume+0xa4>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d034      	beq.n	8002678 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800260e:	f000 fd43 	bl	8003098 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ffac 	bl	8002570 <prvTaskIsTaskSuspended>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02a      	beq.n	8002674 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc88 	bl	8001f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	2201      	movs	r2, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <vTaskResume+0xb0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <vTaskResume+0xb0>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <vTaskResume+0xb4>)
 8002648:	441a      	add	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7ff fc14 	bl	8001e7e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <vTaskResume+0xac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d307      	bcc.n	8002674 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8002664:	4b09      	ldr	r3, [pc, #36]	@ (800268c <vTaskResume+0xb8>)
 8002666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002674:	f000 fd42 	bl	80030fc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000338 	.word	0x20000338
 8002684:	20000440 	.word	0x20000440
 8002688:	2000033c 	.word	0x2000033c
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <xTaskResumeFromISR+0x2e>
	__asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	61bb      	str	r3, [r7, #24]
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026be:	f000 fdcb 	bl	8003258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026c2:	f3ef 8211 	mrs	r2, BASEPRI
 80026c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	617a      	str	r2, [r7, #20]
 80026d8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026da:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026dc:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80026de:	6a38      	ldr	r0, [r7, #32]
 80026e0:	f7ff ff46 	bl	8002570 <prvTaskIsTaskSuspended>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d02f      	beq.n	800274a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <xTaskResumeFromISR+0xd0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d125      	bne.n	800273e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <xTaskResumeFromISR+0xd4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d301      	bcc.n	8002704 <xTaskResumeFromISR+0x74>
					{
						xYieldRequired = pdTRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	3304      	adds	r3, #4
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fc15 	bl	8001f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	2201      	movs	r2, #1
 8002714:	409a      	lsls	r2, r3
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <xTaskResumeFromISR+0xd8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <xTaskResumeFromISR+0xd8>)
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4a0f      	ldr	r2, [pc, #60]	@ (800276c <xTaskResumeFromISR+0xdc>)
 800272e:	441a      	add	r2, r3
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f7ff fba1 	bl	8001e7e <vListInsertEnd>
 800273c:	e005      	b.n	800274a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	3318      	adds	r3, #24
 8002742:	4619      	mov	r1, r3
 8002744:	480a      	ldr	r0, [pc, #40]	@ (8002770 <xTaskResumeFromISR+0xe0>)
 8002746:	f7ff fb9a 	bl	8001e7e <vListInsertEnd>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002754:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8002758:	4618      	mov	r0, r3
 800275a:	3728      	adds	r7, #40	@ 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000460 	.word	0x20000460
 8002764:	20000338 	.word	0x20000338
 8002768:	20000440 	.word	0x20000440
 800276c:	2000033c 	.word	0x2000033c
 8002770:	200003f8 	.word	0x200003f8

08002774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002782:	463a      	mov	r2, r7
 8002784:	1d39      	adds	r1, r7, #4
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fee8 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	9202      	str	r2, [sp, #8]
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	2300      	movs	r3, #0
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	460a      	mov	r2, r1
 80027a2:	491f      	ldr	r1, [pc, #124]	@ (8002820 <vTaskStartScheduler+0xac>)
 80027a4:	481f      	ldr	r0, [pc, #124]	@ (8002824 <vTaskStartScheduler+0xb0>)
 80027a6:	f7ff fbf1 	bl	8001f8c <xTaskCreateStatic>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002828 <vTaskStartScheduler+0xb4>)
 80027ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <vTaskStartScheduler+0xb4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027b8:	2301      	movs	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	e001      	b.n	80027c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d116      	bne.n	80027f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	613b      	str	r3, [r7, #16]
}
 80027da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <vTaskStartScheduler+0xb8>)
 80027de:	f04f 32ff 	mov.w	r2, #4294967295
 80027e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <vTaskStartScheduler+0xbc>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <vTaskStartScheduler+0xc0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027f0:	f000 fbae 	bl	8002f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027f4:	e00f      	b.n	8002816 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d10b      	bne.n	8002816 <vTaskStartScheduler+0xa2>
	__asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	60fb      	str	r3, [r7, #12]
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	e7fd      	b.n	8002812 <vTaskStartScheduler+0x9e>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	080046bc 	.word	0x080046bc
 8002824:	08002bbd 	.word	0x08002bbd
 8002828:	2000045c 	.word	0x2000045c
 800282c:	20000458 	.word	0x20000458
 8002830:	20000444 	.word	0x20000444
 8002834:	2000043c 	.word	0x2000043c

08002838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <vTaskSuspendAll+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	4a03      	ldr	r2, [pc, #12]	@ (8002850 <vTaskSuspendAll+0x18>)
 8002844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	20000460 	.word	0x20000460

08002854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002862:	4b42      	ldr	r3, [pc, #264]	@ (800296c <xTaskResumeAll+0x118>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <xTaskResumeAll+0x2e>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	603b      	str	r3, [r7, #0]
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002882:	f000 fc09 	bl	8003098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002886:	4b39      	ldr	r3, [pc, #228]	@ (800296c <xTaskResumeAll+0x118>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	4a37      	ldr	r2, [pc, #220]	@ (800296c <xTaskResumeAll+0x118>)
 800288e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002890:	4b36      	ldr	r3, [pc, #216]	@ (800296c <xTaskResumeAll+0x118>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d161      	bne.n	800295c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002898:	4b35      	ldr	r3, [pc, #212]	@ (8002970 <xTaskResumeAll+0x11c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05d      	beq.n	800295c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028a0:	e02e      	b.n	8002900 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a2:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <xTaskResumeAll+0x120>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3318      	adds	r3, #24
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fb42 	bl	8001f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fb3d 	bl	8001f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <xTaskResumeAll+0x124>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <xTaskResumeAll+0x124>)
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4a27      	ldr	r2, [pc, #156]	@ (800297c <xTaskResumeAll+0x128>)
 80028de:	441a      	add	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f7ff fac9 	bl	8001e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f0:	4b23      	ldr	r3, [pc, #140]	@ (8002980 <xTaskResumeAll+0x12c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <xTaskResumeAll+0x130>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002900:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <xTaskResumeAll+0x120>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1cc      	bne.n	80028a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800290e:	f000 fa0b 	bl	8002d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002912:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <xTaskResumeAll+0x134>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800291e:	f000 f837 	bl	8002990 <xTaskIncrementTick>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002928:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <xTaskResumeAll+0x130>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3b01      	subs	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f1      	bne.n	800291e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <xTaskResumeAll+0x134>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <xTaskResumeAll+0x130>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002948:	2301      	movs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <xTaskResumeAll+0x138>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800295c:	f000 fbce 	bl	80030fc <vPortExitCritical>

	return xAlreadyYielded;
 8002960:	68bb      	ldr	r3, [r7, #8]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000460 	.word	0x20000460
 8002970:	20000438 	.word	0x20000438
 8002974:	200003f8 	.word	0x200003f8
 8002978:	20000440 	.word	0x20000440
 800297c:	2000033c 	.word	0x2000033c
 8002980:	20000338 	.word	0x20000338
 8002984:	2000044c 	.word	0x2000044c
 8002988:	20000448 	.word	0x20000448
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800299a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad8 <xTaskIncrementTick+0x148>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 808f 	bne.w	8002ac2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029a4:	4b4d      	ldr	r3, [pc, #308]	@ (8002adc <xTaskIncrementTick+0x14c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029ac:	4a4b      	ldr	r2, [pc, #300]	@ (8002adc <xTaskIncrementTick+0x14c>)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d121      	bne.n	80029fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80029b8:	4b49      	ldr	r3, [pc, #292]	@ (8002ae0 <xTaskIncrementTick+0x150>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <xTaskIncrementTick+0x4a>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	603b      	str	r3, [r7, #0]
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	e7fd      	b.n	80029d6 <xTaskIncrementTick+0x46>
 80029da:	4b41      	ldr	r3, [pc, #260]	@ (8002ae0 <xTaskIncrementTick+0x150>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	4b40      	ldr	r3, [pc, #256]	@ (8002ae4 <xTaskIncrementTick+0x154>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3e      	ldr	r2, [pc, #248]	@ (8002ae0 <xTaskIncrementTick+0x150>)
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ae4 <xTaskIncrementTick+0x154>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae8 <xTaskIncrementTick+0x158>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae8 <xTaskIncrementTick+0x158>)
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	f000 f996 	bl	8002d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029fc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <xTaskIncrementTick+0x15c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d348      	bcc.n	8002a98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a06:	4b36      	ldr	r3, [pc, #216]	@ (8002ae0 <xTaskIncrementTick+0x150>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <xTaskIncrementTick+0x15c>)
 8002a12:	f04f 32ff 	mov.w	r2, #4294967295
 8002a16:	601a      	str	r2, [r3, #0]
					break;
 8002a18:	e03e      	b.n	8002a98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ae0 <xTaskIncrementTick+0x150>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d203      	bcs.n	8002a3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a32:	4a2e      	ldr	r2, [pc, #184]	@ (8002aec <xTaskIncrementTick+0x15c>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a38:	e02e      	b.n	8002a98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fa7a 	bl	8001f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3318      	adds	r3, #24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fa71 	bl	8001f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <xTaskIncrementTick+0x160>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	4a22      	ldr	r2, [pc, #136]	@ (8002af0 <xTaskIncrementTick+0x160>)
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <xTaskIncrementTick+0x164>)
 8002a76:	441a      	add	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f7ff f9fd 	bl	8001e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <xTaskIncrementTick+0x168>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3b9      	bcc.n	8002a06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a96:	e7b6      	b.n	8002a06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <xTaskIncrementTick+0x168>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9e:	4915      	ldr	r1, [pc, #84]	@ (8002af4 <xTaskIncrementTick+0x164>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d901      	bls.n	8002ab4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <xTaskIncrementTick+0x16c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e004      	b.n	8002acc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <xTaskIncrementTick+0x170>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <xTaskIncrementTick+0x170>)
 8002aca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002acc:	697b      	ldr	r3, [r7, #20]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000460 	.word	0x20000460
 8002adc:	2000043c 	.word	0x2000043c
 8002ae0:	200003f0 	.word	0x200003f0
 8002ae4:	200003f4 	.word	0x200003f4
 8002ae8:	20000450 	.word	0x20000450
 8002aec:	20000458 	.word	0x20000458
 8002af0:	20000440 	.word	0x20000440
 8002af4:	2000033c 	.word	0x2000033c
 8002af8:	20000338 	.word	0x20000338
 8002afc:	2000044c 	.word	0x2000044c
 8002b00:	20000448 	.word	0x20000448

08002b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <vTaskSwitchContext+0xa4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b12:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <vTaskSwitchContext+0xa8>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b18:	e040      	b.n	8002b9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <vTaskSwitchContext+0xa8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b20:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <vTaskSwitchContext+0xac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	f1c3 031f 	rsb	r3, r3, #31
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	491f      	ldr	r1, [pc, #124]	@ (8002bb4 <vTaskSwitchContext+0xb0>)
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10b      	bne.n	8002b62 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	607b      	str	r3, [r7, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	e7fd      	b.n	8002b5e <vTaskSwitchContext+0x5a>
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4a11      	ldr	r2, [pc, #68]	@ (8002bb4 <vTaskSwitchContext+0xb0>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	3308      	adds	r3, #8
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d104      	bne.n	8002b92 <vTaskSwitchContext+0x8e>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <vTaskSwitchContext+0xb4>)
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20000460 	.word	0x20000460
 8002bac:	2000044c 	.word	0x2000044c
 8002bb0:	20000440 	.word	0x20000440
 8002bb4:	2000033c 	.word	0x2000033c
 8002bb8:	20000338 	.word	0x20000338

08002bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bc4:	f000 f852 	bl	8002c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <prvIdleTask+0x28>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d9f9      	bls.n	8002bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <prvIdleTask+0x2c>)
 8002bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002be0:	e7f0      	b.n	8002bc4 <prvIdleTask+0x8>
 8002be2:	bf00      	nop
 8002be4:	2000033c 	.word	0x2000033c
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	e00c      	b.n	8002c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <prvInitialiseTaskLists+0x60>)
 8002c04:	4413      	add	r3, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f90c 	bl	8001e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b06      	cmp	r3, #6
 8002c16:	d9ef      	bls.n	8002bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c18:	480d      	ldr	r0, [pc, #52]	@ (8002c50 <prvInitialiseTaskLists+0x64>)
 8002c1a:	f7ff f903 	bl	8001e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c1e:	480d      	ldr	r0, [pc, #52]	@ (8002c54 <prvInitialiseTaskLists+0x68>)
 8002c20:	f7ff f900 	bl	8001e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c24:	480c      	ldr	r0, [pc, #48]	@ (8002c58 <prvInitialiseTaskLists+0x6c>)
 8002c26:	f7ff f8fd 	bl	8001e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c2a:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <prvInitialiseTaskLists+0x70>)
 8002c2c:	f7ff f8fa 	bl	8001e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c30:	480b      	ldr	r0, [pc, #44]	@ (8002c60 <prvInitialiseTaskLists+0x74>)
 8002c32:	f7ff f8f7 	bl	8001e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <prvInitialiseTaskLists+0x78>)
 8002c38:	4a05      	ldr	r2, [pc, #20]	@ (8002c50 <prvInitialiseTaskLists+0x64>)
 8002c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <prvInitialiseTaskLists+0x7c>)
 8002c3e:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <prvInitialiseTaskLists+0x68>)
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000033c 	.word	0x2000033c
 8002c50:	200003c8 	.word	0x200003c8
 8002c54:	200003dc 	.word	0x200003dc
 8002c58:	200003f8 	.word	0x200003f8
 8002c5c:	2000040c 	.word	0x2000040c
 8002c60:	20000424 	.word	0x20000424
 8002c64:	200003f0 	.word	0x200003f0
 8002c68:	200003f4 	.word	0x200003f4

08002c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c72:	e019      	b.n	8002ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c74:	f000 fa10 	bl	8003098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <prvCheckTasksWaitingTermination+0x50>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff f957 	bl	8001f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <prvCheckTasksWaitingTermination+0x54>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <prvCheckTasksWaitingTermination+0x54>)
 8002c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <prvCheckTasksWaitingTermination+0x58>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <prvCheckTasksWaitingTermination+0x58>)
 8002c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c9e:	f000 fa2d 	bl	80030fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f810 	bl	8002cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <prvCheckTasksWaitingTermination+0x58>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e1      	bne.n	8002c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000040c 	.word	0x2000040c
 8002cc0:	20000438 	.word	0x20000438
 8002cc4:	20000420 	.word	0x20000420

08002cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fbca 	bl	8003478 <vPortFree>
				vPortFree( pxTCB );
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fbc7 	bl	8003478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002cea:	e019      	b.n	8002d20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d103      	bne.n	8002cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fbbe 	bl	8003478 <vPortFree>
	}
 8002cfc:	e010      	b.n	8002d20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d00b      	beq.n	8002d20 <prvDeleteTCB+0x58>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	60fb      	str	r3, [r7, #12]
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <prvDeleteTCB+0x54>
	}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <prvResetNextTaskUnblockTime+0x38>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <prvResetNextTaskUnblockTime+0x3c>)
 8002d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d40:	e008      	b.n	8002d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <prvResetNextTaskUnblockTime+0x38>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <prvResetNextTaskUnblockTime+0x3c>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	200003f0 	.word	0x200003f0
 8002d64:	20000458 	.word	0x20000458

08002d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d78:	4b28      	ldr	r3, [pc, #160]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f8da 	bl	8001f38 <uxListRemove>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d8a:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	2201      	movs	r2, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002da0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d10a      	bne.n	8002dc0 <prvAddCurrentTaskToDelayedList+0x58>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3304      	adds	r3, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	481a      	ldr	r0, [pc, #104]	@ (8002e24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002dba:	f7ff f860 	bl	8001e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002dbe:	e026      	b.n	8002e0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d209      	bcs.n	8002dec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3304      	adds	r3, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7ff f86e 	bl	8001ec6 <vListInsert>
}
 8002dea:	e010      	b.n	8002e0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7ff f864 	bl	8001ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d202      	bcs.n	8002e0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e08:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6013      	str	r3, [r2, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000043c 	.word	0x2000043c
 8002e1c:	20000338 	.word	0x20000338
 8002e20:	20000440 	.word	0x20000440
 8002e24:	20000424 	.word	0x20000424
 8002e28:	200003f4 	.word	0x200003f4
 8002e2c:	200003f0 	.word	0x200003f0
 8002e30:	20000458 	.word	0x20000458

08002e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b04      	subs	r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b04      	subs	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3b04      	subs	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e64:	4a0c      	ldr	r2, [pc, #48]	@ (8002e98 <pxPortInitialiseStack+0x64>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3b14      	subs	r3, #20
 8002e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f06f 0202 	mvn.w	r2, #2
 8002e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3b20      	subs	r3, #32
 8002e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	08002e9d 	.word	0x08002e9d

08002e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ea6:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <prvTaskExitError+0x58>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d00b      	beq.n	8002ec8 <prvTaskExitError+0x2c>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	60fb      	str	r3, [r7, #12]
}
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <prvTaskExitError+0x28>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	60bb      	str	r3, [r7, #8]
}
 8002eda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002edc:	bf00      	nop
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0fc      	beq.n	8002ede <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	2000000c 	.word	0x2000000c
	...

08002f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <pxCurrentTCBConst2>)
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	6808      	ldr	r0, [r1, #0]
 8002f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0a:	f380 8809 	msr	PSP, r0
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f380 8811 	msr	BASEPRI, r0
 8002f1a:	4770      	bx	lr
 8002f1c:	f3af 8000 	nop.w

08002f20 <pxCurrentTCBConst2>:
 8002f20:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop

08002f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002f28:	4808      	ldr	r0, [pc, #32]	@ (8002f4c <prvPortStartFirstTask+0x24>)
 8002f2a:	6800      	ldr	r0, [r0, #0]
 8002f2c:	6800      	ldr	r0, [r0, #0]
 8002f2e:	f380 8808 	msr	MSP, r0
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8814 	msr	CONTROL, r0
 8002f3a:	b662      	cpsie	i
 8002f3c:	b661      	cpsie	f
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	df00      	svc	0
 8002f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f4a:	bf00      	nop
 8002f4c:	e000ed08 	.word	0xe000ed08

08002f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <xPortStartScheduler+0x124>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	@ (8003078 <xPortStartScheduler+0x128>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10b      	bne.n	8002f78 <xPortStartScheduler+0x28>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	613b      	str	r3, [r7, #16]
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f78:	4b3e      	ldr	r3, [pc, #248]	@ (8003074 <xPortStartScheduler+0x124>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800307c <xPortStartScheduler+0x12c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10b      	bne.n	8002f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	60fb      	str	r3, [r7, #12]
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	e7fd      	b.n	8002f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f9a:	4b39      	ldr	r3, [pc, #228]	@ (8003080 <xPortStartScheduler+0x130>)
 8002f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	22ff      	movs	r2, #255	@ 0xff
 8002faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <xPortStartScheduler+0x134>)
 8002fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fc2:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <xPortStartScheduler+0x138>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fc8:	e009      	b.n	8002fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002fca:	4b2f      	ldr	r3, [pc, #188]	@ (8003088 <xPortStartScheduler+0x138>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <xPortStartScheduler+0x138>)
 8002fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d0ef      	beq.n	8002fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fea:	4b27      	ldr	r3, [pc, #156]	@ (8003088 <xPortStartScheduler+0x138>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d00b      	beq.n	800300e <xPortStartScheduler+0xbe>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60bb      	str	r3, [r7, #8]
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800300e:	4b1e      	ldr	r3, [pc, #120]	@ (8003088 <xPortStartScheduler+0x138>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	4a1c      	ldr	r2, [pc, #112]	@ (8003088 <xPortStartScheduler+0x138>)
 8003016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <xPortStartScheduler+0x138>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003020:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <xPortStartScheduler+0x138>)
 8003022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800302c:	4b17      	ldr	r3, [pc, #92]	@ (800308c <xPortStartScheduler+0x13c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <xPortStartScheduler+0x13c>)
 8003032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <xPortStartScheduler+0x13c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	@ (800308c <xPortStartScheduler+0x13c>)
 800303e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003044:	f000 f8da 	bl	80031fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <xPortStartScheduler+0x140>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800304e:	f000 f8f9 	bl	8003244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <xPortStartScheduler+0x144>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a0f      	ldr	r2, [pc, #60]	@ (8003094 <xPortStartScheduler+0x144>)
 8003058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800305c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800305e:	f7ff ff63 	bl	8002f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003062:	f7ff fd4f 	bl	8002b04 <vTaskSwitchContext>
	prvTaskExitError();
 8003066:	f7ff ff19 	bl	8002e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	410fc271 	.word	0x410fc271
 800307c:	410fc270 	.word	0x410fc270
 8003080:	e000e400 	.word	0xe000e400
 8003084:	20000464 	.word	0x20000464
 8003088:	20000468 	.word	0x20000468
 800308c:	e000ed20 	.word	0xe000ed20
 8003090:	2000000c 	.word	0x2000000c
 8003094:	e000ef34 	.word	0xe000ef34

08003098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	607b      	str	r3, [r7, #4]
}
 80030b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <vPortEnterCritical+0x5c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a0e      	ldr	r2, [pc, #56]	@ (80030f4 <vPortEnterCritical+0x5c>)
 80030ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030bc:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <vPortEnterCritical+0x5c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d110      	bne.n	80030e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <vPortEnterCritical+0x60>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	603b      	str	r3, [r7, #0]
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	e7fd      	b.n	80030e2 <vPortEnterCritical+0x4a>
	}
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000000c 	.word	0x2000000c
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003102:	4b12      	ldr	r3, [pc, #72]	@ (800314c <vPortExitCritical+0x50>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <vPortExitCritical+0x26>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	607b      	str	r3, [r7, #4]
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003122:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <vPortExitCritical+0x50>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3b01      	subs	r3, #1
 8003128:	4a08      	ldr	r2, [pc, #32]	@ (800314c <vPortExitCritical+0x50>)
 800312a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800312c:	4b07      	ldr	r3, [pc, #28]	@ (800314c <vPortExitCritical+0x50>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <vPortExitCritical+0x44>
 8003134:	2300      	movs	r3, #0
 8003136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f383 8811 	msr	BASEPRI, r3
}
 800313e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	2000000c 	.word	0x2000000c

08003150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003150:	f3ef 8009 	mrs	r0, PSP
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <pxCurrentTCBConst>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	f01e 0f10 	tst.w	lr, #16
 8003160:	bf08      	it	eq
 8003162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316a:	6010      	str	r0, [r2, #0]
 800316c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003174:	f380 8811 	msr	BASEPRI, r0
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f7ff fcc0 	bl	8002b04 <vTaskSwitchContext>
 8003184:	f04f 0000 	mov.w	r0, #0
 8003188:	f380 8811 	msr	BASEPRI, r0
 800318c:	bc09      	pop	{r0, r3}
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	6808      	ldr	r0, [r1, #0]
 8003192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003196:	f01e 0f10 	tst.w	lr, #16
 800319a:	bf08      	it	eq
 800319c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031a0:	f380 8809 	msr	PSP, r0
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w

080031b0 <pxCurrentTCBConst>:
 80031b0:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop

080031b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	607b      	str	r3, [r7, #4]
}
 80031d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031d2:	f7ff fbdd 	bl	8002990 <xTaskIncrementTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <SysTick_Handler+0x40>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	2300      	movs	r3, #0
 80031e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f383 8811 	msr	BASEPRI, r3
}
 80031ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <vPortSetupTimerInterrupt+0x34>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <vPortSetupTimerInterrupt+0x38>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800320c:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <vPortSetupTimerInterrupt+0x3c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <vPortSetupTimerInterrupt+0x40>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	4a09      	ldr	r2, [pc, #36]	@ (8003240 <vPortSetupTimerInterrupt+0x44>)
 800321a:	3b01      	subs	r3, #1
 800321c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <vPortSetupTimerInterrupt+0x34>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010
 8003234:	e000e018 	.word	0xe000e018
 8003238:	20000000 	.word	0x20000000
 800323c:	10624dd3 	.word	0x10624dd3
 8003240:	e000e014 	.word	0xe000e014

08003244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003254 <vPortEnableVFP+0x10>
 8003248:	6801      	ldr	r1, [r0, #0]
 800324a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800324e:	6001      	str	r1, [r0, #0]
 8003250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003252:	bf00      	nop
 8003254:	e000ed88 	.word	0xe000ed88

08003258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800325e:	f3ef 8305 	mrs	r3, IPSR
 8003262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d915      	bls.n	8003296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800326a:	4a18      	ldr	r2, [pc, #96]	@ (80032cc <vPortValidateInterruptPriority+0x74>)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003274:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <vPortValidateInterruptPriority+0x78>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	7afa      	ldrb	r2, [r7, #11]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20b      	bcs.n	8003296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	607b      	str	r3, [r7, #4]
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <vPortValidateInterruptPriority+0x7c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800329e:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <vPortValidateInterruptPriority+0x80>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d90b      	bls.n	80032be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	603b      	str	r3, [r7, #0]
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	e7fd      	b.n	80032ba <vPortValidateInterruptPriority+0x62>
	}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e3f0 	.word	0xe000e3f0
 80032d0:	20000464 	.word	0x20000464
 80032d4:	e000ed0c 	.word	0xe000ed0c
 80032d8:	20000468 	.word	0x20000468

080032dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	@ 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032e8:	f7ff faa6 	bl	8002838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003460 <pvPortMalloc+0x184>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032f4:	f000 f924 	bl	8003540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <pvPortMalloc+0x188>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 8095 	bne.w	8003430 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01e      	beq.n	800334a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800330c:	2208      	movs	r2, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f023 0307 	bic.w	r3, r3, #7
 8003324:	3308      	adds	r3, #8
 8003326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <pvPortMalloc+0x6e>
	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	617b      	str	r3, [r7, #20]
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d06f      	beq.n	8003430 <pvPortMalloc+0x154>
 8003350:	4b45      	ldr	r3, [pc, #276]	@ (8003468 <pvPortMalloc+0x18c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	d86a      	bhi.n	8003430 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800335a:	4b44      	ldr	r3, [pc, #272]	@ (800346c <pvPortMalloc+0x190>)
 800335c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800335e:	4b43      	ldr	r3, [pc, #268]	@ (800346c <pvPortMalloc+0x190>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003364:	e004      	b.n	8003370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d903      	bls.n	8003382 <pvPortMalloc+0xa6>
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f1      	bne.n	8003366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003382:	4b37      	ldr	r3, [pc, #220]	@ (8003460 <pvPortMalloc+0x184>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003388:	429a      	cmp	r2, r3
 800338a:	d051      	beq.n	8003430 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2208      	movs	r2, #8
 8003392:	4413      	add	r3, r2
 8003394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad2      	subs	r2, r2, r3
 80033a6:	2308      	movs	r3, #8
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d920      	bls.n	80033f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <pvPortMalloc+0xfc>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	613b      	str	r3, [r7, #16]
}
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1ad2      	subs	r2, r2, r3
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033ea:	69b8      	ldr	r0, [r7, #24]
 80033ec:	f000 f90a 	bl	8003604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <pvPortMalloc+0x18c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003468 <pvPortMalloc+0x18c>)
 80033fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <pvPortMalloc+0x18c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <pvPortMalloc+0x194>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d203      	bcs.n	8003412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800340a:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <pvPortMalloc+0x18c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <pvPortMalloc+0x194>)
 8003410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <pvPortMalloc+0x188>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	431a      	orrs	r2, r3
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003426:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <pvPortMalloc+0x198>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	4a11      	ldr	r2, [pc, #68]	@ (8003474 <pvPortMalloc+0x198>)
 800342e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003430:	f7ff fa10 	bl	8002854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <pvPortMalloc+0x17a>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60fb      	str	r3, [r7, #12]
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	e7fd      	b.n	8003452 <pvPortMalloc+0x176>
	return pvReturn;
 8003456:	69fb      	ldr	r3, [r7, #28]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3728      	adds	r7, #40	@ 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20004074 	.word	0x20004074
 8003464:	20004088 	.word	0x20004088
 8003468:	20004078 	.word	0x20004078
 800346c:	2000406c 	.word	0x2000406c
 8003470:	2000407c 	.word	0x2000407c
 8003474:	20004080 	.word	0x20004080

08003478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04f      	beq.n	800352a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800348a:	2308      	movs	r3, #8
 800348c:	425b      	negs	r3, r3
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4413      	add	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <vPortFree+0xbc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <vPortFree+0x46>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	e7fd      	b.n	80034ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <vPortFree+0x66>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	60bb      	str	r3, [r7, #8]
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	e7fd      	b.n	80034da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <vPortFree+0xbc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01e      	beq.n	800352a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d11a      	bne.n	800352a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <vPortFree+0xbc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003504:	f7ff f998 	bl	8002838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <vPortFree+0xc0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4413      	add	r3, r2
 8003512:	4a09      	ldr	r2, [pc, #36]	@ (8003538 <vPortFree+0xc0>)
 8003514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003516:	6938      	ldr	r0, [r7, #16]
 8003518:	f000 f874 	bl	8003604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800351c:	4b07      	ldr	r3, [pc, #28]	@ (800353c <vPortFree+0xc4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4a06      	ldr	r2, [pc, #24]	@ (800353c <vPortFree+0xc4>)
 8003524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003526:	f7ff f995 	bl	8002854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20004088 	.word	0x20004088
 8003538:	20004078 	.word	0x20004078
 800353c:	20004084 	.word	0x20004084

08003540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003546:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800354a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800354c:	4b27      	ldr	r3, [pc, #156]	@ (80035ec <prvHeapInit+0xac>)
 800354e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3307      	adds	r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0307 	bic.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <prvHeapInit+0xac>)
 8003570:	4413      	add	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003578:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <prvHeapInit+0xb0>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800357e:	4b1c      	ldr	r3, [pc, #112]	@ (80035f0 <prvHeapInit+0xb0>)
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800358c:	2208      	movs	r2, #8
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0307 	bic.w	r3, r3, #7
 800359a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <prvHeapInit+0xb4>)
 80035a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035a2:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <prvHeapInit+0xb4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <prvHeapInit+0xb4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <prvHeapInit+0xb4>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <prvHeapInit+0xb8>)
 80035ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a09      	ldr	r2, [pc, #36]	@ (80035fc <prvHeapInit+0xbc>)
 80035d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035d8:	4b09      	ldr	r3, [pc, #36]	@ (8003600 <prvHeapInit+0xc0>)
 80035da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	2000046c 	.word	0x2000046c
 80035f0:	2000406c 	.word	0x2000406c
 80035f4:	20004074 	.word	0x20004074
 80035f8:	2000407c 	.word	0x2000407c
 80035fc:	20004078 	.word	0x20004078
 8003600:	20004088 	.word	0x20004088

08003604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800360c:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <prvInsertBlockIntoFreeList+0xac>)
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e002      	b.n	8003618 <prvInsertBlockIntoFreeList+0x14>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d8f7      	bhi.n	8003612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d108      	bne.n	8003646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d118      	bne.n	800368c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d00d      	beq.n	8003682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e008      	b.n	8003694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e003      	b.n	8003694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d002      	beq.n	80036a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000406c 	.word	0x2000406c
 80036b4:	20004074 	.word	0x20004074

080036b8 <std>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b510      	push	{r4, lr}
 80036bc:	4604      	mov	r4, r0
 80036be:	e9c0 3300 	strd	r3, r3, [r0]
 80036c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036c6:	6083      	str	r3, [r0, #8]
 80036c8:	8181      	strh	r1, [r0, #12]
 80036ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80036cc:	81c2      	strh	r2, [r0, #14]
 80036ce:	6183      	str	r3, [r0, #24]
 80036d0:	4619      	mov	r1, r3
 80036d2:	2208      	movs	r2, #8
 80036d4:	305c      	adds	r0, #92	@ 0x5c
 80036d6:	f000 f9f9 	bl	8003acc <memset>
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <std+0x58>)
 80036dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80036de:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <std+0x5c>)
 80036e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <std+0x60>)
 80036e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <std+0x64>)
 80036e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <std+0x68>)
 80036ec:	6224      	str	r4, [r4, #32]
 80036ee:	429c      	cmp	r4, r3
 80036f0:	d006      	beq.n	8003700 <std+0x48>
 80036f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036f6:	4294      	cmp	r4, r2
 80036f8:	d002      	beq.n	8003700 <std+0x48>
 80036fa:	33d0      	adds	r3, #208	@ 0xd0
 80036fc:	429c      	cmp	r4, r3
 80036fe:	d105      	bne.n	800370c <std+0x54>
 8003700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003708:	f000 ba58 	b.w	8003bbc <__retarget_lock_init_recursive>
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	0800391d 	.word	0x0800391d
 8003714:	0800393f 	.word	0x0800393f
 8003718:	08003977 	.word	0x08003977
 800371c:	0800399b 	.word	0x0800399b
 8003720:	2000408c 	.word	0x2000408c

08003724 <stdio_exit_handler>:
 8003724:	4a02      	ldr	r2, [pc, #8]	@ (8003730 <stdio_exit_handler+0xc>)
 8003726:	4903      	ldr	r1, [pc, #12]	@ (8003734 <stdio_exit_handler+0x10>)
 8003728:	4803      	ldr	r0, [pc, #12]	@ (8003738 <stdio_exit_handler+0x14>)
 800372a:	f000 b869 	b.w	8003800 <_fwalk_sglue>
 800372e:	bf00      	nop
 8003730:	20000010 	.word	0x20000010
 8003734:	0800445d 	.word	0x0800445d
 8003738:	20000020 	.word	0x20000020

0800373c <cleanup_stdio>:
 800373c:	6841      	ldr	r1, [r0, #4]
 800373e:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <cleanup_stdio+0x34>)
 8003740:	4299      	cmp	r1, r3
 8003742:	b510      	push	{r4, lr}
 8003744:	4604      	mov	r4, r0
 8003746:	d001      	beq.n	800374c <cleanup_stdio+0x10>
 8003748:	f000 fe88 	bl	800445c <_fflush_r>
 800374c:	68a1      	ldr	r1, [r4, #8]
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <cleanup_stdio+0x38>)
 8003750:	4299      	cmp	r1, r3
 8003752:	d002      	beq.n	800375a <cleanup_stdio+0x1e>
 8003754:	4620      	mov	r0, r4
 8003756:	f000 fe81 	bl	800445c <_fflush_r>
 800375a:	68e1      	ldr	r1, [r4, #12]
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <cleanup_stdio+0x3c>)
 800375e:	4299      	cmp	r1, r3
 8003760:	d004      	beq.n	800376c <cleanup_stdio+0x30>
 8003762:	4620      	mov	r0, r4
 8003764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003768:	f000 be78 	b.w	800445c <_fflush_r>
 800376c:	bd10      	pop	{r4, pc}
 800376e:	bf00      	nop
 8003770:	2000408c 	.word	0x2000408c
 8003774:	200040f4 	.word	0x200040f4
 8003778:	2000415c 	.word	0x2000415c

0800377c <global_stdio_init.part.0>:
 800377c:	b510      	push	{r4, lr}
 800377e:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <global_stdio_init.part.0+0x30>)
 8003780:	4c0b      	ldr	r4, [pc, #44]	@ (80037b0 <global_stdio_init.part.0+0x34>)
 8003782:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <global_stdio_init.part.0+0x38>)
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	4620      	mov	r0, r4
 8003788:	2200      	movs	r2, #0
 800378a:	2104      	movs	r1, #4
 800378c:	f7ff ff94 	bl	80036b8 <std>
 8003790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003794:	2201      	movs	r2, #1
 8003796:	2109      	movs	r1, #9
 8003798:	f7ff ff8e 	bl	80036b8 <std>
 800379c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037a0:	2202      	movs	r2, #2
 80037a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a6:	2112      	movs	r1, #18
 80037a8:	f7ff bf86 	b.w	80036b8 <std>
 80037ac:	200041c4 	.word	0x200041c4
 80037b0:	2000408c 	.word	0x2000408c
 80037b4:	08003725 	.word	0x08003725

080037b8 <__sfp_lock_acquire>:
 80037b8:	4801      	ldr	r0, [pc, #4]	@ (80037c0 <__sfp_lock_acquire+0x8>)
 80037ba:	f000 ba00 	b.w	8003bbe <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	200041cd 	.word	0x200041cd

080037c4 <__sfp_lock_release>:
 80037c4:	4801      	ldr	r0, [pc, #4]	@ (80037cc <__sfp_lock_release+0x8>)
 80037c6:	f000 b9fb 	b.w	8003bc0 <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	200041cd 	.word	0x200041cd

080037d0 <__sinit>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4604      	mov	r4, r0
 80037d4:	f7ff fff0 	bl	80037b8 <__sfp_lock_acquire>
 80037d8:	6a23      	ldr	r3, [r4, #32]
 80037da:	b11b      	cbz	r3, 80037e4 <__sinit+0x14>
 80037dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e0:	f7ff bff0 	b.w	80037c4 <__sfp_lock_release>
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <__sinit+0x28>)
 80037e6:	6223      	str	r3, [r4, #32]
 80037e8:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <__sinit+0x2c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f5      	bne.n	80037dc <__sinit+0xc>
 80037f0:	f7ff ffc4 	bl	800377c <global_stdio_init.part.0>
 80037f4:	e7f2      	b.n	80037dc <__sinit+0xc>
 80037f6:	bf00      	nop
 80037f8:	0800373d 	.word	0x0800373d
 80037fc:	200041c4 	.word	0x200041c4

08003800 <_fwalk_sglue>:
 8003800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003804:	4607      	mov	r7, r0
 8003806:	4688      	mov	r8, r1
 8003808:	4614      	mov	r4, r2
 800380a:	2600      	movs	r6, #0
 800380c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003810:	f1b9 0901 	subs.w	r9, r9, #1
 8003814:	d505      	bpl.n	8003822 <_fwalk_sglue+0x22>
 8003816:	6824      	ldr	r4, [r4, #0]
 8003818:	2c00      	cmp	r4, #0
 800381a:	d1f7      	bne.n	800380c <_fwalk_sglue+0xc>
 800381c:	4630      	mov	r0, r6
 800381e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d907      	bls.n	8003838 <_fwalk_sglue+0x38>
 8003828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800382c:	3301      	adds	r3, #1
 800382e:	d003      	beq.n	8003838 <_fwalk_sglue+0x38>
 8003830:	4629      	mov	r1, r5
 8003832:	4638      	mov	r0, r7
 8003834:	47c0      	blx	r8
 8003836:	4306      	orrs	r6, r0
 8003838:	3568      	adds	r5, #104	@ 0x68
 800383a:	e7e9      	b.n	8003810 <_fwalk_sglue+0x10>

0800383c <iprintf>:
 800383c:	b40f      	push	{r0, r1, r2, r3}
 800383e:	b507      	push	{r0, r1, r2, lr}
 8003840:	4906      	ldr	r1, [pc, #24]	@ (800385c <iprintf+0x20>)
 8003842:	ab04      	add	r3, sp, #16
 8003844:	6808      	ldr	r0, [r1, #0]
 8003846:	f853 2b04 	ldr.w	r2, [r3], #4
 800384a:	6881      	ldr	r1, [r0, #8]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	f000 fadb 	bl	8003e08 <_vfiprintf_r>
 8003852:	b003      	add	sp, #12
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b004      	add	sp, #16
 800385a:	4770      	bx	lr
 800385c:	2000001c 	.word	0x2000001c

08003860 <_puts_r>:
 8003860:	6a03      	ldr	r3, [r0, #32]
 8003862:	b570      	push	{r4, r5, r6, lr}
 8003864:	6884      	ldr	r4, [r0, #8]
 8003866:	4605      	mov	r5, r0
 8003868:	460e      	mov	r6, r1
 800386a:	b90b      	cbnz	r3, 8003870 <_puts_r+0x10>
 800386c:	f7ff ffb0 	bl	80037d0 <__sinit>
 8003870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003872:	07db      	lsls	r3, r3, #31
 8003874:	d405      	bmi.n	8003882 <_puts_r+0x22>
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	0598      	lsls	r0, r3, #22
 800387a:	d402      	bmi.n	8003882 <_puts_r+0x22>
 800387c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800387e:	f000 f99e 	bl	8003bbe <__retarget_lock_acquire_recursive>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	0719      	lsls	r1, r3, #28
 8003886:	d502      	bpl.n	800388e <_puts_r+0x2e>
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d135      	bne.n	80038fa <_puts_r+0x9a>
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f8c5 	bl	8003a20 <__swsetup_r>
 8003896:	b380      	cbz	r0, 80038fa <_puts_r+0x9a>
 8003898:	f04f 35ff 	mov.w	r5, #4294967295
 800389c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800389e:	07da      	lsls	r2, r3, #31
 80038a0:	d405      	bmi.n	80038ae <_puts_r+0x4e>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	059b      	lsls	r3, r3, #22
 80038a6:	d402      	bmi.n	80038ae <_puts_r+0x4e>
 80038a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038aa:	f000 f989 	bl	8003bc0 <__retarget_lock_release_recursive>
 80038ae:	4628      	mov	r0, r5
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	da04      	bge.n	80038c0 <_puts_r+0x60>
 80038b6:	69a2      	ldr	r2, [r4, #24]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dc17      	bgt.n	80038ec <_puts_r+0x8c>
 80038bc:	290a      	cmp	r1, #10
 80038be:	d015      	beq.n	80038ec <_puts_r+0x8c>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	6022      	str	r2, [r4, #0]
 80038c6:	7019      	strb	r1, [r3, #0]
 80038c8:	68a3      	ldr	r3, [r4, #8]
 80038ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038ce:	3b01      	subs	r3, #1
 80038d0:	60a3      	str	r3, [r4, #8]
 80038d2:	2900      	cmp	r1, #0
 80038d4:	d1ed      	bne.n	80038b2 <_puts_r+0x52>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da11      	bge.n	80038fe <_puts_r+0x9e>
 80038da:	4622      	mov	r2, r4
 80038dc:	210a      	movs	r1, #10
 80038de:	4628      	mov	r0, r5
 80038e0:	f000 f85f 	bl	80039a2 <__swbuf_r>
 80038e4:	3001      	adds	r0, #1
 80038e6:	d0d7      	beq.n	8003898 <_puts_r+0x38>
 80038e8:	250a      	movs	r5, #10
 80038ea:	e7d7      	b.n	800389c <_puts_r+0x3c>
 80038ec:	4622      	mov	r2, r4
 80038ee:	4628      	mov	r0, r5
 80038f0:	f000 f857 	bl	80039a2 <__swbuf_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	d1e7      	bne.n	80038c8 <_puts_r+0x68>
 80038f8:	e7ce      	b.n	8003898 <_puts_r+0x38>
 80038fa:	3e01      	subs	r6, #1
 80038fc:	e7e4      	b.n	80038c8 <_puts_r+0x68>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	220a      	movs	r2, #10
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e7ee      	b.n	80038e8 <_puts_r+0x88>
	...

0800390c <puts>:
 800390c:	4b02      	ldr	r3, [pc, #8]	@ (8003918 <puts+0xc>)
 800390e:	4601      	mov	r1, r0
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	f7ff bfa5 	b.w	8003860 <_puts_r>
 8003916:	bf00      	nop
 8003918:	2000001c 	.word	0x2000001c

0800391c <__sread>:
 800391c:	b510      	push	{r4, lr}
 800391e:	460c      	mov	r4, r1
 8003920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003924:	f000 f8fc 	bl	8003b20 <_read_r>
 8003928:	2800      	cmp	r0, #0
 800392a:	bfab      	itete	ge
 800392c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800392e:	89a3      	ldrhlt	r3, [r4, #12]
 8003930:	181b      	addge	r3, r3, r0
 8003932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003936:	bfac      	ite	ge
 8003938:	6563      	strge	r3, [r4, #84]	@ 0x54
 800393a:	81a3      	strhlt	r3, [r4, #12]
 800393c:	bd10      	pop	{r4, pc}

0800393e <__swrite>:
 800393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	461f      	mov	r7, r3
 8003944:	898b      	ldrh	r3, [r1, #12]
 8003946:	05db      	lsls	r3, r3, #23
 8003948:	4605      	mov	r5, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4616      	mov	r6, r2
 800394e:	d505      	bpl.n	800395c <__swrite+0x1e>
 8003950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003954:	2302      	movs	r3, #2
 8003956:	2200      	movs	r2, #0
 8003958:	f000 f8d0 	bl	8003afc <_lseek_r>
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003966:	81a3      	strh	r3, [r4, #12]
 8003968:	4632      	mov	r2, r6
 800396a:	463b      	mov	r3, r7
 800396c:	4628      	mov	r0, r5
 800396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003972:	f000 b8e7 	b.w	8003b44 <_write_r>

08003976 <__sseek>:
 8003976:	b510      	push	{r4, lr}
 8003978:	460c      	mov	r4, r1
 800397a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397e:	f000 f8bd 	bl	8003afc <_lseek_r>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	bf15      	itete	ne
 8003988:	6560      	strne	r0, [r4, #84]	@ 0x54
 800398a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800398e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003992:	81a3      	strheq	r3, [r4, #12]
 8003994:	bf18      	it	ne
 8003996:	81a3      	strhne	r3, [r4, #12]
 8003998:	bd10      	pop	{r4, pc}

0800399a <__sclose>:
 800399a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800399e:	f000 b89d 	b.w	8003adc <_close_r>

080039a2 <__swbuf_r>:
 80039a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a4:	460e      	mov	r6, r1
 80039a6:	4614      	mov	r4, r2
 80039a8:	4605      	mov	r5, r0
 80039aa:	b118      	cbz	r0, 80039b4 <__swbuf_r+0x12>
 80039ac:	6a03      	ldr	r3, [r0, #32]
 80039ae:	b90b      	cbnz	r3, 80039b4 <__swbuf_r+0x12>
 80039b0:	f7ff ff0e 	bl	80037d0 <__sinit>
 80039b4:	69a3      	ldr	r3, [r4, #24]
 80039b6:	60a3      	str	r3, [r4, #8]
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	071a      	lsls	r2, r3, #28
 80039bc:	d501      	bpl.n	80039c2 <__swbuf_r+0x20>
 80039be:	6923      	ldr	r3, [r4, #16]
 80039c0:	b943      	cbnz	r3, 80039d4 <__swbuf_r+0x32>
 80039c2:	4621      	mov	r1, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 f82b 	bl	8003a20 <__swsetup_r>
 80039ca:	b118      	cbz	r0, 80039d4 <__swbuf_r+0x32>
 80039cc:	f04f 37ff 	mov.w	r7, #4294967295
 80039d0:	4638      	mov	r0, r7
 80039d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	6922      	ldr	r2, [r4, #16]
 80039d8:	1a98      	subs	r0, r3, r2
 80039da:	6963      	ldr	r3, [r4, #20]
 80039dc:	b2f6      	uxtb	r6, r6
 80039de:	4283      	cmp	r3, r0
 80039e0:	4637      	mov	r7, r6
 80039e2:	dc05      	bgt.n	80039f0 <__swbuf_r+0x4e>
 80039e4:	4621      	mov	r1, r4
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 fd38 	bl	800445c <_fflush_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d1ed      	bne.n	80039cc <__swbuf_r+0x2a>
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60a3      	str	r3, [r4, #8]
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	6022      	str	r2, [r4, #0]
 80039fc:	701e      	strb	r6, [r3, #0]
 80039fe:	6962      	ldr	r2, [r4, #20]
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d004      	beq.n	8003a10 <__swbuf_r+0x6e>
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	07db      	lsls	r3, r3, #31
 8003a0a:	d5e1      	bpl.n	80039d0 <__swbuf_r+0x2e>
 8003a0c:	2e0a      	cmp	r6, #10
 8003a0e:	d1df      	bne.n	80039d0 <__swbuf_r+0x2e>
 8003a10:	4621      	mov	r1, r4
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 fd22 	bl	800445c <_fflush_r>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d0d9      	beq.n	80039d0 <__swbuf_r+0x2e>
 8003a1c:	e7d6      	b.n	80039cc <__swbuf_r+0x2a>
	...

08003a20 <__swsetup_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4b29      	ldr	r3, [pc, #164]	@ (8003ac8 <__swsetup_r+0xa8>)
 8003a24:	4605      	mov	r5, r0
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	460c      	mov	r4, r1
 8003a2a:	b118      	cbz	r0, 8003a34 <__swsetup_r+0x14>
 8003a2c:	6a03      	ldr	r3, [r0, #32]
 8003a2e:	b90b      	cbnz	r3, 8003a34 <__swsetup_r+0x14>
 8003a30:	f7ff fece 	bl	80037d0 <__sinit>
 8003a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a38:	0719      	lsls	r1, r3, #28
 8003a3a:	d422      	bmi.n	8003a82 <__swsetup_r+0x62>
 8003a3c:	06da      	lsls	r2, r3, #27
 8003a3e:	d407      	bmi.n	8003a50 <__swsetup_r+0x30>
 8003a40:	2209      	movs	r2, #9
 8003a42:	602a      	str	r2, [r5, #0]
 8003a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4e:	e033      	b.n	8003ab8 <__swsetup_r+0x98>
 8003a50:	0758      	lsls	r0, r3, #29
 8003a52:	d512      	bpl.n	8003a7a <__swsetup_r+0x5a>
 8003a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a56:	b141      	cbz	r1, 8003a6a <__swsetup_r+0x4a>
 8003a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	d002      	beq.n	8003a66 <__swsetup_r+0x46>
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 f8af 	bl	8003bc4 <_free_r>
 8003a66:	2300      	movs	r3, #0
 8003a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	2300      	movs	r3, #0
 8003a74:	6063      	str	r3, [r4, #4]
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f043 0308 	orr.w	r3, r3, #8
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	b94b      	cbnz	r3, 8003a9a <__swsetup_r+0x7a>
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d003      	beq.n	8003a9a <__swsetup_r+0x7a>
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fd2f 	bl	80044f8 <__smakebuf_r>
 8003a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9e:	f013 0201 	ands.w	r2, r3, #1
 8003aa2:	d00a      	beq.n	8003aba <__swsetup_r+0x9a>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60a2      	str	r2, [r4, #8]
 8003aa8:	6962      	ldr	r2, [r4, #20]
 8003aaa:	4252      	negs	r2, r2
 8003aac:	61a2      	str	r2, [r4, #24]
 8003aae:	6922      	ldr	r2, [r4, #16]
 8003ab0:	b942      	cbnz	r2, 8003ac4 <__swsetup_r+0xa4>
 8003ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ab6:	d1c5      	bne.n	8003a44 <__swsetup_r+0x24>
 8003ab8:	bd38      	pop	{r3, r4, r5, pc}
 8003aba:	0799      	lsls	r1, r3, #30
 8003abc:	bf58      	it	pl
 8003abe:	6962      	ldrpl	r2, [r4, #20]
 8003ac0:	60a2      	str	r2, [r4, #8]
 8003ac2:	e7f4      	b.n	8003aae <__swsetup_r+0x8e>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e7f7      	b.n	8003ab8 <__swsetup_r+0x98>
 8003ac8:	2000001c 	.word	0x2000001c

08003acc <memset>:
 8003acc:	4402      	add	r2, r0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <memset+0xa>
 8003ad4:	4770      	bx	lr
 8003ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ada:	e7f9      	b.n	8003ad0 <memset+0x4>

08003adc <_close_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d06      	ldr	r5, [pc, #24]	@ (8003af8 <_close_r+0x1c>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fc ffad 	bl	8000a46 <_close>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_close_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_close_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	200041c8 	.word	0x200041c8

08003afc <_lseek_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4d07      	ldr	r5, [pc, #28]	@ (8003b1c <_lseek_r+0x20>)
 8003b00:	4604      	mov	r4, r0
 8003b02:	4608      	mov	r0, r1
 8003b04:	4611      	mov	r1, r2
 8003b06:	2200      	movs	r2, #0
 8003b08:	602a      	str	r2, [r5, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7fc ffc2 	bl	8000a94 <_lseek>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_lseek_r+0x1e>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_lseek_r+0x1e>
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	200041c8 	.word	0x200041c8

08003b20 <_read_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4d07      	ldr	r5, [pc, #28]	@ (8003b40 <_read_r+0x20>)
 8003b24:	4604      	mov	r4, r0
 8003b26:	4608      	mov	r0, r1
 8003b28:	4611      	mov	r1, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	602a      	str	r2, [r5, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f7fc ff6c 	bl	8000a0c <_read>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_read_r+0x1e>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_read_r+0x1e>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	200041c8 	.word	0x200041c8

08003b44 <_write_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	@ (8003b64 <_write_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fc fd45 	bl	80005e2 <_write>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_write_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_write_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	200041c8 	.word	0x200041c8

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	@ (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	2000001c 	.word	0x2000001c

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4d0d      	ldr	r5, [pc, #52]	@ (8003bac <__libc_init_array+0x38>)
 8003b78:	4c0d      	ldr	r4, [pc, #52]	@ (8003bb0 <__libc_init_array+0x3c>)
 8003b7a:	1b64      	subs	r4, r4, r5
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	2600      	movs	r6, #0
 8003b80:	42a6      	cmp	r6, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	4d0b      	ldr	r5, [pc, #44]	@ (8003bb4 <__libc_init_array+0x40>)
 8003b86:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb8 <__libc_init_array+0x44>)
 8003b88:	f000 fd24 	bl	80045d4 <_init>
 8003b8c:	1b64      	subs	r4, r4, r5
 8003b8e:	10a4      	asrs	r4, r4, #2
 8003b90:	2600      	movs	r6, #0
 8003b92:	42a6      	cmp	r6, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9c:	4798      	blx	r3
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba6:	4798      	blx	r3
 8003ba8:	3601      	adds	r6, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	08004718 	.word	0x08004718
 8003bb0:	08004718 	.word	0x08004718
 8003bb4:	08004718 	.word	0x08004718
 8003bb8:	0800471c 	.word	0x0800471c

08003bbc <__retarget_lock_init_recursive>:
 8003bbc:	4770      	bx	lr

08003bbe <__retarget_lock_acquire_recursive>:
 8003bbe:	4770      	bx	lr

08003bc0 <__retarget_lock_release_recursive>:
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_free_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d041      	beq.n	8003c50 <_free_r+0x8c>
 8003bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd0:	1f0c      	subs	r4, r1, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfb8      	it	lt
 8003bd6:	18e4      	addlt	r4, r4, r3
 8003bd8:	f000 f8e0 	bl	8003d9c <__malloc_lock>
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <_free_r+0x90>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	b933      	cbnz	r3, 8003bf0 <_free_r+0x2c>
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	6014      	str	r4, [r2, #0]
 8003be6:	4628      	mov	r0, r5
 8003be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bec:	f000 b8dc 	b.w	8003da8 <__malloc_unlock>
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d908      	bls.n	8003c06 <_free_r+0x42>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	1821      	adds	r1, r4, r0
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	bf01      	itttt	eq
 8003bfc:	6819      	ldreq	r1, [r3, #0]
 8003bfe:	685b      	ldreq	r3, [r3, #4]
 8003c00:	1809      	addeq	r1, r1, r0
 8003c02:	6021      	streq	r1, [r4, #0]
 8003c04:	e7ed      	b.n	8003be2 <_free_r+0x1e>
 8003c06:	461a      	mov	r2, r3
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b10b      	cbz	r3, 8003c10 <_free_r+0x4c>
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	d9fa      	bls.n	8003c06 <_free_r+0x42>
 8003c10:	6811      	ldr	r1, [r2, #0]
 8003c12:	1850      	adds	r0, r2, r1
 8003c14:	42a0      	cmp	r0, r4
 8003c16:	d10b      	bne.n	8003c30 <_free_r+0x6c>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	4401      	add	r1, r0
 8003c1c:	1850      	adds	r0, r2, r1
 8003c1e:	4283      	cmp	r3, r0
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	d1e0      	bne.n	8003be6 <_free_r+0x22>
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	6053      	str	r3, [r2, #4]
 8003c2a:	4408      	add	r0, r1
 8003c2c:	6010      	str	r0, [r2, #0]
 8003c2e:	e7da      	b.n	8003be6 <_free_r+0x22>
 8003c30:	d902      	bls.n	8003c38 <_free_r+0x74>
 8003c32:	230c      	movs	r3, #12
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	e7d6      	b.n	8003be6 <_free_r+0x22>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	1821      	adds	r1, r4, r0
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf04      	itt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	bf04      	itt	eq
 8003c48:	1809      	addeq	r1, r1, r0
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	6054      	str	r4, [r2, #4]
 8003c4e:	e7ca      	b.n	8003be6 <_free_r+0x22>
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	bf00      	nop
 8003c54:	200041d4 	.word	0x200041d4

08003c58 <sbrk_aligned>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c98 <sbrk_aligned+0x40>)
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	6831      	ldr	r1, [r6, #0]
 8003c60:	4605      	mov	r5, r0
 8003c62:	b911      	cbnz	r1, 8003c6a <sbrk_aligned+0x12>
 8003c64:	f000 fca6 	bl	80045b4 <_sbrk_r>
 8003c68:	6030      	str	r0, [r6, #0]
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f000 fca1 	bl	80045b4 <_sbrk_r>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	d103      	bne.n	8003c7e <sbrk_aligned+0x26>
 8003c76:	f04f 34ff 	mov.w	r4, #4294967295
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
 8003c7e:	1cc4      	adds	r4, r0, #3
 8003c80:	f024 0403 	bic.w	r4, r4, #3
 8003c84:	42a0      	cmp	r0, r4
 8003c86:	d0f8      	beq.n	8003c7a <sbrk_aligned+0x22>
 8003c88:	1a21      	subs	r1, r4, r0
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 fc92 	bl	80045b4 <_sbrk_r>
 8003c90:	3001      	adds	r0, #1
 8003c92:	d1f2      	bne.n	8003c7a <sbrk_aligned+0x22>
 8003c94:	e7ef      	b.n	8003c76 <sbrk_aligned+0x1e>
 8003c96:	bf00      	nop
 8003c98:	200041d0 	.word	0x200041d0

08003c9c <_malloc_r>:
 8003c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	1ccd      	adds	r5, r1, #3
 8003ca2:	f025 0503 	bic.w	r5, r5, #3
 8003ca6:	3508      	adds	r5, #8
 8003ca8:	2d0c      	cmp	r5, #12
 8003caa:	bf38      	it	cc
 8003cac:	250c      	movcc	r5, #12
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	db01      	blt.n	8003cb8 <_malloc_r+0x1c>
 8003cb4:	42a9      	cmp	r1, r5
 8003cb6:	d904      	bls.n	8003cc2 <_malloc_r+0x26>
 8003cb8:	230c      	movs	r3, #12
 8003cba:	6033      	str	r3, [r6, #0]
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d98 <_malloc_r+0xfc>
 8003cc6:	f000 f869 	bl	8003d9c <__malloc_lock>
 8003cca:	f8d8 3000 	ldr.w	r3, [r8]
 8003cce:	461c      	mov	r4, r3
 8003cd0:	bb44      	cbnz	r4, 8003d24 <_malloc_r+0x88>
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f7ff ffbf 	bl	8003c58 <sbrk_aligned>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	4604      	mov	r4, r0
 8003cde:	d158      	bne.n	8003d92 <_malloc_r+0xf6>
 8003ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ce4:	4627      	mov	r7, r4
 8003ce6:	2f00      	cmp	r7, #0
 8003ce8:	d143      	bne.n	8003d72 <_malloc_r+0xd6>
 8003cea:	2c00      	cmp	r4, #0
 8003cec:	d04b      	beq.n	8003d86 <_malloc_r+0xea>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	4639      	mov	r1, r7
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	eb04 0903 	add.w	r9, r4, r3
 8003cf8:	f000 fc5c 	bl	80045b4 <_sbrk_r>
 8003cfc:	4581      	cmp	r9, r0
 8003cfe:	d142      	bne.n	8003d86 <_malloc_r+0xea>
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	1a6d      	subs	r5, r5, r1
 8003d04:	4629      	mov	r1, r5
 8003d06:	4630      	mov	r0, r6
 8003d08:	f7ff ffa6 	bl	8003c58 <sbrk_aligned>
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d03a      	beq.n	8003d86 <_malloc_r+0xea>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	442b      	add	r3, r5
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	f8d8 3000 	ldr.w	r3, [r8]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	bb62      	cbnz	r2, 8003d78 <_malloc_r+0xdc>
 8003d1e:	f8c8 7000 	str.w	r7, [r8]
 8003d22:	e00f      	b.n	8003d44 <_malloc_r+0xa8>
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	1b52      	subs	r2, r2, r5
 8003d28:	d420      	bmi.n	8003d6c <_malloc_r+0xd0>
 8003d2a:	2a0b      	cmp	r2, #11
 8003d2c:	d917      	bls.n	8003d5e <_malloc_r+0xc2>
 8003d2e:	1961      	adds	r1, r4, r5
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	6025      	str	r5, [r4, #0]
 8003d34:	bf18      	it	ne
 8003d36:	6059      	strne	r1, [r3, #4]
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	bf08      	it	eq
 8003d3c:	f8c8 1000 	streq.w	r1, [r8]
 8003d40:	5162      	str	r2, [r4, r5]
 8003d42:	604b      	str	r3, [r1, #4]
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 f82f 	bl	8003da8 <__malloc_unlock>
 8003d4a:	f104 000b 	add.w	r0, r4, #11
 8003d4e:	1d23      	adds	r3, r4, #4
 8003d50:	f020 0007 	bic.w	r0, r0, #7
 8003d54:	1ac2      	subs	r2, r0, r3
 8003d56:	bf1c      	itt	ne
 8003d58:	1a1b      	subne	r3, r3, r0
 8003d5a:	50a3      	strne	r3, [r4, r2]
 8003d5c:	e7af      	b.n	8003cbe <_malloc_r+0x22>
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	42a3      	cmp	r3, r4
 8003d62:	bf0c      	ite	eq
 8003d64:	f8c8 2000 	streq.w	r2, [r8]
 8003d68:	605a      	strne	r2, [r3, #4]
 8003d6a:	e7eb      	b.n	8003d44 <_malloc_r+0xa8>
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	6864      	ldr	r4, [r4, #4]
 8003d70:	e7ae      	b.n	8003cd0 <_malloc_r+0x34>
 8003d72:	463c      	mov	r4, r7
 8003d74:	687f      	ldr	r7, [r7, #4]
 8003d76:	e7b6      	b.n	8003ce6 <_malloc_r+0x4a>
 8003d78:	461a      	mov	r2, r3
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	d1fb      	bne.n	8003d78 <_malloc_r+0xdc>
 8003d80:	2300      	movs	r3, #0
 8003d82:	6053      	str	r3, [r2, #4]
 8003d84:	e7de      	b.n	8003d44 <_malloc_r+0xa8>
 8003d86:	230c      	movs	r3, #12
 8003d88:	6033      	str	r3, [r6, #0]
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f000 f80c 	bl	8003da8 <__malloc_unlock>
 8003d90:	e794      	b.n	8003cbc <_malloc_r+0x20>
 8003d92:	6005      	str	r5, [r0, #0]
 8003d94:	e7d6      	b.n	8003d44 <_malloc_r+0xa8>
 8003d96:	bf00      	nop
 8003d98:	200041d4 	.word	0x200041d4

08003d9c <__malloc_lock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	@ (8003da4 <__malloc_lock+0x8>)
 8003d9e:	f7ff bf0e 	b.w	8003bbe <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	200041cc 	.word	0x200041cc

08003da8 <__malloc_unlock>:
 8003da8:	4801      	ldr	r0, [pc, #4]	@ (8003db0 <__malloc_unlock+0x8>)
 8003daa:	f7ff bf09 	b.w	8003bc0 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	200041cc 	.word	0x200041cc

08003db4 <__sfputc_r>:
 8003db4:	6893      	ldr	r3, [r2, #8]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	b410      	push	{r4}
 8003dbc:	6093      	str	r3, [r2, #8]
 8003dbe:	da08      	bge.n	8003dd2 <__sfputc_r+0x1e>
 8003dc0:	6994      	ldr	r4, [r2, #24]
 8003dc2:	42a3      	cmp	r3, r4
 8003dc4:	db01      	blt.n	8003dca <__sfputc_r+0x16>
 8003dc6:	290a      	cmp	r1, #10
 8003dc8:	d103      	bne.n	8003dd2 <__sfputc_r+0x1e>
 8003dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dce:	f7ff bde8 	b.w	80039a2 <__swbuf_r>
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	1c58      	adds	r0, r3, #1
 8003dd6:	6010      	str	r0, [r2, #0]
 8003dd8:	7019      	strb	r1, [r3, #0]
 8003dda:	4608      	mov	r0, r1
 8003ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <__sfputs_r>:
 8003de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de4:	4606      	mov	r6, r0
 8003de6:	460f      	mov	r7, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	18d5      	adds	r5, r2, r3
 8003dec:	42ac      	cmp	r4, r5
 8003dee:	d101      	bne.n	8003df4 <__sfputs_r+0x12>
 8003df0:	2000      	movs	r0, #0
 8003df2:	e007      	b.n	8003e04 <__sfputs_r+0x22>
 8003df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df8:	463a      	mov	r2, r7
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f7ff ffda 	bl	8003db4 <__sfputc_r>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d1f3      	bne.n	8003dec <__sfputs_r+0xa>
 8003e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e08 <_vfiprintf_r>:
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	b09d      	sub	sp, #116	@ 0x74
 8003e10:	4614      	mov	r4, r2
 8003e12:	4698      	mov	r8, r3
 8003e14:	4606      	mov	r6, r0
 8003e16:	b118      	cbz	r0, 8003e20 <_vfiprintf_r+0x18>
 8003e18:	6a03      	ldr	r3, [r0, #32]
 8003e1a:	b90b      	cbnz	r3, 8003e20 <_vfiprintf_r+0x18>
 8003e1c:	f7ff fcd8 	bl	80037d0 <__sinit>
 8003e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e22:	07d9      	lsls	r1, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_vfiprintf_r+0x2a>
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	059a      	lsls	r2, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_vfiprintf_r+0x2a>
 8003e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e2e:	f7ff fec6 	bl	8003bbe <__retarget_lock_acquire_recursive>
 8003e32:	89ab      	ldrh	r3, [r5, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	d501      	bpl.n	8003e3c <_vfiprintf_r+0x34>
 8003e38:	692b      	ldr	r3, [r5, #16]
 8003e3a:	b99b      	cbnz	r3, 8003e64 <_vfiprintf_r+0x5c>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff fdee 	bl	8003a20 <__swsetup_r>
 8003e44:	b170      	cbz	r0, 8003e64 <_vfiprintf_r+0x5c>
 8003e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e48:	07dc      	lsls	r4, r3, #31
 8003e4a:	d504      	bpl.n	8003e56 <_vfiprintf_r+0x4e>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b01d      	add	sp, #116	@ 0x74
 8003e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	89ab      	ldrh	r3, [r5, #12]
 8003e58:	0598      	lsls	r0, r3, #22
 8003e5a:	d4f7      	bmi.n	8003e4c <_vfiprintf_r+0x44>
 8003e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e5e:	f7ff feaf 	bl	8003bc0 <__retarget_lock_release_recursive>
 8003e62:	e7f3      	b.n	8003e4c <_vfiprintf_r+0x44>
 8003e64:	2300      	movs	r3, #0
 8003e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e68:	2320      	movs	r3, #32
 8003e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e72:	2330      	movs	r3, #48	@ 0x30
 8003e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004024 <_vfiprintf_r+0x21c>
 8003e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e7c:	f04f 0901 	mov.w	r9, #1
 8003e80:	4623      	mov	r3, r4
 8003e82:	469a      	mov	sl, r3
 8003e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e88:	b10a      	cbz	r2, 8003e8e <_vfiprintf_r+0x86>
 8003e8a:	2a25      	cmp	r2, #37	@ 0x25
 8003e8c:	d1f9      	bne.n	8003e82 <_vfiprintf_r+0x7a>
 8003e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003e92:	d00b      	beq.n	8003eac <_vfiprintf_r+0xa4>
 8003e94:	465b      	mov	r3, fp
 8003e96:	4622      	mov	r2, r4
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7ff ffa1 	bl	8003de2 <__sfputs_r>
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f000 80a7 	beq.w	8003ff4 <_vfiprintf_r+0x1ec>
 8003ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ea8:	445a      	add	r2, fp
 8003eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eac:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 809f 	beq.w	8003ff4 <_vfiprintf_r+0x1ec>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec0:	f10a 0a01 	add.w	sl, sl, #1
 8003ec4:	9304      	str	r3, [sp, #16]
 8003ec6:	9307      	str	r3, [sp, #28]
 8003ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ece:	4654      	mov	r4, sl
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed6:	4853      	ldr	r0, [pc, #332]	@ (8004024 <_vfiprintf_r+0x21c>)
 8003ed8:	f7fc f97a 	bl	80001d0 <memchr>
 8003edc:	9a04      	ldr	r2, [sp, #16]
 8003ede:	b9d8      	cbnz	r0, 8003f18 <_vfiprintf_r+0x110>
 8003ee0:	06d1      	lsls	r1, r2, #27
 8003ee2:	bf44      	itt	mi
 8003ee4:	2320      	movmi	r3, #32
 8003ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003eea:	0713      	lsls	r3, r2, #28
 8003eec:	bf44      	itt	mi
 8003eee:	232b      	movmi	r3, #43	@ 0x2b
 8003ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003efa:	d015      	beq.n	8003f28 <_vfiprintf_r+0x120>
 8003efc:	9a07      	ldr	r2, [sp, #28]
 8003efe:	4654      	mov	r4, sl
 8003f00:	2000      	movs	r0, #0
 8003f02:	f04f 0c0a 	mov.w	ip, #10
 8003f06:	4621      	mov	r1, r4
 8003f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0c:	3b30      	subs	r3, #48	@ 0x30
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	d94b      	bls.n	8003faa <_vfiprintf_r+0x1a2>
 8003f12:	b1b0      	cbz	r0, 8003f42 <_vfiprintf_r+0x13a>
 8003f14:	9207      	str	r2, [sp, #28]
 8003f16:	e014      	b.n	8003f42 <_vfiprintf_r+0x13a>
 8003f18:	eba0 0308 	sub.w	r3, r0, r8
 8003f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003f20:	4313      	orrs	r3, r2
 8003f22:	9304      	str	r3, [sp, #16]
 8003f24:	46a2      	mov	sl, r4
 8003f26:	e7d2      	b.n	8003ece <_vfiprintf_r+0xc6>
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	1d19      	adds	r1, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	9103      	str	r1, [sp, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bfbb      	ittet	lt
 8003f34:	425b      	neglt	r3, r3
 8003f36:	f042 0202 	orrlt.w	r2, r2, #2
 8003f3a:	9307      	strge	r3, [sp, #28]
 8003f3c:	9307      	strlt	r3, [sp, #28]
 8003f3e:	bfb8      	it	lt
 8003f40:	9204      	strlt	r2, [sp, #16]
 8003f42:	7823      	ldrb	r3, [r4, #0]
 8003f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f46:	d10a      	bne.n	8003f5e <_vfiprintf_r+0x156>
 8003f48:	7863      	ldrb	r3, [r4, #1]
 8003f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f4c:	d132      	bne.n	8003fb4 <_vfiprintf_r+0x1ac>
 8003f4e:	9b03      	ldr	r3, [sp, #12]
 8003f50:	1d1a      	adds	r2, r3, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	9203      	str	r2, [sp, #12]
 8003f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f5a:	3402      	adds	r4, #2
 8003f5c:	9305      	str	r3, [sp, #20]
 8003f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004034 <_vfiprintf_r+0x22c>
 8003f62:	7821      	ldrb	r1, [r4, #0]
 8003f64:	2203      	movs	r2, #3
 8003f66:	4650      	mov	r0, sl
 8003f68:	f7fc f932 	bl	80001d0 <memchr>
 8003f6c:	b138      	cbz	r0, 8003f7e <_vfiprintf_r+0x176>
 8003f6e:	9b04      	ldr	r3, [sp, #16]
 8003f70:	eba0 000a 	sub.w	r0, r0, sl
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	4082      	lsls	r2, r0
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	3401      	adds	r4, #1
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f82:	4829      	ldr	r0, [pc, #164]	@ (8004028 <_vfiprintf_r+0x220>)
 8003f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f88:	2206      	movs	r2, #6
 8003f8a:	f7fc f921 	bl	80001d0 <memchr>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d03f      	beq.n	8004012 <_vfiprintf_r+0x20a>
 8003f92:	4b26      	ldr	r3, [pc, #152]	@ (800402c <_vfiprintf_r+0x224>)
 8003f94:	bb1b      	cbnz	r3, 8003fde <_vfiprintf_r+0x1d6>
 8003f96:	9b03      	ldr	r3, [sp, #12]
 8003f98:	3307      	adds	r3, #7
 8003f9a:	f023 0307 	bic.w	r3, r3, #7
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa4:	443b      	add	r3, r7
 8003fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fa8:	e76a      	b.n	8003e80 <_vfiprintf_r+0x78>
 8003faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fae:	460c      	mov	r4, r1
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	e7a8      	b.n	8003f06 <_vfiprintf_r+0xfe>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	3401      	adds	r4, #1
 8003fb8:	9305      	str	r3, [sp, #20]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f04f 0c0a 	mov.w	ip, #10
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc6:	3a30      	subs	r2, #48	@ 0x30
 8003fc8:	2a09      	cmp	r2, #9
 8003fca:	d903      	bls.n	8003fd4 <_vfiprintf_r+0x1cc>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0c6      	beq.n	8003f5e <_vfiprintf_r+0x156>
 8003fd0:	9105      	str	r1, [sp, #20]
 8003fd2:	e7c4      	b.n	8003f5e <_vfiprintf_r+0x156>
 8003fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd8:	4604      	mov	r4, r0
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e7f0      	b.n	8003fc0 <_vfiprintf_r+0x1b8>
 8003fde:	ab03      	add	r3, sp, #12
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	462a      	mov	r2, r5
 8003fe4:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <_vfiprintf_r+0x228>)
 8003fe6:	a904      	add	r1, sp, #16
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f3af 8000 	nop.w
 8003fee:	4607      	mov	r7, r0
 8003ff0:	1c78      	adds	r0, r7, #1
 8003ff2:	d1d6      	bne.n	8003fa2 <_vfiprintf_r+0x19a>
 8003ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ff6:	07d9      	lsls	r1, r3, #31
 8003ff8:	d405      	bmi.n	8004006 <_vfiprintf_r+0x1fe>
 8003ffa:	89ab      	ldrh	r3, [r5, #12]
 8003ffc:	059a      	lsls	r2, r3, #22
 8003ffe:	d402      	bmi.n	8004006 <_vfiprintf_r+0x1fe>
 8004000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004002:	f7ff fddd 	bl	8003bc0 <__retarget_lock_release_recursive>
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	065b      	lsls	r3, r3, #25
 800400a:	f53f af1f 	bmi.w	8003e4c <_vfiprintf_r+0x44>
 800400e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004010:	e71e      	b.n	8003e50 <_vfiprintf_r+0x48>
 8004012:	ab03      	add	r3, sp, #12
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	462a      	mov	r2, r5
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <_vfiprintf_r+0x228>)
 800401a:	a904      	add	r1, sp, #16
 800401c:	4630      	mov	r0, r6
 800401e:	f000 f879 	bl	8004114 <_printf_i>
 8004022:	e7e4      	b.n	8003fee <_vfiprintf_r+0x1e6>
 8004024:	080046dc 	.word	0x080046dc
 8004028:	080046e6 	.word	0x080046e6
 800402c:	00000000 	.word	0x00000000
 8004030:	08003de3 	.word	0x08003de3
 8004034:	080046e2 	.word	0x080046e2

08004038 <_printf_common>:
 8004038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800403c:	4616      	mov	r6, r2
 800403e:	4698      	mov	r8, r3
 8004040:	688a      	ldr	r2, [r1, #8]
 8004042:	690b      	ldr	r3, [r1, #16]
 8004044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004048:	4293      	cmp	r3, r2
 800404a:	bfb8      	it	lt
 800404c:	4613      	movlt	r3, r2
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004054:	4607      	mov	r7, r0
 8004056:	460c      	mov	r4, r1
 8004058:	b10a      	cbz	r2, 800405e <_printf_common+0x26>
 800405a:	3301      	adds	r3, #1
 800405c:	6033      	str	r3, [r6, #0]
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	0699      	lsls	r1, r3, #26
 8004062:	bf42      	ittt	mi
 8004064:	6833      	ldrmi	r3, [r6, #0]
 8004066:	3302      	addmi	r3, #2
 8004068:	6033      	strmi	r3, [r6, #0]
 800406a:	6825      	ldr	r5, [r4, #0]
 800406c:	f015 0506 	ands.w	r5, r5, #6
 8004070:	d106      	bne.n	8004080 <_printf_common+0x48>
 8004072:	f104 0a19 	add.w	sl, r4, #25
 8004076:	68e3      	ldr	r3, [r4, #12]
 8004078:	6832      	ldr	r2, [r6, #0]
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	42ab      	cmp	r3, r5
 800407e:	dc26      	bgt.n	80040ce <_printf_common+0x96>
 8004080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	3b00      	subs	r3, #0
 8004088:	bf18      	it	ne
 800408a:	2301      	movne	r3, #1
 800408c:	0692      	lsls	r2, r2, #26
 800408e:	d42b      	bmi.n	80040e8 <_printf_common+0xb0>
 8004090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004094:	4641      	mov	r1, r8
 8004096:	4638      	mov	r0, r7
 8004098:	47c8      	blx	r9
 800409a:	3001      	adds	r0, #1
 800409c:	d01e      	beq.n	80040dc <_printf_common+0xa4>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	f003 0306 	and.w	r3, r3, #6
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	bf02      	ittt	eq
 80040aa:	68e5      	ldreq	r5, [r4, #12]
 80040ac:	6833      	ldreq	r3, [r6, #0]
 80040ae:	1aed      	subeq	r5, r5, r3
 80040b0:	68a3      	ldr	r3, [r4, #8]
 80040b2:	bf0c      	ite	eq
 80040b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b8:	2500      	movne	r5, #0
 80040ba:	4293      	cmp	r3, r2
 80040bc:	bfc4      	itt	gt
 80040be:	1a9b      	subgt	r3, r3, r2
 80040c0:	18ed      	addgt	r5, r5, r3
 80040c2:	2600      	movs	r6, #0
 80040c4:	341a      	adds	r4, #26
 80040c6:	42b5      	cmp	r5, r6
 80040c8:	d11a      	bne.n	8004100 <_printf_common+0xc8>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e008      	b.n	80040e0 <_printf_common+0xa8>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4652      	mov	r2, sl
 80040d2:	4641      	mov	r1, r8
 80040d4:	4638      	mov	r0, r7
 80040d6:	47c8      	blx	r9
 80040d8:	3001      	adds	r0, #1
 80040da:	d103      	bne.n	80040e4 <_printf_common+0xac>
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e4:	3501      	adds	r5, #1
 80040e6:	e7c6      	b.n	8004076 <_printf_common+0x3e>
 80040e8:	18e1      	adds	r1, r4, r3
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	2030      	movs	r0, #48	@ 0x30
 80040ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040f2:	4422      	add	r2, r4
 80040f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040fc:	3302      	adds	r3, #2
 80040fe:	e7c7      	b.n	8004090 <_printf_common+0x58>
 8004100:	2301      	movs	r3, #1
 8004102:	4622      	mov	r2, r4
 8004104:	4641      	mov	r1, r8
 8004106:	4638      	mov	r0, r7
 8004108:	47c8      	blx	r9
 800410a:	3001      	adds	r0, #1
 800410c:	d0e6      	beq.n	80040dc <_printf_common+0xa4>
 800410e:	3601      	adds	r6, #1
 8004110:	e7d9      	b.n	80040c6 <_printf_common+0x8e>
	...

08004114 <_printf_i>:
 8004114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	7e0f      	ldrb	r7, [r1, #24]
 800411a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800411c:	2f78      	cmp	r7, #120	@ 0x78
 800411e:	4691      	mov	r9, r2
 8004120:	4680      	mov	r8, r0
 8004122:	460c      	mov	r4, r1
 8004124:	469a      	mov	sl, r3
 8004126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800412a:	d807      	bhi.n	800413c <_printf_i+0x28>
 800412c:	2f62      	cmp	r7, #98	@ 0x62
 800412e:	d80a      	bhi.n	8004146 <_printf_i+0x32>
 8004130:	2f00      	cmp	r7, #0
 8004132:	f000 80d2 	beq.w	80042da <_printf_i+0x1c6>
 8004136:	2f58      	cmp	r7, #88	@ 0x58
 8004138:	f000 80b9 	beq.w	80042ae <_printf_i+0x19a>
 800413c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004144:	e03a      	b.n	80041bc <_printf_i+0xa8>
 8004146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800414a:	2b15      	cmp	r3, #21
 800414c:	d8f6      	bhi.n	800413c <_printf_i+0x28>
 800414e:	a101      	add	r1, pc, #4	@ (adr r1, 8004154 <_printf_i+0x40>)
 8004150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004154:	080041ad 	.word	0x080041ad
 8004158:	080041c1 	.word	0x080041c1
 800415c:	0800413d 	.word	0x0800413d
 8004160:	0800413d 	.word	0x0800413d
 8004164:	0800413d 	.word	0x0800413d
 8004168:	0800413d 	.word	0x0800413d
 800416c:	080041c1 	.word	0x080041c1
 8004170:	0800413d 	.word	0x0800413d
 8004174:	0800413d 	.word	0x0800413d
 8004178:	0800413d 	.word	0x0800413d
 800417c:	0800413d 	.word	0x0800413d
 8004180:	080042c1 	.word	0x080042c1
 8004184:	080041eb 	.word	0x080041eb
 8004188:	0800427b 	.word	0x0800427b
 800418c:	0800413d 	.word	0x0800413d
 8004190:	0800413d 	.word	0x0800413d
 8004194:	080042e3 	.word	0x080042e3
 8004198:	0800413d 	.word	0x0800413d
 800419c:	080041eb 	.word	0x080041eb
 80041a0:	0800413d 	.word	0x0800413d
 80041a4:	0800413d 	.word	0x0800413d
 80041a8:	08004283 	.word	0x08004283
 80041ac:	6833      	ldr	r3, [r6, #0]
 80041ae:	1d1a      	adds	r2, r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6032      	str	r2, [r6, #0]
 80041b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041bc:	2301      	movs	r3, #1
 80041be:	e09d      	b.n	80042fc <_printf_i+0x1e8>
 80041c0:	6833      	ldr	r3, [r6, #0]
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	1d19      	adds	r1, r3, #4
 80041c6:	6031      	str	r1, [r6, #0]
 80041c8:	0606      	lsls	r6, r0, #24
 80041ca:	d501      	bpl.n	80041d0 <_printf_i+0xbc>
 80041cc:	681d      	ldr	r5, [r3, #0]
 80041ce:	e003      	b.n	80041d8 <_printf_i+0xc4>
 80041d0:	0645      	lsls	r5, r0, #25
 80041d2:	d5fb      	bpl.n	80041cc <_printf_i+0xb8>
 80041d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	da03      	bge.n	80041e4 <_printf_i+0xd0>
 80041dc:	232d      	movs	r3, #45	@ 0x2d
 80041de:	426d      	negs	r5, r5
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e4:	4859      	ldr	r0, [pc, #356]	@ (800434c <_printf_i+0x238>)
 80041e6:	230a      	movs	r3, #10
 80041e8:	e011      	b.n	800420e <_printf_i+0xfa>
 80041ea:	6821      	ldr	r1, [r4, #0]
 80041ec:	6833      	ldr	r3, [r6, #0]
 80041ee:	0608      	lsls	r0, r1, #24
 80041f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80041f4:	d402      	bmi.n	80041fc <_printf_i+0xe8>
 80041f6:	0649      	lsls	r1, r1, #25
 80041f8:	bf48      	it	mi
 80041fa:	b2ad      	uxthmi	r5, r5
 80041fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80041fe:	4853      	ldr	r0, [pc, #332]	@ (800434c <_printf_i+0x238>)
 8004200:	6033      	str	r3, [r6, #0]
 8004202:	bf14      	ite	ne
 8004204:	230a      	movne	r3, #10
 8004206:	2308      	moveq	r3, #8
 8004208:	2100      	movs	r1, #0
 800420a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800420e:	6866      	ldr	r6, [r4, #4]
 8004210:	60a6      	str	r6, [r4, #8]
 8004212:	2e00      	cmp	r6, #0
 8004214:	bfa2      	ittt	ge
 8004216:	6821      	ldrge	r1, [r4, #0]
 8004218:	f021 0104 	bicge.w	r1, r1, #4
 800421c:	6021      	strge	r1, [r4, #0]
 800421e:	b90d      	cbnz	r5, 8004224 <_printf_i+0x110>
 8004220:	2e00      	cmp	r6, #0
 8004222:	d04b      	beq.n	80042bc <_printf_i+0x1a8>
 8004224:	4616      	mov	r6, r2
 8004226:	fbb5 f1f3 	udiv	r1, r5, r3
 800422a:	fb03 5711 	mls	r7, r3, r1, r5
 800422e:	5dc7      	ldrb	r7, [r0, r7]
 8004230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004234:	462f      	mov	r7, r5
 8004236:	42bb      	cmp	r3, r7
 8004238:	460d      	mov	r5, r1
 800423a:	d9f4      	bls.n	8004226 <_printf_i+0x112>
 800423c:	2b08      	cmp	r3, #8
 800423e:	d10b      	bne.n	8004258 <_printf_i+0x144>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	07df      	lsls	r7, r3, #31
 8004244:	d508      	bpl.n	8004258 <_printf_i+0x144>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	6861      	ldr	r1, [r4, #4]
 800424a:	4299      	cmp	r1, r3
 800424c:	bfde      	ittt	le
 800424e:	2330      	movle	r3, #48	@ 0x30
 8004250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004258:	1b92      	subs	r2, r2, r6
 800425a:	6122      	str	r2, [r4, #16]
 800425c:	f8cd a000 	str.w	sl, [sp]
 8004260:	464b      	mov	r3, r9
 8004262:	aa03      	add	r2, sp, #12
 8004264:	4621      	mov	r1, r4
 8004266:	4640      	mov	r0, r8
 8004268:	f7ff fee6 	bl	8004038 <_printf_common>
 800426c:	3001      	adds	r0, #1
 800426e:	d14a      	bne.n	8004306 <_printf_i+0x1f2>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	b004      	add	sp, #16
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	f043 0320 	orr.w	r3, r3, #32
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	4833      	ldr	r0, [pc, #204]	@ (8004350 <_printf_i+0x23c>)
 8004284:	2778      	movs	r7, #120	@ 0x78
 8004286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	6831      	ldr	r1, [r6, #0]
 800428e:	061f      	lsls	r7, r3, #24
 8004290:	f851 5b04 	ldr.w	r5, [r1], #4
 8004294:	d402      	bmi.n	800429c <_printf_i+0x188>
 8004296:	065f      	lsls	r7, r3, #25
 8004298:	bf48      	it	mi
 800429a:	b2ad      	uxthmi	r5, r5
 800429c:	6031      	str	r1, [r6, #0]
 800429e:	07d9      	lsls	r1, r3, #31
 80042a0:	bf44      	itt	mi
 80042a2:	f043 0320 	orrmi.w	r3, r3, #32
 80042a6:	6023      	strmi	r3, [r4, #0]
 80042a8:	b11d      	cbz	r5, 80042b2 <_printf_i+0x19e>
 80042aa:	2310      	movs	r3, #16
 80042ac:	e7ac      	b.n	8004208 <_printf_i+0xf4>
 80042ae:	4827      	ldr	r0, [pc, #156]	@ (800434c <_printf_i+0x238>)
 80042b0:	e7e9      	b.n	8004286 <_printf_i+0x172>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	f023 0320 	bic.w	r3, r3, #32
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	e7f6      	b.n	80042aa <_printf_i+0x196>
 80042bc:	4616      	mov	r6, r2
 80042be:	e7bd      	b.n	800423c <_printf_i+0x128>
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	6825      	ldr	r5, [r4, #0]
 80042c4:	6961      	ldr	r1, [r4, #20]
 80042c6:	1d18      	adds	r0, r3, #4
 80042c8:	6030      	str	r0, [r6, #0]
 80042ca:	062e      	lsls	r6, r5, #24
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	d501      	bpl.n	80042d4 <_printf_i+0x1c0>
 80042d0:	6019      	str	r1, [r3, #0]
 80042d2:	e002      	b.n	80042da <_printf_i+0x1c6>
 80042d4:	0668      	lsls	r0, r5, #25
 80042d6:	d5fb      	bpl.n	80042d0 <_printf_i+0x1bc>
 80042d8:	8019      	strh	r1, [r3, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	4616      	mov	r6, r2
 80042e0:	e7bc      	b.n	800425c <_printf_i+0x148>
 80042e2:	6833      	ldr	r3, [r6, #0]
 80042e4:	1d1a      	adds	r2, r3, #4
 80042e6:	6032      	str	r2, [r6, #0]
 80042e8:	681e      	ldr	r6, [r3, #0]
 80042ea:	6862      	ldr	r2, [r4, #4]
 80042ec:	2100      	movs	r1, #0
 80042ee:	4630      	mov	r0, r6
 80042f0:	f7fb ff6e 	bl	80001d0 <memchr>
 80042f4:	b108      	cbz	r0, 80042fa <_printf_i+0x1e6>
 80042f6:	1b80      	subs	r0, r0, r6
 80042f8:	6060      	str	r0, [r4, #4]
 80042fa:	6863      	ldr	r3, [r4, #4]
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	2300      	movs	r3, #0
 8004300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004304:	e7aa      	b.n	800425c <_printf_i+0x148>
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	4632      	mov	r2, r6
 800430a:	4649      	mov	r1, r9
 800430c:	4640      	mov	r0, r8
 800430e:	47d0      	blx	sl
 8004310:	3001      	adds	r0, #1
 8004312:	d0ad      	beq.n	8004270 <_printf_i+0x15c>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	079b      	lsls	r3, r3, #30
 8004318:	d413      	bmi.n	8004342 <_printf_i+0x22e>
 800431a:	68e0      	ldr	r0, [r4, #12]
 800431c:	9b03      	ldr	r3, [sp, #12]
 800431e:	4298      	cmp	r0, r3
 8004320:	bfb8      	it	lt
 8004322:	4618      	movlt	r0, r3
 8004324:	e7a6      	b.n	8004274 <_printf_i+0x160>
 8004326:	2301      	movs	r3, #1
 8004328:	4632      	mov	r2, r6
 800432a:	4649      	mov	r1, r9
 800432c:	4640      	mov	r0, r8
 800432e:	47d0      	blx	sl
 8004330:	3001      	adds	r0, #1
 8004332:	d09d      	beq.n	8004270 <_printf_i+0x15c>
 8004334:	3501      	adds	r5, #1
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	9903      	ldr	r1, [sp, #12]
 800433a:	1a5b      	subs	r3, r3, r1
 800433c:	42ab      	cmp	r3, r5
 800433e:	dcf2      	bgt.n	8004326 <_printf_i+0x212>
 8004340:	e7eb      	b.n	800431a <_printf_i+0x206>
 8004342:	2500      	movs	r5, #0
 8004344:	f104 0619 	add.w	r6, r4, #25
 8004348:	e7f5      	b.n	8004336 <_printf_i+0x222>
 800434a:	bf00      	nop
 800434c:	080046ed 	.word	0x080046ed
 8004350:	080046fe 	.word	0x080046fe

08004354 <__sflush_r>:
 8004354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	0716      	lsls	r6, r2, #28
 800435e:	4605      	mov	r5, r0
 8004360:	460c      	mov	r4, r1
 8004362:	d454      	bmi.n	800440e <__sflush_r+0xba>
 8004364:	684b      	ldr	r3, [r1, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	dc02      	bgt.n	8004370 <__sflush_r+0x1c>
 800436a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	dd48      	ble.n	8004402 <__sflush_r+0xae>
 8004370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004372:	2e00      	cmp	r6, #0
 8004374:	d045      	beq.n	8004402 <__sflush_r+0xae>
 8004376:	2300      	movs	r3, #0
 8004378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800437c:	682f      	ldr	r7, [r5, #0]
 800437e:	6a21      	ldr	r1, [r4, #32]
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	d030      	beq.n	80043e6 <__sflush_r+0x92>
 8004384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	0759      	lsls	r1, r3, #29
 800438a:	d505      	bpl.n	8004398 <__sflush_r+0x44>
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004392:	b10b      	cbz	r3, 8004398 <__sflush_r+0x44>
 8004394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800439c:	6a21      	ldr	r1, [r4, #32]
 800439e:	4628      	mov	r0, r5
 80043a0:	47b0      	blx	r6
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	d106      	bne.n	80043b6 <__sflush_r+0x62>
 80043a8:	6829      	ldr	r1, [r5, #0]
 80043aa:	291d      	cmp	r1, #29
 80043ac:	d82b      	bhi.n	8004406 <__sflush_r+0xb2>
 80043ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004458 <__sflush_r+0x104>)
 80043b0:	410a      	asrs	r2, r1
 80043b2:	07d6      	lsls	r6, r2, #31
 80043b4:	d427      	bmi.n	8004406 <__sflush_r+0xb2>
 80043b6:	2200      	movs	r2, #0
 80043b8:	6062      	str	r2, [r4, #4]
 80043ba:	04d9      	lsls	r1, r3, #19
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	6022      	str	r2, [r4, #0]
 80043c0:	d504      	bpl.n	80043cc <__sflush_r+0x78>
 80043c2:	1c42      	adds	r2, r0, #1
 80043c4:	d101      	bne.n	80043ca <__sflush_r+0x76>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	b903      	cbnz	r3, 80043cc <__sflush_r+0x78>
 80043ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80043cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043ce:	602f      	str	r7, [r5, #0]
 80043d0:	b1b9      	cbz	r1, 8004402 <__sflush_r+0xae>
 80043d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043d6:	4299      	cmp	r1, r3
 80043d8:	d002      	beq.n	80043e0 <__sflush_r+0x8c>
 80043da:	4628      	mov	r0, r5
 80043dc:	f7ff fbf2 	bl	8003bc4 <_free_r>
 80043e0:	2300      	movs	r3, #0
 80043e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80043e4:	e00d      	b.n	8004402 <__sflush_r+0xae>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4628      	mov	r0, r5
 80043ea:	47b0      	blx	r6
 80043ec:	4602      	mov	r2, r0
 80043ee:	1c50      	adds	r0, r2, #1
 80043f0:	d1c9      	bne.n	8004386 <__sflush_r+0x32>
 80043f2:	682b      	ldr	r3, [r5, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0c6      	beq.n	8004386 <__sflush_r+0x32>
 80043f8:	2b1d      	cmp	r3, #29
 80043fa:	d001      	beq.n	8004400 <__sflush_r+0xac>
 80043fc:	2b16      	cmp	r3, #22
 80043fe:	d11e      	bne.n	800443e <__sflush_r+0xea>
 8004400:	602f      	str	r7, [r5, #0]
 8004402:	2000      	movs	r0, #0
 8004404:	e022      	b.n	800444c <__sflush_r+0xf8>
 8004406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800440a:	b21b      	sxth	r3, r3
 800440c:	e01b      	b.n	8004446 <__sflush_r+0xf2>
 800440e:	690f      	ldr	r7, [r1, #16]
 8004410:	2f00      	cmp	r7, #0
 8004412:	d0f6      	beq.n	8004402 <__sflush_r+0xae>
 8004414:	0793      	lsls	r3, r2, #30
 8004416:	680e      	ldr	r6, [r1, #0]
 8004418:	bf08      	it	eq
 800441a:	694b      	ldreq	r3, [r1, #20]
 800441c:	600f      	str	r7, [r1, #0]
 800441e:	bf18      	it	ne
 8004420:	2300      	movne	r3, #0
 8004422:	eba6 0807 	sub.w	r8, r6, r7
 8004426:	608b      	str	r3, [r1, #8]
 8004428:	f1b8 0f00 	cmp.w	r8, #0
 800442c:	dde9      	ble.n	8004402 <__sflush_r+0xae>
 800442e:	6a21      	ldr	r1, [r4, #32]
 8004430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004432:	4643      	mov	r3, r8
 8004434:	463a      	mov	r2, r7
 8004436:	4628      	mov	r0, r5
 8004438:	47b0      	blx	r6
 800443a:	2800      	cmp	r0, #0
 800443c:	dc08      	bgt.n	8004450 <__sflush_r+0xfc>
 800443e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004450:	4407      	add	r7, r0
 8004452:	eba8 0800 	sub.w	r8, r8, r0
 8004456:	e7e7      	b.n	8004428 <__sflush_r+0xd4>
 8004458:	dfbffffe 	.word	0xdfbffffe

0800445c <_fflush_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	690b      	ldr	r3, [r1, #16]
 8004460:	4605      	mov	r5, r0
 8004462:	460c      	mov	r4, r1
 8004464:	b913      	cbnz	r3, 800446c <_fflush_r+0x10>
 8004466:	2500      	movs	r5, #0
 8004468:	4628      	mov	r0, r5
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	b118      	cbz	r0, 8004476 <_fflush_r+0x1a>
 800446e:	6a03      	ldr	r3, [r0, #32]
 8004470:	b90b      	cbnz	r3, 8004476 <_fflush_r+0x1a>
 8004472:	f7ff f9ad 	bl	80037d0 <__sinit>
 8004476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f3      	beq.n	8004466 <_fflush_r+0xa>
 800447e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004480:	07d0      	lsls	r0, r2, #31
 8004482:	d404      	bmi.n	800448e <_fflush_r+0x32>
 8004484:	0599      	lsls	r1, r3, #22
 8004486:	d402      	bmi.n	800448e <_fflush_r+0x32>
 8004488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800448a:	f7ff fb98 	bl	8003bbe <__retarget_lock_acquire_recursive>
 800448e:	4628      	mov	r0, r5
 8004490:	4621      	mov	r1, r4
 8004492:	f7ff ff5f 	bl	8004354 <__sflush_r>
 8004496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004498:	07da      	lsls	r2, r3, #31
 800449a:	4605      	mov	r5, r0
 800449c:	d4e4      	bmi.n	8004468 <_fflush_r+0xc>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	059b      	lsls	r3, r3, #22
 80044a2:	d4e1      	bmi.n	8004468 <_fflush_r+0xc>
 80044a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044a6:	f7ff fb8b 	bl	8003bc0 <__retarget_lock_release_recursive>
 80044aa:	e7dd      	b.n	8004468 <_fflush_r+0xc>

080044ac <__swhatbuf_r>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	460c      	mov	r4, r1
 80044b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b4:	2900      	cmp	r1, #0
 80044b6:	b096      	sub	sp, #88	@ 0x58
 80044b8:	4615      	mov	r5, r2
 80044ba:	461e      	mov	r6, r3
 80044bc:	da0d      	bge.n	80044da <__swhatbuf_r+0x2e>
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2340      	movne	r3, #64	@ 0x40
 80044cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044d0:	2000      	movs	r0, #0
 80044d2:	6031      	str	r1, [r6, #0]
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	b016      	add	sp, #88	@ 0x58
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	466a      	mov	r2, sp
 80044dc:	f000 f848 	bl	8004570 <_fstat_r>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	dbec      	blt.n	80044be <__swhatbuf_r+0x12>
 80044e4:	9901      	ldr	r1, [sp, #4]
 80044e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80044ee:	4259      	negs	r1, r3
 80044f0:	4159      	adcs	r1, r3
 80044f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044f6:	e7eb      	b.n	80044d0 <__swhatbuf_r+0x24>

080044f8 <__smakebuf_r>:
 80044f8:	898b      	ldrh	r3, [r1, #12]
 80044fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044fc:	079d      	lsls	r5, r3, #30
 80044fe:	4606      	mov	r6, r0
 8004500:	460c      	mov	r4, r1
 8004502:	d507      	bpl.n	8004514 <__smakebuf_r+0x1c>
 8004504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	2301      	movs	r3, #1
 800450e:	6163      	str	r3, [r4, #20]
 8004510:	b003      	add	sp, #12
 8004512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004514:	ab01      	add	r3, sp, #4
 8004516:	466a      	mov	r2, sp
 8004518:	f7ff ffc8 	bl	80044ac <__swhatbuf_r>
 800451c:	9f00      	ldr	r7, [sp, #0]
 800451e:	4605      	mov	r5, r0
 8004520:	4639      	mov	r1, r7
 8004522:	4630      	mov	r0, r6
 8004524:	f7ff fbba 	bl	8003c9c <_malloc_r>
 8004528:	b948      	cbnz	r0, 800453e <__smakebuf_r+0x46>
 800452a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452e:	059a      	lsls	r2, r3, #22
 8004530:	d4ee      	bmi.n	8004510 <__smakebuf_r+0x18>
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	f043 0302 	orr.w	r3, r3, #2
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	e7e2      	b.n	8004504 <__smakebuf_r+0xc>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	6020      	str	r0, [r4, #0]
 8004542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800454e:	b15b      	cbz	r3, 8004568 <__smakebuf_r+0x70>
 8004550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f81d 	bl	8004594 <_isatty_r>
 800455a:	b128      	cbz	r0, 8004568 <__smakebuf_r+0x70>
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	431d      	orrs	r5, r3
 800456c:	81a5      	strh	r5, [r4, #12]
 800456e:	e7cf      	b.n	8004510 <__smakebuf_r+0x18>

08004570 <_fstat_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4d07      	ldr	r5, [pc, #28]	@ (8004590 <_fstat_r+0x20>)
 8004574:	2300      	movs	r3, #0
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	f7fc fa6e 	bl	8000a5e <_fstat>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	d102      	bne.n	800458c <_fstat_r+0x1c>
 8004586:	682b      	ldr	r3, [r5, #0]
 8004588:	b103      	cbz	r3, 800458c <_fstat_r+0x1c>
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	bd38      	pop	{r3, r4, r5, pc}
 800458e:	bf00      	nop
 8004590:	200041c8 	.word	0x200041c8

08004594 <_isatty_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4d06      	ldr	r5, [pc, #24]	@ (80045b0 <_isatty_r+0x1c>)
 8004598:	2300      	movs	r3, #0
 800459a:	4604      	mov	r4, r0
 800459c:	4608      	mov	r0, r1
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	f7fc fa6d 	bl	8000a7e <_isatty>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_isatty_r+0x1a>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_isatty_r+0x1a>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	200041c8 	.word	0x200041c8

080045b4 <_sbrk_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4d06      	ldr	r5, [pc, #24]	@ (80045d0 <_sbrk_r+0x1c>)
 80045b8:	2300      	movs	r3, #0
 80045ba:	4604      	mov	r4, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	f7fc fa76 	bl	8000ab0 <_sbrk>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_sbrk_r+0x1a>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_sbrk_r+0x1a>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	200041c8 	.word	0x200041c8

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
