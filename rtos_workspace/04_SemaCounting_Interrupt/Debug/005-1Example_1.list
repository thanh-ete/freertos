
005-1Example_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005eec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000041b8  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004218  20004218  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001195b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bdc  00000000  00000000  000189eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0001b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb7  00000000  00000000  0001c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bd6  00000000  00000000  0001d2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013df6  00000000  00000000  0003fead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a98  00000000  00000000  00053ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012773b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048bc  00000000  00000000  00127780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d28 	.word	0x08005d28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005d28 	.word	0x08005d28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	200000d0 	.word	0x200000d0

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fbd7 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f86f 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f901 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 f8d5 	bl	8000764 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SimpleQueue = xQueueCreate(10, sizeof(int));
 80005ba:	2200      	movs	r2, #0
 80005bc:	2104      	movs	r1, #4
 80005be:	200a      	movs	r0, #10
 80005c0:	f002 fffe 	bl	80035c0 <xQueueGenericCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a24      	ldr	r2, [pc, #144]	@ (8000658 <main+0xb4>)
 80005c8:	6013      	str	r3, [r2, #0]

  if(SimpleQueue == 0) {
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <main+0xb4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10d      	bne.n	80005ee <main+0x4a>
	  char *str = "Unable Queue";
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <main+0xb8>)
 80005d4:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f7ff fdfa 	bl	80001d0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	6839      	ldr	r1, [r7, #0]
 80005e6:	481e      	ldr	r0, [pc, #120]	@ (8000660 <main+0xbc>)
 80005e8:	f001 fec6 	bl	8002378 <HAL_UART_Transmit>
 80005ec:	e00c      	b.n	8000608 <main+0x64>
  }
  else {
	  char *str = "Create Queue success\n";
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <main+0xc0>)
 80005f0:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff fdec 	bl	80001d0 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4817      	ldr	r0, [pc, #92]	@ (8000660 <main+0xbc>)
 8000604:	f001 feb8 	bl	8002378 <HAL_UART_Transmit>
  }

  xTaskCreate(Sender1_Task, "High-Task", 128, NULL,3, &Sender1_Handler);
 8000608:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <main+0xc4>)
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2303      	movs	r3, #3
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	4915      	ldr	r1, [pc, #84]	@ (800066c <main+0xc8>)
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <main+0xcc>)
 8000618:	f003 fc1e 	bl	8003e58 <xTaskCreate>
  xTaskCreate(Sender2_Task, "Medium-Task", 128, (void*)1,2, &Sender2_Handler);
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <main+0xd0>)
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	4913      	ldr	r1, [pc, #76]	@ (8000678 <main+0xd4>)
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <main+0xd8>)
 800062c:	f003 fc14 	bl	8003e58 <xTaskCreate>
  xTaskCreate(Receiver_Task, "Receive-Task", 128, NULL,1, &Receiver_Handler);
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <main+0xdc>)
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2301      	movs	r3, #1
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	4911      	ldr	r1, [pc, #68]	@ (8000684 <main+0xe0>)
 800063e:	4812      	ldr	r0, [pc, #72]	@ (8000688 <main+0xe4>)
 8000640:	f003 fc0a 	bl	8003e58 <xTaskCreate>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4911      	ldr	r1, [pc, #68]	@ (800068c <main+0xe8>)
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <main+0xbc>)
 800064a:	f001 ff20 	bl	800248e <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 800064e:	f003 fd71 	bl	8004134 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	bf00      	nop
 8000654:	e7fd      	b.n	8000652 <main+0xae>
 8000656:	bf00      	nop
 8000658:	20000324 	.word	0x20000324
 800065c:	08005d40 	.word	0x08005d40
 8000660:	200002d0 	.word	0x200002d0
 8000664:	08005d50 	.word	0x08005d50
 8000668:	20000318 	.word	0x20000318
 800066c:	08005d68 	.word	0x08005d68
 8000670:	08000809 	.word	0x08000809
 8000674:	2000031c 	.word	0x2000031c
 8000678:	08005d74 	.word	0x08005d74
 800067c:	08000881 	.word	0x08000881
 8000680:	20000320 	.word	0x20000320
 8000684:	08005d80 	.word	0x08005d80
 8000688:	080008f5 	.word	0x080008f5
 800068c:	20000328 	.word	0x20000328

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	@ 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fec2 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	@ (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xd0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000704:	23a8      	movs	r3, #168	@ 0xa8
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fe73 	bl	8001400 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 f984 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f8d4 	bl	80018f0 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074e:	f000 f96d 	bl	8000a2c <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f001 fd9c 	bl	80022d8 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f941 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200002d0 	.word	0x200002d0
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_GPIO_Init+0x4c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <Sender1_Task>:

/* USER CODE BEGIN 4 */
void Sender1_Task(void *argument) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	int i = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000814:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000818:	617b      	str	r3, [r7, #20]
	while(1){
		char *str = "Enter Task-1 & send data to queue\n";
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <Sender1_Task+0x68>)
 800081c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800081e:	6938      	ldr	r0, [r7, #16]
 8000820:	f7ff fcd6 	bl	80001d0 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	6939      	ldr	r1, [r7, #16]
 800082e:	4811      	ldr	r0, [pc, #68]	@ (8000874 <Sender1_Task+0x6c>)
 8000830:	f001 fda2 	bl	8002378 <HAL_UART_Transmit>

		if(xQueueSend(SimpleQueue, &i, portMAX_DELAY) == pdPASS) {
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <Sender1_Task+0x70>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	f107 0108 	add.w	r1, r7, #8
 800083c:	2300      	movs	r3, #0
 800083e:	f04f 32ff 	mov.w	r2, #4294967295
 8000842:	f002 ff17 	bl	8003674 <xQueueGenericSend>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d10c      	bne.n	8000866 <Sender1_Task+0x5e>
		char *str1 = "Send Success & leave the Task-1\n\n\n";
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <Sender1_Task+0x74>)
 800084e:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), HAL_MAX_DELAY);
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff fcbd 	bl	80001d0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	68f9      	ldr	r1, [r7, #12]
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <Sender1_Task+0x6c>)
 8000862:	f001 fd89 	bl	8002378 <HAL_UART_Transmit>
		}
		vTaskDelay(TickDelay);
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f003 fc2e 	bl	80040c8 <vTaskDelay>
	while(1){
 800086c:	e7d5      	b.n	800081a <Sender1_Task+0x12>
 800086e:	bf00      	nop
 8000870:	08005d90 	.word	0x08005d90
 8000874:	200002d0 	.word	0x200002d0
 8000878:	20000324 	.word	0x20000324
 800087c:	08005db4 	.word	0x08005db4

08000880 <Sender2_Task>:
	}
}

void Sender2_Task(void *argument) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	int tosend;
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088c:	617b      	str	r3, [r7, #20]
	while(1){
		tosend = (int)argument;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60bb      	str	r3, [r7, #8]
		char *str = "Enter Task-2 & send data to queue\n";
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <Sender2_Task+0x64>)
 8000894:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000896:	6938      	ldr	r0, [r7, #16]
 8000898:	f7ff fc9a 	bl	80001d0 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	6939      	ldr	r1, [r7, #16]
 80008a6:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <Sender2_Task+0x68>)
 80008a8:	f001 fd66 	bl	8002378 <HAL_UART_Transmit>

		xQueueSend(SimpleQueue, &tosend, portMAX_DELAY);
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <Sender2_Task+0x6c>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	f107 0108 	add.w	r1, r7, #8
 80008b4:	2300      	movs	r3, #0
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	f002 fedb 	bl	8003674 <xQueueGenericSend>

		char *str1 = "Send Success & leave the Task-2\n\n\n";
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <Sender2_Task+0x70>)
 80008c0:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), HAL_MAX_DELAY);
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff fc84 	bl	80001d0 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <Sender2_Task+0x68>)
 80008d4:	f001 fd50 	bl	8002378 <HAL_UART_Transmit>
		vTaskDelay(TickDelay);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f003 fbf5 	bl	80040c8 <vTaskDelay>
	while(1){
 80008de:	bf00      	nop
 80008e0:	e7d5      	b.n	800088e <Sender2_Task+0xe>
 80008e2:	bf00      	nop
 80008e4:	08005dd8 	.word	0x08005dd8
 80008e8:	200002d0 	.word	0x200002d0
 80008ec:	20000324 	.word	0x20000324
 80008f0:	08005dfc 	.word	0x08005dfc

080008f4 <Receiver_Task>:
	}
}

void Receiver_Task(void *argument){
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b09f      	sub	sp, #124	@ 0x7c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	int receive = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000904:	677b      	str	r3, [r7, #116]	@ 0x74

	while(1){
		char str[100];
		strcpy(str, "Enter Receive");
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <Receiver_Task+0x88>)
 800090c:	461c      	mov	r4, r3
 800090e:	4613      	mov	r3, r2
 8000910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000912:	c407      	stmia	r4!, {r0, r1, r2}
 8000914:	8023      	strh	r3, [r4, #0]
		if(xQueueReceive(SimpleQueue, &receive, portMAX_DELAY) != pdTRUE) {
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <Receiver_Task+0x8c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800091e:	f04f 32ff 	mov.w	r2, #4294967295
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f846 	bl	80039b4 <xQueueReceive>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d00d      	beq.n	800094a <Receiver_Task+0x56>
			char *str = "Error in Receive\n\n";
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <Receiver_Task+0x90>)
 8000930:	673b      	str	r3, [r7, #112]	@ 0x70
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000932:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000934:	f7ff fc4c 	bl	80001d0 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	b29a      	uxth	r2, r3
 800093c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000940:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000942:	4811      	ldr	r0, [pc, #68]	@ (8000988 <Receiver_Task+0x94>)
 8000944:	f001 fd18 	bl	8002378 <HAL_UART_Transmit>
 8000948:	e014      	b.n	8000974 <Receiver_Task+0x80>
		}
		else {
			sprintf(str, " Receive success %d and leave Receive Task\n\n\n",receive);
 800094a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	490e      	ldr	r1, [pc, #56]	@ (800098c <Receiver_Task+0x98>)
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fd48 	bl	80053e8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc37 	bl	80001d0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	f107 0108 	add.w	r1, r7, #8
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <Receiver_Task+0x94>)
 8000970:	f001 fd02 	bl	8002378 <HAL_UART_Transmit>
		}


		vTaskDelay(TickDelay);
 8000974:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000976:	f003 fba7 	bl	80040c8 <vTaskDelay>
	while(1){
 800097a:	e7c4      	b.n	8000906 <Receiver_Task+0x12>
 800097c:	08005e20 	.word	0x08005e20
 8000980:	20000324 	.word	0x20000324
 8000984:	08005e30 	.word	0x08005e30
 8000988:	200002d0 	.word	0x200002d0
 800098c:	08005e44 	.word	0x08005e44

08000990 <HAL_UART_RxCpltCallback>:

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	4917      	ldr	r1, [pc, #92]	@ (80009f8 <HAL_UART_RxCpltCallback+0x68>)
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f001 fd76 	bl	800248e <HAL_UART_Receive_IT>
	int tosend = 3;
 80009a2:	2303      	movs	r3, #3
 80009a4:	60fb      	str	r3, [r7, #12]
	if (rx_data == 'r')
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_UART_RxCpltCallback+0x68>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b72      	cmp	r3, #114	@ 0x72
 80009ac:	d11f      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x5e>
	{
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]

		if (xQueueSendToFrontFromISR(SimpleQueue, &tosend, &xHigherPriorityTaskWoken) == pdPASS)
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_UART_RxCpltCallback+0x6c>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f107 0208 	add.w	r2, r7, #8
 80009ba:	f107 010c 	add.w	r1, r7, #12
 80009be:	2301      	movs	r3, #1
 80009c0:	f002 ff5a 	bl	8003878 <xQueueGenericSendFromISR>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d106      	bne.n	80009d8 <HAL_UART_RxCpltCallback+0x48>
		{
			HAL_UART_Transmit(huart, (uint8_t *)"\n\nSent from ISR\n\n", 17, 500);
 80009ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009ce:	2211      	movs	r2, #17
 80009d0:	490b      	ldr	r1, [pc, #44]	@ (8000a00 <HAL_UART_RxCpltCallback+0x70>)
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f001 fcd0 	bl	8002378 <HAL_UART_Transmit>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <HAL_UART_RxCpltCallback+0x5e>
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_UART_RxCpltCallback+0x74>)
 80009e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	f3bf 8f4f 	dsb	sy
 80009ea:	f3bf 8f6f 	isb	sy
	}
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000328 	.word	0x20000328
 80009fc:	20000324 	.word	0x20000324
 8000a00:	08005e74 	.word	0x08005e74
 8000a04:	e000ed04 	.word	0xe000ed04

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 f9c1 	bl	8000da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010000 	.word	0x40010000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 fa67 	bl	8000f50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <HAL_UART_MspInit+0x94>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d133      	bne.n	8000b1a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_UART_MspInit+0x98>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <HAL_UART_MspInit+0x98>)
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_UART_MspInit+0x98>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_UART_MspInit+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <HAL_UART_MspInit+0x98>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_UART_MspInit+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aea:	230c      	movs	r3, #12
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <HAL_UART_MspInit+0x9c>)
 8000b06:	f000 fadf 	bl	80010c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	2026      	movs	r0, #38	@ 0x26
 8000b10:	f000 fa1e 	bl	8000f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b14:	2026      	movs	r0, #38	@ 0x26
 8000b16:	f000 fa37 	bl	8000f88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_InitTick+0xd4>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b48:	4a2e      	ldr	r2, [pc, #184]	@ (8000c04 <HAL_InitTick+0xd4>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b50:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <HAL_InitTick+0xd4>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 020c 	add.w	r2, r7, #12
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f8e2 	bl	8001d30 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b6c:	f001 f8cc 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8000b70:	4603      	mov	r3, r0
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b78:	4a23      	ldr	r2, [pc, #140]	@ (8000c08 <HAL_InitTick+0xd8>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	3b01      	subs	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000b86:	4a22      	ldr	r2, [pc, #136]	@ (8000c10 <HAL_InitTick+0xe0>)
 8000b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000b8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b92:	4a1e      	ldr	r2, [pc, #120]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000baa:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000bac:	f001 f8f2 	bl	8001d94 <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d11b      	bne.n	8000bf6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bbe:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <HAL_InitTick+0xdc>)
 8000bc0:	f001 f942 	bl	8001e48 <HAL_TIM_Base_Start_IT>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d111      	bne.n	8000bf6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f000 f9d8 	bl	8000f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b0f      	cmp	r3, #15
 8000bdc:	d808      	bhi.n	8000bf0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bde:	2200      	movs	r2, #0
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	2019      	movs	r0, #25
 8000be4:	f000 f9b4 	bl	8000f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e002      	b.n	8000bf6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3730      	adds	r7, #48	@ 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	431bde83 	.word	0x431bde83
 8000c0c:	2000032c 	.word	0x2000032c
 8000c10:	40010000 	.word	0x40010000
 8000c14:	20000004 	.word	0x20000004

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c56:	f001 f967 	bl	8001f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000032c 	.word	0x2000032c

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f001 fc35 	bl	80024d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200002d0 	.word	0x200002d0

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f004 fbc6 	bl	8005438 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	20000374 	.word	0x20000374
 8000ce0:	20004218 	.word	0x20004218

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 fb85 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fc33 	bl	80005a4 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d4c:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 8000d50:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d54:	20004218 	.word	0x20004218

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f8d8 	bl	8000f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f7ff fed0 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe52 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000378 	.word	0x20000378

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000378 	.word	0x20000378

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff4c 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f62:	f7ff ff61 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff ffb1 	bl	8000ed4 <NVIC_EncodePriority>
 8000f72:	4602      	mov	r2, r0
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff80 	bl	8000e80 <__NVIC_SetPriority>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff54 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fb2:	f7ff ff09 	bl	8000dc8 <HAL_GetTick>
 8000fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d008      	beq.n	8000fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e052      	b.n	800107c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0216 	bic.w	r2, r2, #22
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <HAL_DMA_Abort+0x62>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0208 	bic.w	r2, r2, #8
 8001014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001026:	e013      	b.n	8001050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001028:	f7ff fece 	bl	8000dc8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b05      	cmp	r3, #5
 8001034:	d90c      	bls.n	8001050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2220      	movs	r2, #32
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e015      	b.n	800107c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1e4      	bne.n	8001028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001062:	223f      	movs	r2, #63	@ 0x3f
 8001064:	409a      	lsls	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d004      	beq.n	80010a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2280      	movs	r2, #128	@ 0x80
 800109c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00c      	b.n	80010bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2205      	movs	r2, #5
 80010a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e16b      	b.n	80013bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 815a 	bne.w	80013b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	2b02      	cmp	r3, #2
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b03      	cmp	r3, #3
 8001186:	d017      	beq.n	80011b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d123      	bne.n	800120c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	69b9      	ldr	r1, [r7, #24]
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80b4 	beq.w	80013b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b60      	ldr	r3, [pc, #384]	@ (80013d4 <HAL_GPIO_Init+0x30c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	4a5f      	ldr	r2, [pc, #380]	@ (80013d4 <HAL_GPIO_Init+0x30c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125c:	6453      	str	r3, [r2, #68]	@ 0x44
 800125e:	4b5d      	ldr	r3, [pc, #372]	@ (80013d4 <HAL_GPIO_Init+0x30c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a5b      	ldr	r2, [pc, #364]	@ (80013d8 <HAL_GPIO_Init+0x310>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a52      	ldr	r2, [pc, #328]	@ (80013dc <HAL_GPIO_Init+0x314>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d02b      	beq.n	80012ee <HAL_GPIO_Init+0x226>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a51      	ldr	r2, [pc, #324]	@ (80013e0 <HAL_GPIO_Init+0x318>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d025      	beq.n	80012ea <HAL_GPIO_Init+0x222>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a50      	ldr	r2, [pc, #320]	@ (80013e4 <HAL_GPIO_Init+0x31c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01f      	beq.n	80012e6 <HAL_GPIO_Init+0x21e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4f      	ldr	r2, [pc, #316]	@ (80013e8 <HAL_GPIO_Init+0x320>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x21a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4e      	ldr	r2, [pc, #312]	@ (80013ec <HAL_GPIO_Init+0x324>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x216>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4d      	ldr	r2, [pc, #308]	@ (80013f0 <HAL_GPIO_Init+0x328>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x212>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4c      	ldr	r2, [pc, #304]	@ (80013f4 <HAL_GPIO_Init+0x32c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x20e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4b      	ldr	r2, [pc, #300]	@ (80013f8 <HAL_GPIO_Init+0x330>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x20a>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e00e      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012d2:	2308      	movs	r3, #8
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012d6:	2306      	movs	r3, #6
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	@ (80013d8 <HAL_GPIO_Init+0x310>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <HAL_GPIO_Init+0x334>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a32      	ldr	r2, [pc, #200]	@ (80013fc <HAL_GPIO_Init+0x334>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <HAL_GPIO_Init+0x334>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a27      	ldr	r2, [pc, #156]	@ (80013fc <HAL_GPIO_Init+0x334>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <HAL_GPIO_Init+0x334>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <HAL_GPIO_Init+0x334>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_GPIO_Init+0x334>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <HAL_GPIO_Init+0x334>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f ae90 	bls.w	80010e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40021c00 	.word	0x40021c00
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e267      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d075      	beq.n	800150a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800141e:	4b88      	ldr	r3, [pc, #544]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b04      	cmp	r3, #4
 8001428:	d00c      	beq.n	8001444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	4b85      	ldr	r3, [pc, #532]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001432:	2b08      	cmp	r3, #8
 8001434:	d112      	bne.n	800145c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001436:	4b82      	ldr	r3, [pc, #520]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001442:	d10b      	bne.n	800145c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4b7e      	ldr	r3, [pc, #504]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d05b      	beq.n	8001508 <HAL_RCC_OscConfig+0x108>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d157      	bne.n	8001508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e242      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x74>
 8001466:	4b76      	ldr	r3, [pc, #472]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a75      	ldr	r2, [pc, #468]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e01d      	b.n	80014b0 <HAL_RCC_OscConfig+0xb0>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x98>
 800147e:	4b70      	ldr	r3, [pc, #448]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6f      	ldr	r2, [pc, #444]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6c      	ldr	r2, [pc, #432]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0xb0>
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a68      	ldr	r2, [pc, #416]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b66      	ldr	r3, [pc, #408]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a65      	ldr	r2, [pc, #404]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc86 	bl	8000dc8 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fc82 	bl	8000dc8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	@ 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e207      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0xc0>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc72 	bl	8000dc8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fc6e 	bl	8000dc8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1f3      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	4b51      	ldr	r3, [pc, #324]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0xe8>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d063      	beq.n	80015de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b47      	ldr	r3, [pc, #284]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800152a:	2b08      	cmp	r3, #8
 800152c:	d11c      	bne.n	8001568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d116      	bne.n	8001568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_RCC_OscConfig+0x152>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1c7      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4937      	ldr	r1, [pc, #220]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	e03a      	b.n	80015de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001570:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <HAL_RCC_OscConfig+0x244>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fc27 	bl	8000dc8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fc23 	bl	8000dc8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1a8      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4925      	ldr	r1, [pc, #148]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
 80015b0:	e015      	b.n	80015de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <HAL_RCC_OscConfig+0x244>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc06 	bl	8000dc8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc02 	bl	8000dc8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e187      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d036      	beq.n	8001658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d016      	beq.n	8001620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_RCC_OscConfig+0x248>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff fbe6 	bl	8000dc8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff fbe2 	bl	8000dc8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e167      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_RCC_OscConfig+0x240>)
 8001614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x200>
 800161e:	e01b      	b.n	8001658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_RCC_OscConfig+0x248>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fbcf 	bl	8000dc8 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	e00e      	b.n	800164c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fbcb 	bl	8000dc8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d907      	bls.n	800164c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e150      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	42470000 	.word	0x42470000
 8001648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	4b88      	ldr	r3, [pc, #544]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1ea      	bne.n	800162e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8097 	beq.w	8001794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166a:	4b81      	ldr	r3, [pc, #516]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b7d      	ldr	r3, [pc, #500]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a7c      	ldr	r2, [pc, #496]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b7a      	ldr	r3, [pc, #488]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001692:	2301      	movs	r3, #1
 8001694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b77      	ldr	r3, [pc, #476]	@ (8001874 <HAL_RCC_OscConfig+0x474>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4b74      	ldr	r3, [pc, #464]	@ (8001874 <HAL_RCC_OscConfig+0x474>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a73      	ldr	r2, [pc, #460]	@ (8001874 <HAL_RCC_OscConfig+0x474>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb8b 	bl	8000dc8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7ff fb87 	bl	8000dc8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e10c      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <HAL_RCC_OscConfig+0x474>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x2ea>
 80016dc:	4b64      	ldr	r3, [pc, #400]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a63      	ldr	r2, [pc, #396]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x324>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x30c>
 80016f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	4a5b      	ldr	r2, [pc, #364]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6713      	str	r3, [r2, #112]	@ 0x70
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x324>
 800170c:	4b58      	ldr	r3, [pc, #352]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001710:	4a57      	ldr	r2, [pc, #348]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	@ 0x70
 8001718:	4b55      	ldr	r3, [pc, #340]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	4a54      	ldr	r2, [pc, #336]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d015      	beq.n	8001758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff fb4c 	bl	8000dc8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff fb48 	bl	8000dc8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0cb      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	4b49      	ldr	r3, [pc, #292]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0ee      	beq.n	8001734 <HAL_RCC_OscConfig+0x334>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fb36 	bl	8000dc8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fb32 	bl	8000dc8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0b5      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001776:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ee      	bne.n	8001760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	4a38      	ldr	r2, [pc, #224]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a1 	beq.w	80018e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800179e:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d05c      	beq.n	8001864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d141      	bne.n	8001836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <HAL_RCC_OscConfig+0x478>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb06 	bl	8000dc8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fb02 	bl	8000dc8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e087      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	019b      	lsls	r3, r3, #6
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	3b01      	subs	r3, #1
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	491b      	ldr	r1, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x478>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fadb 	bl	8000dc8 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff fad7 	bl	8000dc8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e05c      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x416>
 8001834:	e054      	b.n	80018e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_RCC_OscConfig+0x478>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fac4 	bl	8000dc8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fac0 	bl	8000dc8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e045      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_RCC_OscConfig+0x470>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x444>
 8001862:	e03d      	b.n	80018e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e038      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
 8001870:	40023800 	.word	0x40023800
 8001874:	40007000 	.word	0x40007000
 8001878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x4ec>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d028      	beq.n	80018dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d121      	bne.n	80018dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d11a      	bne.n	80018dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d111      	bne.n	80018dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0cc      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001904:	4b68      	ldr	r3, [pc, #416]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d90c      	bls.n	800192c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b65      	ldr	r3, [pc, #404]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b63      	ldr	r3, [pc, #396]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b8      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001944:	4b59      	ldr	r3, [pc, #356]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a58      	ldr	r2, [pc, #352]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800194e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b50      	ldr	r3, [pc, #320]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	494d      	ldr	r1, [pc, #308]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d044      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d119      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e07f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	4b3f      	ldr	r3, [pc, #252]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e06f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019be:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e067      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ce:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 0203 	bic.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4934      	ldr	r1, [pc, #208]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e0:	f7ff f9f2 	bl	8000dc8 <HAL_GetTick>
 80019e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e8:	f7ff f9ee 	bl	8000dc8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e04f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 020c 	and.w	r2, r3, #12
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1eb      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d20c      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e032      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4916      	ldr	r1, [pc, #88]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490e      	ldr	r1, [pc, #56]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a76:	f000 f821 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	490a      	ldr	r1, [pc, #40]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	5ccb      	ldrb	r3, [r1, r3]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f84a 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08005e90 	.word	0x08005e90
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac0:	b094      	sub	sp, #80	@ 0x50
 8001ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad4:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d00d      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x40>
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	f200 80e1 	bhi.w	8001ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aee:	e0db      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b73      	ldr	r3, [pc, #460]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af4:	e0db      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af6:	4b73      	ldr	r3, [pc, #460]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afa:	e0d8      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afc:	4b6f      	ldr	r3, [pc, #444]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b06:	4b6d      	ldr	r3, [pc, #436]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	4b6a      	ldr	r3, [pc, #424]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	2200      	movs	r2, #0
 8001b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b26:	2300      	movs	r3, #0
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b2e:	4622      	mov	r2, r4
 8001b30:	462b      	mov	r3, r5
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	0159      	lsls	r1, r3, #5
 8001b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b40:	0150      	lsls	r0, r2, #5
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4621      	mov	r1, r4
 8001b48:	1a51      	subs	r1, r2, r1
 8001b4a:	6139      	str	r1, [r7, #16]
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b60:	4659      	mov	r1, fp
 8001b62:	018b      	lsls	r3, r1, #6
 8001b64:	4651      	mov	r1, sl
 8001b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6a:	4651      	mov	r1, sl
 8001b6c:	018a      	lsls	r2, r1, #6
 8001b6e:	4651      	mov	r1, sl
 8001b70:	ebb2 0801 	subs.w	r8, r2, r1
 8001b74:	4659      	mov	r1, fp
 8001b76:	eb63 0901 	sbc.w	r9, r3, r1
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b8e:	4690      	mov	r8, r2
 8001b90:	4699      	mov	r9, r3
 8001b92:	4623      	mov	r3, r4
 8001b94:	eb18 0303 	adds.w	r3, r8, r3
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	eb49 0303 	adc.w	r3, r9, r3
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	024b      	lsls	r3, r1, #9
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb8:	4621      	mov	r1, r4
 8001bba:	024a      	lsls	r2, r1, #9
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bcc:	f7fe fb58 	bl	8000280 <__aeabi_uldivmod>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd8:	e058      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	4611      	mov	r1, r2
 8001be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf4:	4642      	mov	r2, r8
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0159      	lsls	r1, r3, #5
 8001c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c06:	0150      	lsls	r0, r2, #5
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c12:	4649      	mov	r1, r9
 8001c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c30:	eb63 050b 	sbc.w	r5, r3, fp
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	00eb      	lsls	r3, r5, #3
 8001c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c42:	00e2      	lsls	r2, r4, #3
 8001c44:	4614      	mov	r4, r2
 8001c46:	461d      	mov	r5, r3
 8001c48:	4643      	mov	r3, r8
 8001c4a:	18e3      	adds	r3, r4, r3
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	464b      	mov	r3, r9
 8001c50:	eb45 0303 	adc.w	r3, r5, r3
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c62:	4629      	mov	r1, r5
 8001c64:	028b      	lsls	r3, r1, #10
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	028a      	lsls	r2, r1, #10
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	61fa      	str	r2, [r7, #28]
 8001c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c80:	f7fe fafe 	bl	8000280 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	3301      	adds	r3, #1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3750      	adds	r7, #80	@ 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	007a1200 	.word	0x007a1200

08001cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0a9b      	lsrs	r3, r3, #10
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	@ (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	08005ea0 	.word	0x08005ea0

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d0c:	f7ff ffdc 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0b5b      	lsrs	r3, r3, #13
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	@ (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08005ea0 	.word	0x08005ea0

08001d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <HAL_RCC_GetClockConfig+0x60>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0207 	and.w	r2, r3, #7
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f839 	bl	8001e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f9c0 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d001      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e04e      	b.n	8001efe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1b      	ldr	r2, [pc, #108]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d010      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	e007      	b.n	8001efc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40010400 	.word	0x40010400
 8001f20:	40014000 	.word	0x40014000
 8001f24:	40001800 	.word	0x40001800

08001f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d020      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8d2 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8c4 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8d5 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0204 	mvn.w	r2, #4
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8ac 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f89e 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8af 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f886 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f878 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f889 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d020      	beq.n	8002070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01b      	beq.n	8002070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f860 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f852 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f863 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0201 	mvn.w	r2, #1
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fcba 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f906 	bl	80022c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f834 	bl	8002144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8d8 	bl	80022b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a46      	ldr	r2, [pc, #280]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a43      	ldr	r2, [pc, #268]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a42      	ldr	r2, [pc, #264]	@ (800228c <TIM_Base_SetConfig+0x134>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a41      	ldr	r2, [pc, #260]	@ (8002290 <TIM_Base_SetConfig+0x138>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a35      	ldr	r2, [pc, #212]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a32      	ldr	r2, [pc, #200]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a31      	ldr	r2, [pc, #196]	@ (800228c <TIM_Base_SetConfig+0x134>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <TIM_Base_SetConfig+0x138>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002298 <TIM_Base_SetConfig+0x140>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2d      	ldr	r2, [pc, #180]	@ (800229c <TIM_Base_SetConfig+0x144>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <TIM_Base_SetConfig+0x148>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <TIM_Base_SetConfig+0x14c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <TIM_Base_SetConfig+0x150>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <TIM_Base_SetConfig+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a10      	ldr	r2, [pc, #64]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f023 0201 	bic.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
  }
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40010400 	.word	0x40010400
 8002298:	40014000 	.word	0x40014000
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800
 80022a4:	40001800 	.word	0x40001800
 80022a8:	40001c00 	.word	0x40001c00
 80022ac:	40002000 	.word	0x40002000

080022b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e042      	b.n	8002370 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fbc6 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	@ 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800231a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fdbd 	bl	8002e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	@ 0x28
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	d175      	bne.n	8002484 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_UART_Transmit+0x2c>
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e06e      	b.n	8002486 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2221      	movs	r2, #33	@ 0x21
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b6:	f7fe fd07 	bl	8000dc8 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	88fa      	ldrh	r2, [r7, #6]
 80023c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d0:	d108      	bne.n	80023e4 <HAL_UART_Transmit+0x6c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e003      	b.n	80023ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023ec:	e02e      	b.n	800244c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	@ 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fb1f 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e03a      	b.n	8002486 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	3302      	adds	r3, #2
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e007      	b.n	800243e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1cb      	bne.n	80023ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	@ 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 faeb 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e006      	b.n	8002486 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d112      	bne.n	80024ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Receive_IT+0x26>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e00b      	b.n	80024d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	461a      	mov	r2, r3
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fb12 	bl	8002aee <UART_Start_Receive_IT>
 80024ca:	4603      	mov	r3, r0
 80024cc:	e000      	b.n	80024d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0ba      	sub	sp, #232	@ 0xe8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_UART_IRQHandler+0x66>
 800252a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fbf2 	bl	8002d20 <UART_Receive_IT>
      return;
 800253c:	e25b      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800253e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80de 	beq.w	8002704 <HAL_UART_IRQHandler+0x22c>
 8002548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80d1 	beq.w	8002704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_UART_IRQHandler+0xae>
 800256e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_UART_IRQHandler+0xd2>
 8002592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_UART_IRQHandler+0xf6>
 80025b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d011      	beq.n	80025fe <HAL_UART_IRQHandler+0x126>
 80025da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f043 0208 	orr.w	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 81f2 	beq.w	80029ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_UART_IRQHandler+0x14e>
 8002614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fb7d 	bl	8002d20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b40      	cmp	r3, #64	@ 0x40
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_UART_IRQHandler+0x17a>
 800264a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04f      	beq.n	80026f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa85 	bl	8002b62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	d141      	bne.n	80026ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3314      	adds	r3, #20
 800268e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800269e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1d9      	bne.n	8002666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d013      	beq.n	80026e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026be:	4a7e      	ldr	r2, [pc, #504]	@ (80028b8 <HAL_UART_IRQHandler+0x3e0>)
 80026c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fcdc 	bl	8001084 <HAL_DMA_Abort_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00e      	b.n	8002700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f994 	bl	8002a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e00a      	b.n	8002700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f990 	bl	8002a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e006      	b.n	8002700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f98c 	bl	8002a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026fe:	e175      	b.n	80029ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	bf00      	nop
    return;
 8002702:	e173      	b.n	80029ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	2b01      	cmp	r3, #1
 800270a:	f040 814f 	bne.w	80029ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8148 	beq.w	80029ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800271c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8141 	beq.w	80029ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274a:	2b40      	cmp	r3, #64	@ 0x40
 800274c:	f040 80b6 	bne.w	80028bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800275c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8145 	beq.w	80029f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800276e:	429a      	cmp	r2, r3
 8002770:	f080 813e 	bcs.w	80029f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800277a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002786:	f000 8088 	beq.w	800289a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1d9      	bne.n	800278a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3314      	adds	r3, #20
 80027f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800280c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e1      	bne.n	80027d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800283c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e3      	bne.n	8002812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800286a:	f023 0310 	bic.w	r3, r3, #16
 800286e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800287c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800287e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800288a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e3      	bne.n	8002858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fb85 	bl	8000fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8b7 	bl	8002a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028b6:	e09b      	b.n	80029f0 <HAL_UART_IRQHandler+0x518>
 80028b8:	08002c29 	.word	0x08002c29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 808e 	beq.w	80029f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8089 	beq.w	80029f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002906:	647a      	str	r2, [r7, #68]	@ 0x44
 8002908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800290c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e3      	bne.n	80028e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	623b      	str	r3, [r7, #32]
   return(result);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800293e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e3      	bne.n	800291a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0310 	bic.w	r3, r3, #16
 8002976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002984:	61fa      	str	r2, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	69b9      	ldr	r1, [r7, #24]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	e841 2300 	strex	r3, r2, [r1]
 8002990:	617b      	str	r3, [r7, #20]
   return(result);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e3      	bne.n	8002960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800299e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f83d 	bl	8002a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029aa:	e023      	b.n	80029f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_UART_IRQHandler+0x4f4>
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f943 	bl	8002c50 <UART_Transmit_IT>
    return;
 80029ca:	e014      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <HAL_UART_IRQHandler+0x51e>
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f983 	bl	8002cf0 <UART_EndTransmit_IT>
    return;
 80029ea:	e004      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029ec:	bf00      	nop
 80029ee:	e002      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029f4:	bf00      	nop
  }
}
 80029f6:	37e8      	adds	r7, #232	@ 0xe8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4c:	e03b      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d037      	beq.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a56:	f7fe f9b7 	bl	8000dc8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	6a3a      	ldr	r2, [r7, #32]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d302      	bcc.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03a      	b.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d023      	beq.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b80      	cmp	r3, #128	@ 0x80
 8002a82:	d020      	beq.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	d01d      	beq.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d116      	bne.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f857 	bl	8002b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d0b4      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2222      	movs	r2, #34	@ 0x22
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b095      	sub	sp, #84	@ 0x54
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e5      	bne.n	8002b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e5      	bne.n	8002b9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d119      	bne.n	8002c0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f023 0310 	bic.w	r3, r3, #16
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bfa:	61ba      	str	r2, [r7, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	613b      	str	r3, [r7, #16]
   return(result);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e5      	bne.n	8002bda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c1c:	bf00      	nop
 8002c1e:	3754      	adds	r7, #84	@ 0x54
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff fee4 	bl	8002a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b21      	cmp	r3, #33	@ 0x21
 8002c62:	d13e      	bne.n	8002ce2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6c:	d114      	bne.n	8002c98 <UART_Transmit_IT+0x48>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d110      	bne.n	8002c98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]
 8002c96:	e008      	b.n	8002caa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	1c59      	adds	r1, r3, #1
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6211      	str	r1, [r2, #32]
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10f      	bne.n	8002cde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fe73 	bl	80029fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	@ 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b22      	cmp	r3, #34	@ 0x22
 8002d32:	f040 80ae 	bne.w	8002e92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3e:	d117      	bne.n	8002d70 <UART_Receive_IT+0x50>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d113      	bne.n	8002d70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d6e:	e026      	b.n	8002dbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d82:	d007      	beq.n	8002d94 <UART_Receive_IT+0x74>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <UART_Receive_IT+0x82>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e008      	b.n	8002db4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d15d      	bne.n	8002e8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0220 	bic.w	r2, r2, #32
 8002de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d135      	bne.n	8002e84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f023 0310 	bic.w	r3, r3, #16
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3e:	623a      	str	r2, [r7, #32]
 8002e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	69f9      	ldr	r1, [r7, #28]
 8002e44:	6a3a      	ldr	r2, [r7, #32]
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e5      	bne.n	8002e1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d10a      	bne.n	8002e76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fdd1 	bl	8002a24 <HAL_UARTEx_RxEventCallback>
 8002e82:	e002      	b.n	8002e8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fd fd83 	bl	8000990 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e002      	b.n	8002e94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
  }
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3730      	adds	r7, #48	@ 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea0:	b0c0      	sub	sp, #256	@ 0x100
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb8:	68d9      	ldr	r1, [r3, #12]
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	ea40 0301 	orr.w	r3, r0, r1
 8002ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ef4:	f021 010c 	bic.w	r1, r1, #12
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f02:	430b      	orrs	r3, r1
 8002f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f16:	6999      	ldr	r1, [r3, #24]
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	ea40 0301 	orr.w	r3, r0, r1
 8002f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b8f      	ldr	r3, [pc, #572]	@ (8003168 <UART_SetConfig+0x2cc>)
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d005      	beq.n	8002f3c <UART_SetConfig+0xa0>
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b8d      	ldr	r3, [pc, #564]	@ (800316c <UART_SetConfig+0x2d0>)
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d104      	bne.n	8002f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f3c:	f7fe fee4 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002f40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f44:	e003      	b.n	8002f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f46:	f7fe fecb 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f58:	f040 810c 	bne.w	8003174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f6e:	4622      	mov	r2, r4
 8002f70:	462b      	mov	r3, r5
 8002f72:	1891      	adds	r1, r2, r2
 8002f74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f76:	415b      	adcs	r3, r3
 8002f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f7e:	4621      	mov	r1, r4
 8002f80:	eb12 0801 	adds.w	r8, r2, r1
 8002f84:	4629      	mov	r1, r5
 8002f86:	eb43 0901 	adc.w	r9, r3, r1
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9e:	4690      	mov	r8, r2
 8002fa0:	4699      	mov	r9, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	eb18 0303 	adds.w	r3, r8, r3
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fac:	462b      	mov	r3, r5
 8002fae:	eb49 0303 	adc.w	r3, r9, r3
 8002fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fca:	460b      	mov	r3, r1
 8002fcc:	18db      	adds	r3, r3, r3
 8002fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	eb42 0303 	adc.w	r3, r2, r3
 8002fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fe0:	f7fd f94e 	bl	8000280 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4b61      	ldr	r3, [pc, #388]	@ (8003170 <UART_SetConfig+0x2d4>)
 8002fea:	fba3 2302 	umull	r2, r3, r3, r2
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	011c      	lsls	r4, r3, #4
 8002ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	1891      	adds	r1, r2, r2
 800300a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800300c:	415b      	adcs	r3, r3
 800300e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003014:	4641      	mov	r1, r8
 8003016:	eb12 0a01 	adds.w	sl, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb43 0b01 	adc.w	fp, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800302c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003034:	4692      	mov	sl, r2
 8003036:	469b      	mov	fp, r3
 8003038:	4643      	mov	r3, r8
 800303a:	eb1a 0303 	adds.w	r3, sl, r3
 800303e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003042:	464b      	mov	r3, r9
 8003044:	eb4b 0303 	adc.w	r3, fp, r3
 8003048:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003058:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800305c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003060:	460b      	mov	r3, r1
 8003062:	18db      	adds	r3, r3, r3
 8003064:	643b      	str	r3, [r7, #64]	@ 0x40
 8003066:	4613      	mov	r3, r2
 8003068:	eb42 0303 	adc.w	r3, r2, r3
 800306c:	647b      	str	r3, [r7, #68]	@ 0x44
 800306e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003076:	f7fd f903 	bl	8000280 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4611      	mov	r1, r2
 8003080:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <UART_SetConfig+0x2d4>)
 8003082:	fba3 2301 	umull	r2, r3, r3, r1
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2264      	movs	r2, #100	@ 0x64
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	1acb      	subs	r3, r1, r3
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003096:	4b36      	ldr	r3, [pc, #216]	@ (8003170 <UART_SetConfig+0x2d4>)
 8003098:	fba3 2302 	umull	r2, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030a4:	441c      	add	r4, r3
 80030a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	1891      	adds	r1, r2, r2
 80030be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030c0:	415b      	adcs	r3, r3
 80030c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030c8:	4641      	mov	r1, r8
 80030ca:	1851      	adds	r1, r2, r1
 80030cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80030ce:	4649      	mov	r1, r9
 80030d0:	414b      	adcs	r3, r1
 80030d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030e0:	4659      	mov	r1, fp
 80030e2:	00cb      	lsls	r3, r1, #3
 80030e4:	4651      	mov	r1, sl
 80030e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ea:	4651      	mov	r1, sl
 80030ec:	00ca      	lsls	r2, r1, #3
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	4642      	mov	r2, r8
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030fc:	464b      	mov	r3, r9
 80030fe:	460a      	mov	r2, r1
 8003100:	eb42 0303 	adc.w	r3, r2, r3
 8003104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003114:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800311c:	460b      	mov	r3, r1
 800311e:	18db      	adds	r3, r3, r3
 8003120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003122:	4613      	mov	r3, r2
 8003124:	eb42 0303 	adc.w	r3, r2, r3
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800312e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003132:	f7fd f8a5 	bl	8000280 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <UART_SetConfig+0x2d4>)
 800313c:	fba3 1302 	umull	r1, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2164      	movs	r1, #100	@ 0x64
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	3332      	adds	r3, #50	@ 0x32
 800314e:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <UART_SetConfig+0x2d4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 0207 	and.w	r2, r3, #7
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4422      	add	r2, r4
 8003162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003164:	e106      	b.n	8003374 <UART_SetConfig+0x4d8>
 8003166:	bf00      	nop
 8003168:	40011000 	.word	0x40011000
 800316c:	40011400 	.word	0x40011400
 8003170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800317e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003186:	4642      	mov	r2, r8
 8003188:	464b      	mov	r3, r9
 800318a:	1891      	adds	r1, r2, r2
 800318c:	6239      	str	r1, [r7, #32]
 800318e:	415b      	adcs	r3, r3
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
 8003192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003196:	4641      	mov	r1, r8
 8003198:	1854      	adds	r4, r2, r1
 800319a:	4649      	mov	r1, r9
 800319c:	eb43 0501 	adc.w	r5, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	00eb      	lsls	r3, r5, #3
 80031aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ae:	00e2      	lsls	r2, r4, #3
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	4643      	mov	r3, r8
 80031b6:	18e3      	adds	r3, r4, r3
 80031b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031bc:	464b      	mov	r3, r9
 80031be:	eb45 0303 	adc.w	r3, r5, r3
 80031c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031e2:	4629      	mov	r1, r5
 80031e4:	008b      	lsls	r3, r1, #2
 80031e6:	4621      	mov	r1, r4
 80031e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ec:	4621      	mov	r1, r4
 80031ee:	008a      	lsls	r2, r1, #2
 80031f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031f4:	f7fd f844 	bl	8000280 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4b60      	ldr	r3, [pc, #384]	@ (8003380 <UART_SetConfig+0x4e4>)
 80031fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	011c      	lsls	r4, r3, #4
 8003206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003210:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	1891      	adds	r1, r2, r2
 800321e:	61b9      	str	r1, [r7, #24]
 8003220:	415b      	adcs	r3, r3
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003228:	4641      	mov	r1, r8
 800322a:	1851      	adds	r1, r2, r1
 800322c:	6139      	str	r1, [r7, #16]
 800322e:	4649      	mov	r1, r9
 8003230:	414b      	adcs	r3, r1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003240:	4659      	mov	r1, fp
 8003242:	00cb      	lsls	r3, r1, #3
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324a:	4651      	mov	r1, sl
 800324c:	00ca      	lsls	r2, r1, #3
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	4603      	mov	r3, r0
 8003254:	4642      	mov	r2, r8
 8003256:	189b      	adds	r3, r3, r2
 8003258:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800325c:	464b      	mov	r3, r9
 800325e:	460a      	mov	r2, r1
 8003260:	eb42 0303 	adc.w	r3, r2, r3
 8003264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003272:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003280:	4649      	mov	r1, r9
 8003282:	008b      	lsls	r3, r1, #2
 8003284:	4641      	mov	r1, r8
 8003286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328a:	4641      	mov	r1, r8
 800328c:	008a      	lsls	r2, r1, #2
 800328e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003292:	f7fc fff5 	bl	8000280 <__aeabi_uldivmod>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4611      	mov	r1, r2
 800329c:	4b38      	ldr	r3, [pc, #224]	@ (8003380 <UART_SetConfig+0x4e4>)
 800329e:	fba3 2301 	umull	r2, r3, r3, r1
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2264      	movs	r2, #100	@ 0x64
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	1acb      	subs	r3, r1, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	@ 0x32
 80032b0:	4a33      	ldr	r2, [pc, #204]	@ (8003380 <UART_SetConfig+0x4e4>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032bc:	441c      	add	r4, r3
 80032be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c2:	2200      	movs	r2, #0
 80032c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80032c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80032c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	415b      	adcs	r3, r3
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032dc:	4641      	mov	r1, r8
 80032de:	1851      	adds	r1, r2, r1
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	4649      	mov	r1, r9
 80032e4:	414b      	adcs	r3, r1
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032f4:	4659      	mov	r1, fp
 80032f6:	00cb      	lsls	r3, r1, #3
 80032f8:	4651      	mov	r1, sl
 80032fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fe:	4651      	mov	r1, sl
 8003300:	00ca      	lsls	r2, r1, #3
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	4603      	mov	r3, r0
 8003308:	4642      	mov	r2, r8
 800330a:	189b      	adds	r3, r3, r2
 800330c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800330e:	464b      	mov	r3, r9
 8003310:	460a      	mov	r2, r1
 8003312:	eb42 0303 	adc.w	r3, r2, r3
 8003316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	663b      	str	r3, [r7, #96]	@ 0x60
 8003322:	667a      	str	r2, [r7, #100]	@ 0x64
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003330:	4649      	mov	r1, r9
 8003332:	008b      	lsls	r3, r1, #2
 8003334:	4641      	mov	r1, r8
 8003336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333a:	4641      	mov	r1, r8
 800333c:	008a      	lsls	r2, r1, #2
 800333e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003342:	f7fc ff9d 	bl	8000280 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4b0d      	ldr	r3, [pc, #52]	@ (8003380 <UART_SetConfig+0x4e4>)
 800334c:	fba3 1302 	umull	r1, r3, r3, r2
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	2164      	movs	r1, #100	@ 0x64
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	3332      	adds	r3, #50	@ 0x32
 800335e:	4a08      	ldr	r2, [pc, #32]	@ (8003380 <UART_SetConfig+0x4e4>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4422      	add	r2, r4
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800337a:	46bd      	mov	sp, r7
 800337c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003380:	51eb851f 	.word	0x51eb851f

08003384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f103 0208 	add.w	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e00c      	b.n	8003460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3308      	adds	r3, #8
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <vListInsert+0x2e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d2f6      	bcs.n	800344e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003518:	f001 fc56 	bl	8004dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	3b01      	subs	r3, #1
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	441a      	add	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	22ff      	movs	r2, #255	@ 0xff
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f001 f824 	bl	80045c8 <xTaskRemoveFromEventList>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <xQueueGenericReset+0xd0>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e009      	b.n	80035ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3310      	adds	r3, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fef1 	bl	8003384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3324      	adds	r3, #36	@ 0x24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff feec 	bl	8003384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035ac:	f001 fc3e 	bl	8004e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericCreate+0x2c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	613b      	str	r3, [r7, #16]
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3348      	adds	r3, #72	@ 0x48
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fd06 	bl	800500c <pvPortMalloc>
 8003600:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d011      	beq.n	800362c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3348      	adds	r3, #72	@ 0x48
 8003610:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800361a:	79fa      	ldrb	r2, [r7, #7]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f805 	bl	8003636 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800362c:	69bb      	ldr	r3, [r7, #24]
	}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e002      	b.n	8003658 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003664:	2101      	movs	r1, #1
 8003666:	69b8      	ldr	r0, [r7, #24]
 8003668:	f7ff ff40 	bl	80034ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	@ 0x38
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <xQueueGenericSend+0x34>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <xQueueGenericSend+0x42>
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <xQueueGenericSend+0x46>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueGenericSend+0x48>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <xQueueGenericSend+0x64>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <xQueueGenericSend+0x72>
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <xQueueGenericSend+0x76>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <xQueueGenericSend+0x78>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <xQueueGenericSend+0x94>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	623b      	str	r3, [r7, #32]
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003708:	f001 f91e 	bl	8004948 <xTaskGetSchedulerState>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <xQueueGenericSend+0xa4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <xQueueGenericSend+0xa8>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <xQueueGenericSend+0xaa>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <xQueueGenericSend+0xc6>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	61fb      	str	r3, [r7, #28]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800373a:	f001 fb45 	bl	8004dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <xQueueGenericSend+0xdc>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d129      	bne.n	80037a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003756:	f000 fa0f 	bl	8003b78 <prvCopyDataToQueue>
 800375a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	3324      	adds	r3, #36	@ 0x24
 8003768:	4618      	mov	r0, r3
 800376a:	f000 ff2d 	bl	80045c8 <xTaskRemoveFromEventList>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003774:	4b3f      	ldr	r3, [pc, #252]	@ (8003874 <xQueueGenericSend+0x200>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	e00a      	b.n	800379c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800378c:	4b39      	ldr	r3, [pc, #228]	@ (8003874 <xQueueGenericSend+0x200>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800379c:	f001 fb46 	bl	8004e2c <vPortExitCritical>
				return pdPASS;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e063      	b.n	800386c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037aa:	f001 fb3f 	bl	8004e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e05c      	b.n	800386c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 ff67 	bl	8004690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c6:	f001 fb31 	bl	8004e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037ca:	f000 fd15 	bl	80041f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ce:	f001 fafb 	bl	8004dc8 <vPortEnterCritical>
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d103      	bne.n	80037e8 <xQueueGenericSend+0x174>
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ee:	b25b      	sxtb	r3, r3
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSend+0x18a>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037fe:	f001 fb15 	bl	8004e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003802:	1d3a      	adds	r2, r7, #4
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f000 ff56 	bl	80046bc <xTaskCheckForTimeOut>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d124      	bne.n	8003860 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003818:	f000 faa6 	bl	8003d68 <prvIsQueueFull>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d018      	beq.n	8003854 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	3310      	adds	r3, #16
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fea6 	bl	800457c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003832:	f000 fa31 	bl	8003c98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003836:	f000 fced 	bl	8004214 <xTaskResumeAll>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f af7c 	bne.w	800373a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003842:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <xQueueGenericSend+0x200>)
 8003844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	e772      	b.n	800373a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003856:	f000 fa1f 	bl	8003c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800385a:	f000 fcdb 	bl	8004214 <xTaskResumeAll>
 800385e:	e76c      	b.n	800373a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003862:	f000 fa19 	bl	8003c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003866:	f000 fcd5 	bl	8004214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800386a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800386c:	4618      	mov	r0, r3
 800386e:	3738      	adds	r7, #56	@ 0x38
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b090      	sub	sp, #64	@ 0x40
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <xQueueGenericSendFromISR+0x3e>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <xQueueGenericSendFromISR+0x42>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <xQueueGenericSendFromISR+0x44>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d103      	bne.n	80038e6 <xQueueGenericSendFromISR+0x6e>
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <xQueueGenericSendFromISR+0x72>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xQueueGenericSendFromISR+0x74>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	623b      	str	r3, [r7, #32]
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003908:	f001 fb3e 	bl	8004f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800390c:	f3ef 8211 	mrs	r2, BASEPRI
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	61fa      	str	r2, [r7, #28]
 8003922:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003924:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	429a      	cmp	r2, r3
 8003932:	d302      	bcc.n	800393a <xQueueGenericSendFromISR+0xc2>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d12f      	bne.n	800399a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003950:	f000 f912 	bl	8003b78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003954:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d112      	bne.n	8003984 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	3324      	adds	r3, #36	@ 0x24
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fe2c 	bl	80045c8 <xTaskRemoveFromEventList>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e007      	b.n	8003994 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003988:	3301      	adds	r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	b25a      	sxtb	r2, r3
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003994:	2301      	movs	r3, #1
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003998:	e001      	b.n	800399e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800399a:	2300      	movs	r3, #0
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3740      	adds	r7, #64	@ 0x40
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	@ 0x30
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10b      	bne.n	80039e6 <xQueueReceive+0x32>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	623b      	str	r3, [r7, #32]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <xQueueReceive+0x40>
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <xQueueReceive+0x44>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <xQueueReceive+0x46>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <xQueueReceive+0x62>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	61fb      	str	r3, [r7, #28]
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	e7fd      	b.n	8003a12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a16:	f000 ff97 	bl	8004948 <xTaskGetSchedulerState>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <xQueueReceive+0x72>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <xQueueReceive+0x76>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <xQueueReceive+0x78>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <xQueueReceive+0x94>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	61bb      	str	r3, [r7, #24]
}
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a48:	f001 f9be 	bl	8004dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01f      	beq.n	8003a98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a5c:	f000 f8f6 	bl	8003c4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00f      	beq.n	8003a90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	3310      	adds	r3, #16
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fda7 	bl	80045c8 <xTaskRemoveFromEventList>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a80:	4b3c      	ldr	r3, [pc, #240]	@ (8003b74 <xQueueReceive+0x1c0>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a90:	f001 f9cc 	bl	8004e2c <vPortExitCritical>
				return pdPASS;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e069      	b.n	8003b6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a9e:	f001 f9c5 	bl	8004e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e062      	b.n	8003b6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fded 	bl	8004690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aba:	f001 f9b7 	bl	8004e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003abe:	f000 fb9b 	bl	80041f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ac2:	f001 f981 	bl	8004dc8 <vPortEnterCritical>
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d103      	bne.n	8003adc <xQueueReceive+0x128>
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d103      	bne.n	8003af2 <xQueueReceive+0x13e>
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003af2:	f001 f99b 	bl	8004e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003af6:	1d3a      	adds	r2, r7, #4
 8003af8:	f107 0310 	add.w	r3, r7, #16
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fddc 	bl	80046bc <xTaskCheckForTimeOut>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d123      	bne.n	8003b52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b0c:	f000 f916 	bl	8003d3c <prvIsQueueEmpty>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d017      	beq.n	8003b46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	3324      	adds	r3, #36	@ 0x24
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fd2c 	bl	800457c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b26:	f000 f8b7 	bl	8003c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b2a:	f000 fb73 	bl	8004214 <xTaskResumeAll>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d189      	bne.n	8003a48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b34:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <xQueueReceive+0x1c0>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	e780      	b.n	8003a48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b48:	f000 f8a6 	bl	8003c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b4c:	f000 fb62 	bl	8004214 <xTaskResumeAll>
 8003b50:	e77a      	b.n	8003a48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b54:	f000 f8a0 	bl	8003c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b58:	f000 fb5c 	bl	8004214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b5e:	f000 f8ed 	bl	8003d3c <prvIsQueueEmpty>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f43f af6f 	beq.w	8003a48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3730      	adds	r7, #48	@ 0x30
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d14d      	bne.n	8003c3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 feee 	bl	8004984 <xTaskPriorityDisinherit>
 8003ba8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e043      	b.n	8003c3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d119      	bne.n	8003bec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6858      	ldr	r0, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	f001 fc64 	bl	8005490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d32b      	bcc.n	8003c3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	e026      	b.n	8003c3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68d8      	ldr	r0, [r3, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	f001 fc4a 	bl	8005490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	425b      	negs	r3, r3
 8003c06:	441a      	add	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d207      	bcs.n	8003c28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	425b      	negs	r3, r3
 8003c22:	441a      	add	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d105      	bne.n	8003c3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c42:	697b      	ldr	r3, [r7, #20]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	441a      	add	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d303      	bcc.n	8003c80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68d9      	ldr	r1, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6838      	ldr	r0, [r7, #0]
 8003c8c:	f001 fc00 	bl	8005490 <memcpy>
	}
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ca0:	f001 f892 	bl	8004dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003caa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cac:	e011      	b.n	8003cd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3324      	adds	r3, #36	@ 0x24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fc84 	bl	80045c8 <xTaskRemoveFromEventList>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cc6:	f000 fd5d 	bl	8004784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	dce9      	bgt.n	8003cae <prvUnlockQueue+0x16>
 8003cda:	e000      	b.n	8003cde <prvUnlockQueue+0x46>
					break;
 8003cdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	22ff      	movs	r2, #255	@ 0xff
 8003ce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ce6:	f001 f8a1 	bl	8004e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cea:	f001 f86d 	bl	8004dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cf6:	e011      	b.n	8003d1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3310      	adds	r3, #16
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fc5f 	bl	80045c8 <xTaskRemoveFromEventList>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d10:	f000 fd38 	bl	8004784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d14:	7bbb      	ldrb	r3, [r7, #14]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	dce9      	bgt.n	8003cf8 <prvUnlockQueue+0x60>
 8003d24:	e000      	b.n	8003d28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	22ff      	movs	r2, #255	@ 0xff
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d30:	f001 f87c 	bl	8004e2c <vPortExitCritical>
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d44:	f001 f840 	bl	8004dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e001      	b.n	8003d5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d5a:	f001 f867 	bl	8004e2c <vPortExitCritical>

	return xReturn;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d70:	f001 f82a 	bl	8004dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d102      	bne.n	8003d86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e001      	b.n	8003d8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d8a:	f001 f84f 	bl	8004e2c <vPortExitCritical>

	return xReturn;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	@ 0x38
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61fb      	str	r3, [r7, #28]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de2:	2354      	movs	r3, #84	@ 0x54
 8003de4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b54      	cmp	r3, #84	@ 0x54
 8003dea:	d00b      	beq.n	8003e04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01e      	beq.n	8003e4a <xTaskCreateStatic+0xb2>
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01b      	beq.n	8003e4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e24:	2300      	movs	r3, #0
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f850 	bl	8003ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e44:	f000 f8d6 	bl	8003ff4 <prvAddNewTaskToReadyList>
 8003e48:	e001      	b.n	8003e4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e4e:	697b      	ldr	r3, [r7, #20]
	}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3728      	adds	r7, #40	@ 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af04      	add	r7, sp, #16
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 f8cd 	bl	800500c <pvPortMalloc>
 8003e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e7a:	2054      	movs	r0, #84	@ 0x54
 8003e7c:	f001 f8c6 	bl	800500c <pvPortMalloc>
 8003e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e8e:	e005      	b.n	8003e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f001 f989 	bl	80051a8 <vPortFree>
 8003e96:	e001      	b.n	8003e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d017      	beq.n	8003ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f80e 	bl	8003ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec6:	69f8      	ldr	r0, [r7, #28]
 8003ec8:	f000 f894 	bl	8003ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e002      	b.n	8003ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b088      	sub	sp, #32
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003efa:	3b01      	subs	r3, #1
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f023 0307 	bic.w	r3, r3, #7
 8003f08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	617b      	str	r3, [r7, #20]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01f      	beq.n	8003f72 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e012      	b.n	8003f5e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	7819      	ldrb	r1, [r3, #0]
 8003f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	3334      	adds	r3, #52	@ 0x34
 8003f48:	460a      	mov	r2, r1
 8003f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	4413      	add	r3, r2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d9e9      	bls.n	8003f38 <prvInitialiseNewTask+0x56>
 8003f64:	e000      	b.n	8003f68 <prvInitialiseNewTask+0x86>
			{
				break;
 8003f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f70:	e003      	b.n	8003f7a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	d901      	bls.n	8003f84 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f80:	2306      	movs	r3, #6
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f88:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	2200      	movs	r2, #0
 8003f94:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fa12 	bl	80033c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fa0d 	bl	80033c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	f1c3 0207 	rsb	r2, r3, #7
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	69b8      	ldr	r0, [r7, #24]
 8003fd4:	f000 fdc4 	bl	8004b60 <pxPortInitialiseStack>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fea:	bf00      	nop
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ffc:	f000 fee4 	bl	8004dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004000:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <prvAddNewTaskToReadyList+0xb8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	4a29      	ldr	r2, [pc, #164]	@ (80040ac <prvAddNewTaskToReadyList+0xb8>)
 8004008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800400a:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <prvAddNewTaskToReadyList+0xbc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004012:	4a27      	ldr	r2, [pc, #156]	@ (80040b0 <prvAddNewTaskToReadyList+0xbc>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004018:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <prvAddNewTaskToReadyList+0xb8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d110      	bne.n	8004042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004020:	f000 fbd4 	bl	80047cc <prvInitialiseTaskLists>
 8004024:	e00d      	b.n	8004042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004026:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <prvAddNewTaskToReadyList+0xc0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <prvAddNewTaskToReadyList+0xbc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	429a      	cmp	r2, r3
 800403a:	d802      	bhi.n	8004042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800403c:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <prvAddNewTaskToReadyList+0xbc>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004042:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <prvAddNewTaskToReadyList+0xc4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <prvAddNewTaskToReadyList+0xc4>)
 800404a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <prvAddNewTaskToReadyList+0xc8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4313      	orrs	r3, r2
 800405a:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <prvAddNewTaskToReadyList+0xc8>)
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <prvAddNewTaskToReadyList+0xcc>)
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7ff f9b2 	bl	80033de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800407a:	f000 fed7 	bl	8004e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <prvAddNewTaskToReadyList+0xc0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00e      	beq.n	80040a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004086:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <prvAddNewTaskToReadyList+0xbc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	429a      	cmp	r2, r3
 8004092:	d207      	bcs.n	80040a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <prvAddNewTaskToReadyList+0xd0>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2000047c 	.word	0x2000047c
 80040b0:	2000037c 	.word	0x2000037c
 80040b4:	20000488 	.word	0x20000488
 80040b8:	20000498 	.word	0x20000498
 80040bc:	20000484 	.word	0x20000484
 80040c0:	20000380 	.word	0x20000380
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d018      	beq.n	800410c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <vTaskDelay+0x64>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <vTaskDelay+0x32>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	60bb      	str	r3, [r7, #8]
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	e7fd      	b.n	80040f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040fa:	f000 f87d 	bl	80041f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040fe:	2100      	movs	r1, #0
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fcc7 	bl	8004a94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004106:	f000 f885 	bl	8004214 <xTaskResumeAll>
 800410a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d107      	bne.n	8004122 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <vTaskDelay+0x68>)
 8004114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200004a4 	.word	0x200004a4
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004142:	463a      	mov	r2, r7
 8004144:	1d39      	adds	r1, r7, #4
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fa10 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	9202      	str	r2, [sp, #8]
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	2300      	movs	r3, #0
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	460a      	mov	r2, r1
 8004162:	491f      	ldr	r1, [pc, #124]	@ (80041e0 <vTaskStartScheduler+0xac>)
 8004164:	481f      	ldr	r0, [pc, #124]	@ (80041e4 <vTaskStartScheduler+0xb0>)
 8004166:	f7ff fe17 	bl	8003d98 <xTaskCreateStatic>
 800416a:	4603      	mov	r3, r0
 800416c:	4a1e      	ldr	r2, [pc, #120]	@ (80041e8 <vTaskStartScheduler+0xb4>)
 800416e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004170:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <vTaskStartScheduler+0xb4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004178:	2301      	movs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e001      	b.n	8004182 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d116      	bne.n	80041b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	613b      	str	r3, [r7, #16]
}
 800419a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800419c:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <vTaskStartScheduler+0xb8>)
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041a4:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <vTaskStartScheduler+0xbc>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041aa:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <vTaskStartScheduler+0xc0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041b0:	f000 fd66 	bl	8004c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041b4:	e00f      	b.n	80041d6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d10b      	bne.n	80041d6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60fb      	str	r3, [r7, #12]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <vTaskStartScheduler+0x9e>
}
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	08005e88 	.word	0x08005e88
 80041e4:	0800479d 	.word	0x0800479d
 80041e8:	200004a0 	.word	0x200004a0
 80041ec:	2000049c 	.word	0x2000049c
 80041f0:	20000488 	.word	0x20000488
 80041f4:	20000480 	.word	0x20000480

080041f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041fc:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <vTaskSuspendAll+0x18>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	4a03      	ldr	r2, [pc, #12]	@ (8004210 <vTaskSuspendAll+0x18>)
 8004204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	200004a4 	.word	0x200004a4

08004214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004222:	4b42      	ldr	r3, [pc, #264]	@ (800432c <xTaskResumeAll+0x118>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <xTaskResumeAll+0x2e>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	603b      	str	r3, [r7, #0]
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004242:	f000 fdc1 	bl	8004dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004246:	4b39      	ldr	r3, [pc, #228]	@ (800432c <xTaskResumeAll+0x118>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	4a37      	ldr	r2, [pc, #220]	@ (800432c <xTaskResumeAll+0x118>)
 800424e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004250:	4b36      	ldr	r3, [pc, #216]	@ (800432c <xTaskResumeAll+0x118>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d161      	bne.n	800431c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004258:	4b35      	ldr	r3, [pc, #212]	@ (8004330 <xTaskResumeAll+0x11c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d05d      	beq.n	800431c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004260:	e02e      	b.n	80042c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004262:	4b34      	ldr	r3, [pc, #208]	@ (8004334 <xTaskResumeAll+0x120>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3318      	adds	r3, #24
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f912 	bl	8003498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3304      	adds	r3, #4
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff f90d 	bl	8003498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	2201      	movs	r2, #1
 8004284:	409a      	lsls	r2, r3
 8004286:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <xTaskResumeAll+0x124>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <xTaskResumeAll+0x124>)
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4a27      	ldr	r2, [pc, #156]	@ (800433c <xTaskResumeAll+0x128>)
 800429e:	441a      	add	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7ff f899 	bl	80033de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b0:	4b23      	ldr	r3, [pc, #140]	@ (8004340 <xTaskResumeAll+0x12c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <xTaskResumeAll+0x130>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004334 <xTaskResumeAll+0x120>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1cc      	bne.n	8004262 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042ce:	f000 fb1b 	bl	8004908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <xTaskResumeAll+0x134>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d010      	beq.n	8004300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042de:	f000 f837 	bl	8004350 <xTaskIncrementTick>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042e8:	4b16      	ldr	r3, [pc, #88]	@ (8004344 <xTaskResumeAll+0x130>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f1      	bne.n	80042de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042fa:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <xTaskResumeAll+0x134>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004300:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <xTaskResumeAll+0x130>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <xTaskResumeAll+0x138>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800431c:	f000 fd86 	bl	8004e2c <vPortExitCritical>

	return xAlreadyYielded;
 8004320:	68bb      	ldr	r3, [r7, #8]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200004a4 	.word	0x200004a4
 8004330:	2000047c 	.word	0x2000047c
 8004334:	2000043c 	.word	0x2000043c
 8004338:	20000484 	.word	0x20000484
 800433c:	20000380 	.word	0x20000380
 8004340:	2000037c 	.word	0x2000037c
 8004344:	20000490 	.word	0x20000490
 8004348:	2000048c 	.word	0x2000048c
 800434c:	e000ed04 	.word	0xe000ed04

08004350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800435a:	4b4f      	ldr	r3, [pc, #316]	@ (8004498 <xTaskIncrementTick+0x148>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 808f 	bne.w	8004482 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004364:	4b4d      	ldr	r3, [pc, #308]	@ (800449c <xTaskIncrementTick+0x14c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800436c:	4a4b      	ldr	r2, [pc, #300]	@ (800449c <xTaskIncrementTick+0x14c>)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d121      	bne.n	80043bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004378:	4b49      	ldr	r3, [pc, #292]	@ (80044a0 <xTaskIncrementTick+0x150>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	603b      	str	r3, [r7, #0]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <xTaskIncrementTick+0x46>
 800439a:	4b41      	ldr	r3, [pc, #260]	@ (80044a0 <xTaskIncrementTick+0x150>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <xTaskIncrementTick+0x154>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3e      	ldr	r2, [pc, #248]	@ (80044a0 <xTaskIncrementTick+0x150>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4a3e      	ldr	r2, [pc, #248]	@ (80044a4 <xTaskIncrementTick+0x154>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <xTaskIncrementTick+0x158>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a3c      	ldr	r2, [pc, #240]	@ (80044a8 <xTaskIncrementTick+0x158>)
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	f000 faa6 	bl	8004908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043bc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <xTaskIncrementTick+0x15c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d348      	bcc.n	8004458 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c6:	4b36      	ldr	r3, [pc, #216]	@ (80044a0 <xTaskIncrementTick+0x150>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d0:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <xTaskIncrementTick+0x15c>)
 80043d2:	f04f 32ff 	mov.w	r2, #4294967295
 80043d6:	601a      	str	r2, [r3, #0]
					break;
 80043d8:	e03e      	b.n	8004458 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043da:	4b31      	ldr	r3, [pc, #196]	@ (80044a0 <xTaskIncrementTick+0x150>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d203      	bcs.n	80043fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043f2:	4a2e      	ldr	r2, [pc, #184]	@ (80044ac <xTaskIncrementTick+0x15c>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043f8:	e02e      	b.n	8004458 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f84a 	bl	8003498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	3318      	adds	r3, #24
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff f841 	bl	8003498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	2201      	movs	r2, #1
 800441c:	409a      	lsls	r2, r3
 800441e:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <xTaskIncrementTick+0x160>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	4a22      	ldr	r2, [pc, #136]	@ (80044b0 <xTaskIncrementTick+0x160>)
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <xTaskIncrementTick+0x164>)
 8004436:	441a      	add	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fe ffcd 	bl	80033de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <xTaskIncrementTick+0x168>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	429a      	cmp	r2, r3
 8004450:	d3b9      	bcc.n	80043c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004452:	2301      	movs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004456:	e7b6      	b.n	80043c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004458:	4b17      	ldr	r3, [pc, #92]	@ (80044b8 <xTaskIncrementTick+0x168>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445e:	4915      	ldr	r1, [pc, #84]	@ (80044b4 <xTaskIncrementTick+0x164>)
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d901      	bls.n	8004474 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004474:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <xTaskIncrementTick+0x16c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e004      	b.n	800448c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004482:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <xTaskIncrementTick+0x170>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	4a0d      	ldr	r2, [pc, #52]	@ (80044c0 <xTaskIncrementTick+0x170>)
 800448a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800448c:	697b      	ldr	r3, [r7, #20]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200004a4 	.word	0x200004a4
 800449c:	20000480 	.word	0x20000480
 80044a0:	20000434 	.word	0x20000434
 80044a4:	20000438 	.word	0x20000438
 80044a8:	20000494 	.word	0x20000494
 80044ac:	2000049c 	.word	0x2000049c
 80044b0:	20000484 	.word	0x20000484
 80044b4:	20000380 	.word	0x20000380
 80044b8:	2000037c 	.word	0x2000037c
 80044bc:	20000490 	.word	0x20000490
 80044c0:	2000048c 	.word	0x2000048c

080044c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044ca:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <vTaskSwitchContext+0xa4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044d2:	4b26      	ldr	r3, [pc, #152]	@ (800456c <vTaskSwitchContext+0xa8>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044d8:	e040      	b.n	800455c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80044da:	4b24      	ldr	r3, [pc, #144]	@ (800456c <vTaskSwitchContext+0xa8>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044e0:	4b23      	ldr	r3, [pc, #140]	@ (8004570 <vTaskSwitchContext+0xac>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	f1c3 031f 	rsb	r3, r3, #31
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	491f      	ldr	r1, [pc, #124]	@ (8004574 <vTaskSwitchContext+0xb0>)
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <vTaskSwitchContext+0x5e>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	607b      	str	r3, [r7, #4]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vTaskSwitchContext+0x5a>
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4a11      	ldr	r2, [pc, #68]	@ (8004574 <vTaskSwitchContext+0xb0>)
 800452e:	4413      	add	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	3308      	adds	r3, #8
 8004544:	429a      	cmp	r2, r3
 8004546:	d104      	bne.n	8004552 <vTaskSwitchContext+0x8e>
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a07      	ldr	r2, [pc, #28]	@ (8004578 <vTaskSwitchContext+0xb4>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	200004a4 	.word	0x200004a4
 800456c:	20000490 	.word	0x20000490
 8004570:	20000484 	.word	0x20000484
 8004574:	20000380 	.word	0x20000380
 8004578:	2000037c 	.word	0x2000037c

0800457c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045a4:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <vTaskPlaceOnEventList+0x48>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3318      	adds	r3, #24
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fe ff3a 	bl	8003426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045b2:	2101      	movs	r1, #1
 80045b4:	6838      	ldr	r0, [r7, #0]
 80045b6:	f000 fa6d 	bl	8004a94 <prvAddCurrentTaskToDelayedList>
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000037c 	.word	0x2000037c

080045c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe ff4c 	bl	8003498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <xTaskRemoveFromEventList+0xb0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11c      	bne.n	8004642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe ff43 	bl	8003498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	2201      	movs	r2, #1
 8004618:	409a      	lsls	r2, r3
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <xTaskRemoveFromEventList+0xb4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	4a16      	ldr	r2, [pc, #88]	@ (800467c <xTaskRemoveFromEventList+0xb4>)
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4a13      	ldr	r2, [pc, #76]	@ (8004680 <xTaskRemoveFromEventList+0xb8>)
 8004632:	441a      	add	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7fe fecf 	bl	80033de <vListInsertEnd>
 8004640:	e005      	b.n	800464e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3318      	adds	r3, #24
 8004646:	4619      	mov	r1, r3
 8004648:	480e      	ldr	r0, [pc, #56]	@ (8004684 <xTaskRemoveFromEventList+0xbc>)
 800464a:	f7fe fec8 	bl	80033de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <xTaskRemoveFromEventList+0xc0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	429a      	cmp	r2, r3
 800465a:	d905      	bls.n	8004668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <xTaskRemoveFromEventList+0xc4>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e001      	b.n	800466c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800466c:	697b      	ldr	r3, [r7, #20]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200004a4 	.word	0x200004a4
 800467c:	20000484 	.word	0x20000484
 8004680:	20000380 	.word	0x20000380
 8004684:	2000043c 	.word	0x2000043c
 8004688:	2000037c 	.word	0x2000037c
 800468c:	20000490 	.word	0x20000490

08004690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <vTaskInternalSetTimeOutState+0x24>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <vTaskInternalSetTimeOutState+0x28>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	20000494 	.word	0x20000494
 80046b8:	20000480 	.word	0x20000480

080046bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	613b      	str	r3, [r7, #16]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60fb      	str	r3, [r7, #12]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004702:	f000 fb61 	bl	8004dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004706:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <xTaskCheckForTimeOut+0xc0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d102      	bne.n	8004726 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e023      	b.n	800476e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <xTaskCheckForTimeOut+0xc4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d007      	beq.n	8004742 <xTaskCheckForTimeOut+0x86>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e015      	b.n	800476e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	429a      	cmp	r2, r3
 800474a:	d20b      	bcs.n	8004764 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff99 	bl	8004690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e004      	b.n	800476e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800476a:	2301      	movs	r3, #1
 800476c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f000 fb5d 	bl	8004e2c <vPortExitCritical>

	return xReturn;
 8004772:	69fb      	ldr	r3, [r7, #28]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000480 	.word	0x20000480
 8004780:	20000494 	.word	0x20000494

08004784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <vTaskMissedYield+0x14>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000490 	.word	0x20000490

0800479c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047a4:	f000 f852 	bl	800484c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047a8:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <prvIdleTask+0x28>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d9f9      	bls.n	80047a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <prvIdleTask+0x2c>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047c0:	e7f0      	b.n	80047a4 <prvIdleTask+0x8>
 80047c2:	bf00      	nop
 80047c4:	20000380 	.word	0x20000380
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	e00c      	b.n	80047f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a12      	ldr	r2, [pc, #72]	@ (800482c <prvInitialiseTaskLists+0x60>)
 80047e4:	4413      	add	r3, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fdcc 	bl	8003384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d9ef      	bls.n	80047d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047f8:	480d      	ldr	r0, [pc, #52]	@ (8004830 <prvInitialiseTaskLists+0x64>)
 80047fa:	f7fe fdc3 	bl	8003384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047fe:	480d      	ldr	r0, [pc, #52]	@ (8004834 <prvInitialiseTaskLists+0x68>)
 8004800:	f7fe fdc0 	bl	8003384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004804:	480c      	ldr	r0, [pc, #48]	@ (8004838 <prvInitialiseTaskLists+0x6c>)
 8004806:	f7fe fdbd 	bl	8003384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800480a:	480c      	ldr	r0, [pc, #48]	@ (800483c <prvInitialiseTaskLists+0x70>)
 800480c:	f7fe fdba 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004810:	480b      	ldr	r0, [pc, #44]	@ (8004840 <prvInitialiseTaskLists+0x74>)
 8004812:	f7fe fdb7 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004816:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <prvInitialiseTaskLists+0x78>)
 8004818:	4a05      	ldr	r2, [pc, #20]	@ (8004830 <prvInitialiseTaskLists+0x64>)
 800481a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800481c:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <prvInitialiseTaskLists+0x7c>)
 800481e:	4a05      	ldr	r2, [pc, #20]	@ (8004834 <prvInitialiseTaskLists+0x68>)
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000380 	.word	0x20000380
 8004830:	2000040c 	.word	0x2000040c
 8004834:	20000420 	.word	0x20000420
 8004838:	2000043c 	.word	0x2000043c
 800483c:	20000450 	.word	0x20000450
 8004840:	20000468 	.word	0x20000468
 8004844:	20000434 	.word	0x20000434
 8004848:	20000438 	.word	0x20000438

0800484c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004852:	e019      	b.n	8004888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004854:	f000 fab8 	bl	8004dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004858:	4b10      	ldr	r3, [pc, #64]	@ (800489c <prvCheckTasksWaitingTermination+0x50>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fe17 	bl	8003498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <prvCheckTasksWaitingTermination+0x54>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	4a0b      	ldr	r2, [pc, #44]	@ (80048a0 <prvCheckTasksWaitingTermination+0x54>)
 8004872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3b01      	subs	r3, #1
 800487a:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 800487c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800487e:	f000 fad5 	bl	8004e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f810 	bl	80048a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e1      	bne.n	8004854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000450 	.word	0x20000450
 80048a0:	2000047c 	.word	0x2000047c
 80048a4:	20000464 	.word	0x20000464

080048a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fc72 	bl	80051a8 <vPortFree>
				vPortFree( pxTCB );
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fc6f 	bl	80051a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048ca:	e019      	b.n	8004900 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d103      	bne.n	80048de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fc66 	bl	80051a8 <vPortFree>
	}
 80048dc:	e010      	b.n	8004900 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d00b      	beq.n	8004900 <prvDeleteTCB+0x58>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <prvDeleteTCB+0x54>
	}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490e:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004918:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004920:	e008      	b.n	8004934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a04      	ldr	r2, [pc, #16]	@ (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000434 	.word	0x20000434
 8004944:	2000049c 	.word	0x2000049c

08004948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <xTaskGetSchedulerState+0x34>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004956:	2301      	movs	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	e008      	b.n	800496e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <xTaskGetSchedulerState+0x38>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004964:	2302      	movs	r3, #2
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	e001      	b.n	800496e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800496e:	687b      	ldr	r3, [r7, #4]
	}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000488 	.word	0x20000488
 8004980:	200004a4 	.word	0x200004a4

08004984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d070      	beq.n	8004a7c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800499a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <xTaskPriorityDisinherit+0x104>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00b      	beq.n	80049bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	e7fd      	b.n	80049b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60bb      	str	r3, [r7, #8]
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e0:	1e5a      	subs	r2, r3, #1
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d044      	beq.n	8004a7c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d140      	bne.n	8004a7c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fd4a 	bl	8003498 <uxListRemove>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d115      	bne.n	8004a36 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0e:	491f      	ldr	r1, [pc, #124]	@ (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <xTaskPriorityDisinherit+0xb2>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	2201      	movs	r2, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	4b18      	ldr	r3, [pc, #96]	@ (8004a90 <xTaskPriorityDisinherit+0x10c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4013      	ands	r3, r2
 8004a32:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <xTaskPriorityDisinherit+0x10c>)
 8004a34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	f1c3 0207 	rsb	r2, r3, #7
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	2201      	movs	r2, #1
 8004a50:	409a      	lsls	r2, r3
 8004a52:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <xTaskPriorityDisinherit+0x10c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	4a0d      	ldr	r2, [pc, #52]	@ (8004a90 <xTaskPriorityDisinherit+0x10c>)
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4a08      	ldr	r2, [pc, #32]	@ (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a6a:	441a      	add	r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f7fe fcb3 	bl	80033de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a7c:	697b      	ldr	r3, [r7, #20]
	}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	2000037c 	.word	0x2000037c
 8004a8c:	20000380 	.word	0x20000380
 8004a90:	20000484 	.word	0x20000484

08004a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a9e:	4b29      	ldr	r3, [pc, #164]	@ (8004b44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa4:	4b28      	ldr	r3, [pc, #160]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fcf4 	bl	8003498 <uxListRemove>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ab6:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	2201      	movs	r2, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	4a20      	ldr	r2, [pc, #128]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004acc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d10a      	bne.n	8004aec <prvAddCurrentTaskToDelayedList+0x58>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004adc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	481a      	ldr	r0, [pc, #104]	@ (8004b50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ae6:	f7fe fc7a 	bl	80033de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aea:	e026      	b.n	8004b3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004af4:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d209      	bcs.n	8004b18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b04:	4b13      	ldr	r3, [pc, #76]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7fe fc88 	bl	8003426 <vListInsert>
}
 8004b16:	e010      	b.n	8004b3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b18:	4b0f      	ldr	r3, [pc, #60]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fe fc7e 	bl	8003426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d202      	bcs.n	8004b3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b34:	4a09      	ldr	r2, [pc, #36]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6013      	str	r3, [r2, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000480 	.word	0x20000480
 8004b48:	2000037c 	.word	0x2000037c
 8004b4c:	20000484 	.word	0x20000484
 8004b50:	20000468 	.word	0x20000468
 8004b54:	20000438 	.word	0x20000438
 8004b58:	20000434 	.word	0x20000434
 8004b5c:	2000049c 	.word	0x2000049c

08004b60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b90:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <pxPortInitialiseStack+0x64>)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b14      	subs	r3, #20
 8004b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f06f 0202 	mvn.w	r2, #2
 8004bae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3b20      	subs	r3, #32
 8004bb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	08004bc9 	.word	0x08004bc9

08004bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bd2:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <prvTaskExitError+0x58>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d00b      	beq.n	8004bf4 <prvTaskExitError+0x2c>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <prvTaskExitError+0x28>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60bb      	str	r3, [r7, #8]
}
 8004c06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c08:	bf00      	nop
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0fc      	beq.n	8004c0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	2000000c 	.word	0x2000000c
	...

08004c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c30:	4b07      	ldr	r3, [pc, #28]	@ (8004c50 <pxCurrentTCBConst2>)
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	6808      	ldr	r0, [r1, #0]
 8004c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	f380 8809 	msr	PSP, r0
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	4770      	bx	lr
 8004c4c:	f3af 8000 	nop.w

08004c50 <pxCurrentTCBConst2>:
 8004c50:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop

08004c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c58:	4808      	ldr	r0, [pc, #32]	@ (8004c7c <prvPortStartFirstTask+0x24>)
 8004c5a:	6800      	ldr	r0, [r0, #0]
 8004c5c:	6800      	ldr	r0, [r0, #0]
 8004c5e:	f380 8808 	msr	MSP, r0
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8814 	msr	CONTROL, r0
 8004c6a:	b662      	cpsie	i
 8004c6c:	b661      	cpsie	f
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	df00      	svc	0
 8004c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c7a:	bf00      	nop
 8004c7c:	e000ed08 	.word	0xe000ed08

08004c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c86:	4b47      	ldr	r3, [pc, #284]	@ (8004da4 <xPortStartScheduler+0x124>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a47      	ldr	r2, [pc, #284]	@ (8004da8 <xPortStartScheduler+0x128>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10b      	bne.n	8004ca8 <xPortStartScheduler+0x28>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	e7fd      	b.n	8004ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8004da4 <xPortStartScheduler+0x124>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3f      	ldr	r2, [pc, #252]	@ (8004dac <xPortStartScheduler+0x12c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10b      	bne.n	8004cca <xPortStartScheduler+0x4a>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60fb      	str	r3, [r7, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	e7fd      	b.n	8004cc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cca:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <xPortStartScheduler+0x130>)
 8004ccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	22ff      	movs	r2, #255	@ 0xff
 8004cda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <xPortStartScheduler+0x134>)
 8004cf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cf2:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cf8:	e009      	b.n	8004d0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	4a2d      	ldr	r2, [pc, #180]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004d02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d0ef      	beq.n	8004cfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d1a:	4b27      	ldr	r3, [pc, #156]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1c3 0307 	rsb	r3, r3, #7
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d00b      	beq.n	8004d3e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60bb      	str	r3, [r7, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	4a1c      	ldr	r2, [pc, #112]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d50:	4a19      	ldr	r2, [pc, #100]	@ (8004db8 <xPortStartScheduler+0x138>)
 8004d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d5c:	4b17      	ldr	r3, [pc, #92]	@ (8004dbc <xPortStartScheduler+0x13c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a16      	ldr	r2, [pc, #88]	@ (8004dbc <xPortStartScheduler+0x13c>)
 8004d62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d68:	4b14      	ldr	r3, [pc, #80]	@ (8004dbc <xPortStartScheduler+0x13c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <xPortStartScheduler+0x13c>)
 8004d6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d74:	f000 f8da 	bl	8004f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d78:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <xPortStartScheduler+0x140>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d7e:	f000 f8f9 	bl	8004f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d82:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <xPortStartScheduler+0x144>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0f      	ldr	r2, [pc, #60]	@ (8004dc4 <xPortStartScheduler+0x144>)
 8004d88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d8e:	f7ff ff63 	bl	8004c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d92:	f7ff fb97 	bl	80044c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d96:	f7ff ff17 	bl	8004bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	e000ed00 	.word	0xe000ed00
 8004da8:	410fc271 	.word	0x410fc271
 8004dac:	410fc270 	.word	0x410fc270
 8004db0:	e000e400 	.word	0xe000e400
 8004db4:	200004a8 	.word	0x200004a8
 8004db8:	200004ac 	.word	0x200004ac
 8004dbc:	e000ed20 	.word	0xe000ed20
 8004dc0:	2000000c 	.word	0x2000000c
 8004dc4:	e000ef34 	.word	0xe000ef34

08004dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004de2:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <vPortEnterCritical+0x5c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e24 <vPortEnterCritical+0x5c>)
 8004dea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dec:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <vPortEnterCritical+0x5c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d110      	bne.n	8004e16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004df4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <vPortEnterCritical+0x60>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	603b      	str	r3, [r7, #0]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <vPortEnterCritical+0x4a>
	}
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e32:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <vPortExitCritical+0x50>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <vPortExitCritical+0x26>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	607b      	str	r3, [r7, #4]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <vPortExitCritical+0x50>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <vPortExitCritical+0x50>)
 8004e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e5c:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <vPortExitCritical+0x50>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <vPortExitCritical+0x44>
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
}
 8004e6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	2000000c 	.word	0x2000000c

08004e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e80:	f3ef 8009 	mrs	r0, PSP
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4b15      	ldr	r3, [pc, #84]	@ (8004ee0 <pxCurrentTCBConst>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	f01e 0f10 	tst.w	lr, #16
 8004e90:	bf08      	it	eq
 8004e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ea4:	f380 8811 	msr	BASEPRI, r0
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f7ff fb08 	bl	80044c4 <vTaskSwitchContext>
 8004eb4:	f04f 0000 	mov.w	r0, #0
 8004eb8:	f380 8811 	msr	BASEPRI, r0
 8004ebc:	bc09      	pop	{r0, r3}
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	6808      	ldr	r0, [r1, #0]
 8004ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec6:	f01e 0f10 	tst.w	lr, #16
 8004eca:	bf08      	it	eq
 8004ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ed0:	f380 8809 	msr	PSP, r0
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w

08004ee0 <pxCurrentTCBConst>:
 8004ee0:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop

08004ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
}
 8004f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f02:	f7ff fa25 	bl	8004350 <xTaskIncrementTick>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <SysTick_Handler+0x40>)
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	2300      	movs	r3, #0
 8004f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <vPortSetupTimerInterrupt+0x34>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f36:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <vPortSetupTimerInterrupt+0x38>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <vPortSetupTimerInterrupt+0x3c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0a      	ldr	r2, [pc, #40]	@ (8004f6c <vPortSetupTimerInterrupt+0x40>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	4a09      	ldr	r2, [pc, #36]	@ (8004f70 <vPortSetupTimerInterrupt+0x44>)
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f4e:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <vPortSetupTimerInterrupt+0x34>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010
 8004f64:	e000e018 	.word	0xe000e018
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	10624dd3 	.word	0x10624dd3
 8004f70:	e000e014 	.word	0xe000e014

08004f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f84 <vPortEnableVFP+0x10>
 8004f78:	6801      	ldr	r1, [r0, #0]
 8004f7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f7e:	6001      	str	r1, [r0, #0]
 8004f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f82:	bf00      	nop
 8004f84:	e000ed88 	.word	0xe000ed88

08004f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f8e:	f3ef 8305 	mrs	r3, IPSR
 8004f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d915      	bls.n	8004fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f9a:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <vPortValidateInterruptPriority+0x74>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fa4:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <vPortValidateInterruptPriority+0x78>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	7afa      	ldrb	r2, [r7, #11]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d20b      	bcs.n	8004fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005004 <vPortValidateInterruptPriority+0x7c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fce:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <vPortValidateInterruptPriority+0x80>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d90b      	bls.n	8004fee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	603b      	str	r3, [r7, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <vPortValidateInterruptPriority+0x62>
	}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e3f0 	.word	0xe000e3f0
 8005000:	200004a8 	.word	0x200004a8
 8005004:	e000ed0c 	.word	0xe000ed0c
 8005008:	200004ac 	.word	0x200004ac

0800500c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	@ 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005018:	f7ff f8ee 	bl	80041f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800501c:	4b5c      	ldr	r3, [pc, #368]	@ (8005190 <pvPortMalloc+0x184>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005024:	f000 f924 	bl	8005270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005028:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <pvPortMalloc+0x188>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 8095 	bne.w	8005160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01e      	beq.n	800507a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800503c:	2208      	movs	r2, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d015      	beq.n	800507a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f023 0307 	bic.w	r3, r3, #7
 8005054:	3308      	adds	r3, #8
 8005056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <pvPortMalloc+0x6e>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	617b      	str	r3, [r7, #20]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d06f      	beq.n	8005160 <pvPortMalloc+0x154>
 8005080:	4b45      	ldr	r3, [pc, #276]	@ (8005198 <pvPortMalloc+0x18c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d86a      	bhi.n	8005160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800508a:	4b44      	ldr	r3, [pc, #272]	@ (800519c <pvPortMalloc+0x190>)
 800508c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800508e:	4b43      	ldr	r3, [pc, #268]	@ (800519c <pvPortMalloc+0x190>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005094:	e004      	b.n	80050a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d903      	bls.n	80050b2 <pvPortMalloc+0xa6>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f1      	bne.n	8005096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050b2:	4b37      	ldr	r3, [pc, #220]	@ (8005190 <pvPortMalloc+0x184>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d051      	beq.n	8005160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4413      	add	r3, r2
 80050c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	1ad2      	subs	r2, r2, r3
 80050d6:	2308      	movs	r3, #8
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	429a      	cmp	r2, r3
 80050dc:	d920      	bls.n	8005120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <pvPortMalloc+0xfc>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad2      	subs	r2, r2, r3
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800511a:	69b8      	ldr	r0, [r7, #24]
 800511c:	f000 f90a 	bl	8005334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005120:	4b1d      	ldr	r3, [pc, #116]	@ (8005198 <pvPortMalloc+0x18c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <pvPortMalloc+0x18c>)
 800512c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800512e:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <pvPortMalloc+0x18c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b1b      	ldr	r3, [pc, #108]	@ (80051a0 <pvPortMalloc+0x194>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d203      	bcs.n	8005142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800513a:	4b17      	ldr	r3, [pc, #92]	@ (8005198 <pvPortMalloc+0x18c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <pvPortMalloc+0x194>)
 8005140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <pvPortMalloc+0x188>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	431a      	orrs	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005156:	4b13      	ldr	r3, [pc, #76]	@ (80051a4 <pvPortMalloc+0x198>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	4a11      	ldr	r2, [pc, #68]	@ (80051a4 <pvPortMalloc+0x198>)
 800515e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005160:	f7ff f858 	bl	8004214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <pvPortMalloc+0x17a>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <pvPortMalloc+0x176>
	return pvReturn;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3728      	adds	r7, #40	@ 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200040b8 	.word	0x200040b8
 8005194:	200040cc 	.word	0x200040cc
 8005198:	200040bc 	.word	0x200040bc
 800519c:	200040b0 	.word	0x200040b0
 80051a0:	200040c0 	.word	0x200040c0
 80051a4:	200040c4 	.word	0x200040c4

080051a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d04f      	beq.n	800525a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051ba:	2308      	movs	r3, #8
 80051bc:	425b      	negs	r3, r3
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <vPortFree+0xbc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <vPortFree+0x46>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60fb      	str	r3, [r7, #12]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <vPortFree+0x66>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	60bb      	str	r3, [r7, #8]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	4b14      	ldr	r3, [pc, #80]	@ (8005264 <vPortFree+0xbc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01e      	beq.n	800525a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11a      	bne.n	800525a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	4b0e      	ldr	r3, [pc, #56]	@ (8005264 <vPortFree+0xbc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	43db      	mvns	r3, r3
 800522e:	401a      	ands	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005234:	f7fe ffe0 	bl	80041f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <vPortFree+0xc0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4413      	add	r3, r2
 8005242:	4a09      	ldr	r2, [pc, #36]	@ (8005268 <vPortFree+0xc0>)
 8005244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005246:	6938      	ldr	r0, [r7, #16]
 8005248:	f000 f874 	bl	8005334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800524c:	4b07      	ldr	r3, [pc, #28]	@ (800526c <vPortFree+0xc4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	4a06      	ldr	r2, [pc, #24]	@ (800526c <vPortFree+0xc4>)
 8005254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005256:	f7fe ffdd 	bl	8004214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200040cc 	.word	0x200040cc
 8005268:	200040bc 	.word	0x200040bc
 800526c:	200040c8 	.word	0x200040c8

08005270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005276:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800527a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <prvHeapInit+0xac>)
 800527e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3307      	adds	r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0307 	bic.w	r3, r3, #7
 8005296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <prvHeapInit+0xac>)
 80052a0:	4413      	add	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <prvHeapInit+0xb0>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005320 <prvHeapInit+0xb0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4413      	add	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052bc:	2208      	movs	r2, #8
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <prvHeapInit+0xb4>)
 80052d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052d2:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <prvHeapInit+0xb4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052da:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <prvHeapInit+0xb4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <prvHeapInit+0xb4>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005328 <prvHeapInit+0xb8>)
 80052fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4a09      	ldr	r2, [pc, #36]	@ (800532c <prvHeapInit+0xbc>)
 8005306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005308:	4b09      	ldr	r3, [pc, #36]	@ (8005330 <prvHeapInit+0xc0>)
 800530a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800530e:	601a      	str	r2, [r3, #0]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	200004b0 	.word	0x200004b0
 8005320:	200040b0 	.word	0x200040b0
 8005324:	200040b8 	.word	0x200040b8
 8005328:	200040c0 	.word	0x200040c0
 800532c:	200040bc 	.word	0x200040bc
 8005330:	200040cc 	.word	0x200040cc

08005334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800533c:	4b28      	ldr	r3, [pc, #160]	@ (80053e0 <prvInsertBlockIntoFreeList+0xac>)
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e002      	b.n	8005348 <prvInsertBlockIntoFreeList+0x14>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	429a      	cmp	r2, r3
 8005350:	d8f7      	bhi.n	8005342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d108      	bne.n	8005376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	441a      	add	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d118      	bne.n	80053bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b15      	ldr	r3, [pc, #84]	@ (80053e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d00d      	beq.n	80053b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	441a      	add	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e008      	b.n	80053c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053b2:	4b0c      	ldr	r3, [pc, #48]	@ (80053e4 <prvInsertBlockIntoFreeList+0xb0>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e003      	b.n	80053c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d002      	beq.n	80053d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200040b0 	.word	0x200040b0
 80053e4:	200040b8 	.word	0x200040b8

080053e8 <siprintf>:
 80053e8:	b40e      	push	{r1, r2, r3}
 80053ea:	b500      	push	{lr}
 80053ec:	b09c      	sub	sp, #112	@ 0x70
 80053ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80053f0:	9002      	str	r0, [sp, #8]
 80053f2:	9006      	str	r0, [sp, #24]
 80053f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053f8:	4809      	ldr	r0, [pc, #36]	@ (8005420 <siprintf+0x38>)
 80053fa:	9107      	str	r1, [sp, #28]
 80053fc:	9104      	str	r1, [sp, #16]
 80053fe:	4909      	ldr	r1, [pc, #36]	@ (8005424 <siprintf+0x3c>)
 8005400:	f853 2b04 	ldr.w	r2, [r3], #4
 8005404:	9105      	str	r1, [sp, #20]
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	a902      	add	r1, sp, #8
 800540c:	f000 f9a2 	bl	8005754 <_svfiprintf_r>
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	b01c      	add	sp, #112	@ 0x70
 8005418:	f85d eb04 	ldr.w	lr, [sp], #4
 800541c:	b003      	add	sp, #12
 800541e:	4770      	bx	lr
 8005420:	20000010 	.word	0x20000010
 8005424:	ffff0208 	.word	0xffff0208

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <__errno>:
 8005438:	4b01      	ldr	r3, [pc, #4]	@ (8005440 <__errno+0x8>)
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000010 	.word	0x20000010

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4d0d      	ldr	r5, [pc, #52]	@ (800547c <__libc_init_array+0x38>)
 8005448:	4c0d      	ldr	r4, [pc, #52]	@ (8005480 <__libc_init_array+0x3c>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	2600      	movs	r6, #0
 8005450:	42a6      	cmp	r6, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	4d0b      	ldr	r5, [pc, #44]	@ (8005484 <__libc_init_array+0x40>)
 8005456:	4c0c      	ldr	r4, [pc, #48]	@ (8005488 <__libc_init_array+0x44>)
 8005458:	f000 fc66 	bl	8005d28 <_init>
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	2600      	movs	r6, #0
 8005462:	42a6      	cmp	r6, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f855 3b04 	ldr.w	r3, [r5], #4
 800546c:	4798      	blx	r3
 800546e:	3601      	adds	r6, #1
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f855 3b04 	ldr.w	r3, [r5], #4
 8005476:	4798      	blx	r3
 8005478:	3601      	adds	r6, #1
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	08005ee4 	.word	0x08005ee4
 8005480:	08005ee4 	.word	0x08005ee4
 8005484:	08005ee4 	.word	0x08005ee4
 8005488:	08005ee8 	.word	0x08005ee8

0800548c <__retarget_lock_acquire_recursive>:
 800548c:	4770      	bx	lr

0800548e <__retarget_lock_release_recursive>:
 800548e:	4770      	bx	lr

08005490 <memcpy>:
 8005490:	440a      	add	r2, r1
 8005492:	4291      	cmp	r1, r2
 8005494:	f100 33ff 	add.w	r3, r0, #4294967295
 8005498:	d100      	bne.n	800549c <memcpy+0xc>
 800549a:	4770      	bx	lr
 800549c:	b510      	push	{r4, lr}
 800549e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a6:	4291      	cmp	r1, r2
 80054a8:	d1f9      	bne.n	800549e <memcpy+0xe>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <_free_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4605      	mov	r5, r0
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d041      	beq.n	8005538 <_free_r+0x8c>
 80054b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b8:	1f0c      	subs	r4, r1, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb8      	it	lt
 80054be:	18e4      	addlt	r4, r4, r3
 80054c0:	f000 f8e0 	bl	8005684 <__malloc_lock>
 80054c4:	4a1d      	ldr	r2, [pc, #116]	@ (800553c <_free_r+0x90>)
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	b933      	cbnz	r3, 80054d8 <_free_r+0x2c>
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6014      	str	r4, [r2, #0]
 80054ce:	4628      	mov	r0, r5
 80054d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d4:	f000 b8dc 	b.w	8005690 <__malloc_unlock>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d908      	bls.n	80054ee <_free_r+0x42>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	1821      	adds	r1, r4, r0
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf01      	itttt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	1809      	addeq	r1, r1, r0
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	e7ed      	b.n	80054ca <_free_r+0x1e>
 80054ee:	461a      	mov	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b10b      	cbz	r3, 80054f8 <_free_r+0x4c>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d9fa      	bls.n	80054ee <_free_r+0x42>
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	1850      	adds	r0, r2, r1
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d10b      	bne.n	8005518 <_free_r+0x6c>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	4401      	add	r1, r0
 8005504:	1850      	adds	r0, r2, r1
 8005506:	4283      	cmp	r3, r0
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	d1e0      	bne.n	80054ce <_free_r+0x22>
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6053      	str	r3, [r2, #4]
 8005512:	4408      	add	r0, r1
 8005514:	6010      	str	r0, [r2, #0]
 8005516:	e7da      	b.n	80054ce <_free_r+0x22>
 8005518:	d902      	bls.n	8005520 <_free_r+0x74>
 800551a:	230c      	movs	r3, #12
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	e7d6      	b.n	80054ce <_free_r+0x22>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	1821      	adds	r1, r4, r0
 8005524:	428b      	cmp	r3, r1
 8005526:	bf04      	itt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	bf04      	itt	eq
 8005530:	1809      	addeq	r1, r1, r0
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6054      	str	r4, [r2, #4]
 8005536:	e7ca      	b.n	80054ce <_free_r+0x22>
 8005538:	bd38      	pop	{r3, r4, r5, pc}
 800553a:	bf00      	nop
 800553c:	20004214 	.word	0x20004214

08005540 <sbrk_aligned>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4e0f      	ldr	r6, [pc, #60]	@ (8005580 <sbrk_aligned+0x40>)
 8005544:	460c      	mov	r4, r1
 8005546:	6831      	ldr	r1, [r6, #0]
 8005548:	4605      	mov	r5, r0
 800554a:	b911      	cbnz	r1, 8005552 <sbrk_aligned+0x12>
 800554c:	f000 fba6 	bl	8005c9c <_sbrk_r>
 8005550:	6030      	str	r0, [r6, #0]
 8005552:	4621      	mov	r1, r4
 8005554:	4628      	mov	r0, r5
 8005556:	f000 fba1 	bl	8005c9c <_sbrk_r>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	d103      	bne.n	8005566 <sbrk_aligned+0x26>
 800555e:	f04f 34ff 	mov.w	r4, #4294967295
 8005562:	4620      	mov	r0, r4
 8005564:	bd70      	pop	{r4, r5, r6, pc}
 8005566:	1cc4      	adds	r4, r0, #3
 8005568:	f024 0403 	bic.w	r4, r4, #3
 800556c:	42a0      	cmp	r0, r4
 800556e:	d0f8      	beq.n	8005562 <sbrk_aligned+0x22>
 8005570:	1a21      	subs	r1, r4, r0
 8005572:	4628      	mov	r0, r5
 8005574:	f000 fb92 	bl	8005c9c <_sbrk_r>
 8005578:	3001      	adds	r0, #1
 800557a:	d1f2      	bne.n	8005562 <sbrk_aligned+0x22>
 800557c:	e7ef      	b.n	800555e <sbrk_aligned+0x1e>
 800557e:	bf00      	nop
 8005580:	20004210 	.word	0x20004210

08005584 <_malloc_r>:
 8005584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005588:	1ccd      	adds	r5, r1, #3
 800558a:	f025 0503 	bic.w	r5, r5, #3
 800558e:	3508      	adds	r5, #8
 8005590:	2d0c      	cmp	r5, #12
 8005592:	bf38      	it	cc
 8005594:	250c      	movcc	r5, #12
 8005596:	2d00      	cmp	r5, #0
 8005598:	4606      	mov	r6, r0
 800559a:	db01      	blt.n	80055a0 <_malloc_r+0x1c>
 800559c:	42a9      	cmp	r1, r5
 800559e:	d904      	bls.n	80055aa <_malloc_r+0x26>
 80055a0:	230c      	movs	r3, #12
 80055a2:	6033      	str	r3, [r6, #0]
 80055a4:	2000      	movs	r0, #0
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005680 <_malloc_r+0xfc>
 80055ae:	f000 f869 	bl	8005684 <__malloc_lock>
 80055b2:	f8d8 3000 	ldr.w	r3, [r8]
 80055b6:	461c      	mov	r4, r3
 80055b8:	bb44      	cbnz	r4, 800560c <_malloc_r+0x88>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4630      	mov	r0, r6
 80055be:	f7ff ffbf 	bl	8005540 <sbrk_aligned>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	4604      	mov	r4, r0
 80055c6:	d158      	bne.n	800567a <_malloc_r+0xf6>
 80055c8:	f8d8 4000 	ldr.w	r4, [r8]
 80055cc:	4627      	mov	r7, r4
 80055ce:	2f00      	cmp	r7, #0
 80055d0:	d143      	bne.n	800565a <_malloc_r+0xd6>
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d04b      	beq.n	800566e <_malloc_r+0xea>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	4639      	mov	r1, r7
 80055da:	4630      	mov	r0, r6
 80055dc:	eb04 0903 	add.w	r9, r4, r3
 80055e0:	f000 fb5c 	bl	8005c9c <_sbrk_r>
 80055e4:	4581      	cmp	r9, r0
 80055e6:	d142      	bne.n	800566e <_malloc_r+0xea>
 80055e8:	6821      	ldr	r1, [r4, #0]
 80055ea:	1a6d      	subs	r5, r5, r1
 80055ec:	4629      	mov	r1, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff ffa6 	bl	8005540 <sbrk_aligned>
 80055f4:	3001      	adds	r0, #1
 80055f6:	d03a      	beq.n	800566e <_malloc_r+0xea>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	442b      	add	r3, r5
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	bb62      	cbnz	r2, 8005660 <_malloc_r+0xdc>
 8005606:	f8c8 7000 	str.w	r7, [r8]
 800560a:	e00f      	b.n	800562c <_malloc_r+0xa8>
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	1b52      	subs	r2, r2, r5
 8005610:	d420      	bmi.n	8005654 <_malloc_r+0xd0>
 8005612:	2a0b      	cmp	r2, #11
 8005614:	d917      	bls.n	8005646 <_malloc_r+0xc2>
 8005616:	1961      	adds	r1, r4, r5
 8005618:	42a3      	cmp	r3, r4
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	6059      	strne	r1, [r3, #4]
 8005620:	6863      	ldr	r3, [r4, #4]
 8005622:	bf08      	it	eq
 8005624:	f8c8 1000 	streq.w	r1, [r8]
 8005628:	5162      	str	r2, [r4, r5]
 800562a:	604b      	str	r3, [r1, #4]
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f82f 	bl	8005690 <__malloc_unlock>
 8005632:	f104 000b 	add.w	r0, r4, #11
 8005636:	1d23      	adds	r3, r4, #4
 8005638:	f020 0007 	bic.w	r0, r0, #7
 800563c:	1ac2      	subs	r2, r0, r3
 800563e:	bf1c      	itt	ne
 8005640:	1a1b      	subne	r3, r3, r0
 8005642:	50a3      	strne	r3, [r4, r2]
 8005644:	e7af      	b.n	80055a6 <_malloc_r+0x22>
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	42a3      	cmp	r3, r4
 800564a:	bf0c      	ite	eq
 800564c:	f8c8 2000 	streq.w	r2, [r8]
 8005650:	605a      	strne	r2, [r3, #4]
 8005652:	e7eb      	b.n	800562c <_malloc_r+0xa8>
 8005654:	4623      	mov	r3, r4
 8005656:	6864      	ldr	r4, [r4, #4]
 8005658:	e7ae      	b.n	80055b8 <_malloc_r+0x34>
 800565a:	463c      	mov	r4, r7
 800565c:	687f      	ldr	r7, [r7, #4]
 800565e:	e7b6      	b.n	80055ce <_malloc_r+0x4a>
 8005660:	461a      	mov	r2, r3
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	42a3      	cmp	r3, r4
 8005666:	d1fb      	bne.n	8005660 <_malloc_r+0xdc>
 8005668:	2300      	movs	r3, #0
 800566a:	6053      	str	r3, [r2, #4]
 800566c:	e7de      	b.n	800562c <_malloc_r+0xa8>
 800566e:	230c      	movs	r3, #12
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	4630      	mov	r0, r6
 8005674:	f000 f80c 	bl	8005690 <__malloc_unlock>
 8005678:	e794      	b.n	80055a4 <_malloc_r+0x20>
 800567a:	6005      	str	r5, [r0, #0]
 800567c:	e7d6      	b.n	800562c <_malloc_r+0xa8>
 800567e:	bf00      	nop
 8005680:	20004214 	.word	0x20004214

08005684 <__malloc_lock>:
 8005684:	4801      	ldr	r0, [pc, #4]	@ (800568c <__malloc_lock+0x8>)
 8005686:	f7ff bf01 	b.w	800548c <__retarget_lock_acquire_recursive>
 800568a:	bf00      	nop
 800568c:	2000420c 	.word	0x2000420c

08005690 <__malloc_unlock>:
 8005690:	4801      	ldr	r0, [pc, #4]	@ (8005698 <__malloc_unlock+0x8>)
 8005692:	f7ff befc 	b.w	800548e <__retarget_lock_release_recursive>
 8005696:	bf00      	nop
 8005698:	2000420c 	.word	0x2000420c

0800569c <__ssputs_r>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	688e      	ldr	r6, [r1, #8]
 80056a2:	461f      	mov	r7, r3
 80056a4:	42be      	cmp	r6, r7
 80056a6:	680b      	ldr	r3, [r1, #0]
 80056a8:	4682      	mov	sl, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	4690      	mov	r8, r2
 80056ae:	d82d      	bhi.n	800570c <__ssputs_r+0x70>
 80056b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056b8:	d026      	beq.n	8005708 <__ssputs_r+0x6c>
 80056ba:	6965      	ldr	r5, [r4, #20]
 80056bc:	6909      	ldr	r1, [r1, #16]
 80056be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056c2:	eba3 0901 	sub.w	r9, r3, r1
 80056c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056ca:	1c7b      	adds	r3, r7, #1
 80056cc:	444b      	add	r3, r9
 80056ce:	106d      	asrs	r5, r5, #1
 80056d0:	429d      	cmp	r5, r3
 80056d2:	bf38      	it	cc
 80056d4:	461d      	movcc	r5, r3
 80056d6:	0553      	lsls	r3, r2, #21
 80056d8:	d527      	bpl.n	800572a <__ssputs_r+0x8e>
 80056da:	4629      	mov	r1, r5
 80056dc:	f7ff ff52 	bl	8005584 <_malloc_r>
 80056e0:	4606      	mov	r6, r0
 80056e2:	b360      	cbz	r0, 800573e <__ssputs_r+0xa2>
 80056e4:	6921      	ldr	r1, [r4, #16]
 80056e6:	464a      	mov	r2, r9
 80056e8:	f7ff fed2 	bl	8005490 <memcpy>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	6126      	str	r6, [r4, #16]
 80056fa:	6165      	str	r5, [r4, #20]
 80056fc:	444e      	add	r6, r9
 80056fe:	eba5 0509 	sub.w	r5, r5, r9
 8005702:	6026      	str	r6, [r4, #0]
 8005704:	60a5      	str	r5, [r4, #8]
 8005706:	463e      	mov	r6, r7
 8005708:	42be      	cmp	r6, r7
 800570a:	d900      	bls.n	800570e <__ssputs_r+0x72>
 800570c:	463e      	mov	r6, r7
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	4632      	mov	r2, r6
 8005712:	4641      	mov	r1, r8
 8005714:	f000 faa8 	bl	8005c68 <memmove>
 8005718:	68a3      	ldr	r3, [r4, #8]
 800571a:	1b9b      	subs	r3, r3, r6
 800571c:	60a3      	str	r3, [r4, #8]
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	4433      	add	r3, r6
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	2000      	movs	r0, #0
 8005726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572a:	462a      	mov	r2, r5
 800572c:	f000 fac6 	bl	8005cbc <_realloc_r>
 8005730:	4606      	mov	r6, r0
 8005732:	2800      	cmp	r0, #0
 8005734:	d1e0      	bne.n	80056f8 <__ssputs_r+0x5c>
 8005736:	6921      	ldr	r1, [r4, #16]
 8005738:	4650      	mov	r0, sl
 800573a:	f7ff feb7 	bl	80054ac <_free_r>
 800573e:	230c      	movs	r3, #12
 8005740:	f8ca 3000 	str.w	r3, [sl]
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800574a:	81a3      	strh	r3, [r4, #12]
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	e7e9      	b.n	8005726 <__ssputs_r+0x8a>
	...

08005754 <_svfiprintf_r>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	4698      	mov	r8, r3
 800575a:	898b      	ldrh	r3, [r1, #12]
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	b09d      	sub	sp, #116	@ 0x74
 8005760:	4607      	mov	r7, r0
 8005762:	460d      	mov	r5, r1
 8005764:	4614      	mov	r4, r2
 8005766:	d510      	bpl.n	800578a <_svfiprintf_r+0x36>
 8005768:	690b      	ldr	r3, [r1, #16]
 800576a:	b973      	cbnz	r3, 800578a <_svfiprintf_r+0x36>
 800576c:	2140      	movs	r1, #64	@ 0x40
 800576e:	f7ff ff09 	bl	8005584 <_malloc_r>
 8005772:	6028      	str	r0, [r5, #0]
 8005774:	6128      	str	r0, [r5, #16]
 8005776:	b930      	cbnz	r0, 8005786 <_svfiprintf_r+0x32>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	b01d      	add	sp, #116	@ 0x74
 8005782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005786:	2340      	movs	r3, #64	@ 0x40
 8005788:	616b      	str	r3, [r5, #20]
 800578a:	2300      	movs	r3, #0
 800578c:	9309      	str	r3, [sp, #36]	@ 0x24
 800578e:	2320      	movs	r3, #32
 8005790:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005794:	f8cd 800c 	str.w	r8, [sp, #12]
 8005798:	2330      	movs	r3, #48	@ 0x30
 800579a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005938 <_svfiprintf_r+0x1e4>
 800579e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057a2:	f04f 0901 	mov.w	r9, #1
 80057a6:	4623      	mov	r3, r4
 80057a8:	469a      	mov	sl, r3
 80057aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ae:	b10a      	cbz	r2, 80057b4 <_svfiprintf_r+0x60>
 80057b0:	2a25      	cmp	r2, #37	@ 0x25
 80057b2:	d1f9      	bne.n	80057a8 <_svfiprintf_r+0x54>
 80057b4:	ebba 0b04 	subs.w	fp, sl, r4
 80057b8:	d00b      	beq.n	80057d2 <_svfiprintf_r+0x7e>
 80057ba:	465b      	mov	r3, fp
 80057bc:	4622      	mov	r2, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	4638      	mov	r0, r7
 80057c2:	f7ff ff6b 	bl	800569c <__ssputs_r>
 80057c6:	3001      	adds	r0, #1
 80057c8:	f000 80a7 	beq.w	800591a <_svfiprintf_r+0x1c6>
 80057cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ce:	445a      	add	r2, fp
 80057d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80057d2:	f89a 3000 	ldrb.w	r3, [sl]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 809f 	beq.w	800591a <_svfiprintf_r+0x1c6>
 80057dc:	2300      	movs	r3, #0
 80057de:	f04f 32ff 	mov.w	r2, #4294967295
 80057e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e6:	f10a 0a01 	add.w	sl, sl, #1
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	9307      	str	r3, [sp, #28]
 80057ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80057f4:	4654      	mov	r4, sl
 80057f6:	2205      	movs	r2, #5
 80057f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fc:	484e      	ldr	r0, [pc, #312]	@ (8005938 <_svfiprintf_r+0x1e4>)
 80057fe:	f7fa fcef 	bl	80001e0 <memchr>
 8005802:	9a04      	ldr	r2, [sp, #16]
 8005804:	b9d8      	cbnz	r0, 800583e <_svfiprintf_r+0xea>
 8005806:	06d0      	lsls	r0, r2, #27
 8005808:	bf44      	itt	mi
 800580a:	2320      	movmi	r3, #32
 800580c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005810:	0711      	lsls	r1, r2, #28
 8005812:	bf44      	itt	mi
 8005814:	232b      	movmi	r3, #43	@ 0x2b
 8005816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800581a:	f89a 3000 	ldrb.w	r3, [sl]
 800581e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005820:	d015      	beq.n	800584e <_svfiprintf_r+0xfa>
 8005822:	9a07      	ldr	r2, [sp, #28]
 8005824:	4654      	mov	r4, sl
 8005826:	2000      	movs	r0, #0
 8005828:	f04f 0c0a 	mov.w	ip, #10
 800582c:	4621      	mov	r1, r4
 800582e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005832:	3b30      	subs	r3, #48	@ 0x30
 8005834:	2b09      	cmp	r3, #9
 8005836:	d94b      	bls.n	80058d0 <_svfiprintf_r+0x17c>
 8005838:	b1b0      	cbz	r0, 8005868 <_svfiprintf_r+0x114>
 800583a:	9207      	str	r2, [sp, #28]
 800583c:	e014      	b.n	8005868 <_svfiprintf_r+0x114>
 800583e:	eba0 0308 	sub.w	r3, r0, r8
 8005842:	fa09 f303 	lsl.w	r3, r9, r3
 8005846:	4313      	orrs	r3, r2
 8005848:	9304      	str	r3, [sp, #16]
 800584a:	46a2      	mov	sl, r4
 800584c:	e7d2      	b.n	80057f4 <_svfiprintf_r+0xa0>
 800584e:	9b03      	ldr	r3, [sp, #12]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	9103      	str	r1, [sp, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfbb      	ittet	lt
 800585a:	425b      	neglt	r3, r3
 800585c:	f042 0202 	orrlt.w	r2, r2, #2
 8005860:	9307      	strge	r3, [sp, #28]
 8005862:	9307      	strlt	r3, [sp, #28]
 8005864:	bfb8      	it	lt
 8005866:	9204      	strlt	r2, [sp, #16]
 8005868:	7823      	ldrb	r3, [r4, #0]
 800586a:	2b2e      	cmp	r3, #46	@ 0x2e
 800586c:	d10a      	bne.n	8005884 <_svfiprintf_r+0x130>
 800586e:	7863      	ldrb	r3, [r4, #1]
 8005870:	2b2a      	cmp	r3, #42	@ 0x2a
 8005872:	d132      	bne.n	80058da <_svfiprintf_r+0x186>
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	1d1a      	adds	r2, r3, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	9203      	str	r2, [sp, #12]
 800587c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005880:	3402      	adds	r4, #2
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005948 <_svfiprintf_r+0x1f4>
 8005888:	7821      	ldrb	r1, [r4, #0]
 800588a:	2203      	movs	r2, #3
 800588c:	4650      	mov	r0, sl
 800588e:	f7fa fca7 	bl	80001e0 <memchr>
 8005892:	b138      	cbz	r0, 80058a4 <_svfiprintf_r+0x150>
 8005894:	9b04      	ldr	r3, [sp, #16]
 8005896:	eba0 000a 	sub.w	r0, r0, sl
 800589a:	2240      	movs	r2, #64	@ 0x40
 800589c:	4082      	lsls	r2, r0
 800589e:	4313      	orrs	r3, r2
 80058a0:	3401      	adds	r4, #1
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a8:	4824      	ldr	r0, [pc, #144]	@ (800593c <_svfiprintf_r+0x1e8>)
 80058aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058ae:	2206      	movs	r2, #6
 80058b0:	f7fa fc96 	bl	80001e0 <memchr>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d036      	beq.n	8005926 <_svfiprintf_r+0x1d2>
 80058b8:	4b21      	ldr	r3, [pc, #132]	@ (8005940 <_svfiprintf_r+0x1ec>)
 80058ba:	bb1b      	cbnz	r3, 8005904 <_svfiprintf_r+0x1b0>
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	3307      	adds	r3, #7
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	3308      	adds	r3, #8
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ca:	4433      	add	r3, r6
 80058cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ce:	e76a      	b.n	80057a6 <_svfiprintf_r+0x52>
 80058d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d4:	460c      	mov	r4, r1
 80058d6:	2001      	movs	r0, #1
 80058d8:	e7a8      	b.n	800582c <_svfiprintf_r+0xd8>
 80058da:	2300      	movs	r3, #0
 80058dc:	3401      	adds	r4, #1
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f04f 0c0a 	mov.w	ip, #10
 80058e6:	4620      	mov	r0, r4
 80058e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ec:	3a30      	subs	r2, #48	@ 0x30
 80058ee:	2a09      	cmp	r2, #9
 80058f0:	d903      	bls.n	80058fa <_svfiprintf_r+0x1a6>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0c6      	beq.n	8005884 <_svfiprintf_r+0x130>
 80058f6:	9105      	str	r1, [sp, #20]
 80058f8:	e7c4      	b.n	8005884 <_svfiprintf_r+0x130>
 80058fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80058fe:	4604      	mov	r4, r0
 8005900:	2301      	movs	r3, #1
 8005902:	e7f0      	b.n	80058e6 <_svfiprintf_r+0x192>
 8005904:	ab03      	add	r3, sp, #12
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	462a      	mov	r2, r5
 800590a:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <_svfiprintf_r+0x1f0>)
 800590c:	a904      	add	r1, sp, #16
 800590e:	4638      	mov	r0, r7
 8005910:	f3af 8000 	nop.w
 8005914:	1c42      	adds	r2, r0, #1
 8005916:	4606      	mov	r6, r0
 8005918:	d1d6      	bne.n	80058c8 <_svfiprintf_r+0x174>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	065b      	lsls	r3, r3, #25
 800591e:	f53f af2d 	bmi.w	800577c <_svfiprintf_r+0x28>
 8005922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005924:	e72c      	b.n	8005780 <_svfiprintf_r+0x2c>
 8005926:	ab03      	add	r3, sp, #12
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	462a      	mov	r2, r5
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <_svfiprintf_r+0x1f0>)
 800592e:	a904      	add	r1, sp, #16
 8005930:	4638      	mov	r0, r7
 8005932:	f000 f879 	bl	8005a28 <_printf_i>
 8005936:	e7ed      	b.n	8005914 <_svfiprintf_r+0x1c0>
 8005938:	08005ea8 	.word	0x08005ea8
 800593c:	08005eb2 	.word	0x08005eb2
 8005940:	00000000 	.word	0x00000000
 8005944:	0800569d 	.word	0x0800569d
 8005948:	08005eae 	.word	0x08005eae

0800594c <_printf_common>:
 800594c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	4616      	mov	r6, r2
 8005952:	4698      	mov	r8, r3
 8005954:	688a      	ldr	r2, [r1, #8]
 8005956:	690b      	ldr	r3, [r1, #16]
 8005958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800595c:	4293      	cmp	r3, r2
 800595e:	bfb8      	it	lt
 8005960:	4613      	movlt	r3, r2
 8005962:	6033      	str	r3, [r6, #0]
 8005964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005968:	4607      	mov	r7, r0
 800596a:	460c      	mov	r4, r1
 800596c:	b10a      	cbz	r2, 8005972 <_printf_common+0x26>
 800596e:	3301      	adds	r3, #1
 8005970:	6033      	str	r3, [r6, #0]
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	0699      	lsls	r1, r3, #26
 8005976:	bf42      	ittt	mi
 8005978:	6833      	ldrmi	r3, [r6, #0]
 800597a:	3302      	addmi	r3, #2
 800597c:	6033      	strmi	r3, [r6, #0]
 800597e:	6825      	ldr	r5, [r4, #0]
 8005980:	f015 0506 	ands.w	r5, r5, #6
 8005984:	d106      	bne.n	8005994 <_printf_common+0x48>
 8005986:	f104 0a19 	add.w	sl, r4, #25
 800598a:	68e3      	ldr	r3, [r4, #12]
 800598c:	6832      	ldr	r2, [r6, #0]
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	42ab      	cmp	r3, r5
 8005992:	dc26      	bgt.n	80059e2 <_printf_common+0x96>
 8005994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	3b00      	subs	r3, #0
 800599c:	bf18      	it	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	0692      	lsls	r2, r2, #26
 80059a2:	d42b      	bmi.n	80059fc <_printf_common+0xb0>
 80059a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059a8:	4641      	mov	r1, r8
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c8      	blx	r9
 80059ae:	3001      	adds	r0, #1
 80059b0:	d01e      	beq.n	80059f0 <_printf_common+0xa4>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	6922      	ldr	r2, [r4, #16]
 80059b6:	f003 0306 	and.w	r3, r3, #6
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	bf02      	ittt	eq
 80059be:	68e5      	ldreq	r5, [r4, #12]
 80059c0:	6833      	ldreq	r3, [r6, #0]
 80059c2:	1aed      	subeq	r5, r5, r3
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	bf0c      	ite	eq
 80059c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059cc:	2500      	movne	r5, #0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	bfc4      	itt	gt
 80059d2:	1a9b      	subgt	r3, r3, r2
 80059d4:	18ed      	addgt	r5, r5, r3
 80059d6:	2600      	movs	r6, #0
 80059d8:	341a      	adds	r4, #26
 80059da:	42b5      	cmp	r5, r6
 80059dc:	d11a      	bne.n	8005a14 <_printf_common+0xc8>
 80059de:	2000      	movs	r0, #0
 80059e0:	e008      	b.n	80059f4 <_printf_common+0xa8>
 80059e2:	2301      	movs	r3, #1
 80059e4:	4652      	mov	r2, sl
 80059e6:	4641      	mov	r1, r8
 80059e8:	4638      	mov	r0, r7
 80059ea:	47c8      	blx	r9
 80059ec:	3001      	adds	r0, #1
 80059ee:	d103      	bne.n	80059f8 <_printf_common+0xac>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	3501      	adds	r5, #1
 80059fa:	e7c6      	b.n	800598a <_printf_common+0x3e>
 80059fc:	18e1      	adds	r1, r4, r3
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	2030      	movs	r0, #48	@ 0x30
 8005a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a06:	4422      	add	r2, r4
 8005a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a10:	3302      	adds	r3, #2
 8005a12:	e7c7      	b.n	80059a4 <_printf_common+0x58>
 8005a14:	2301      	movs	r3, #1
 8005a16:	4622      	mov	r2, r4
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c8      	blx	r9
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d0e6      	beq.n	80059f0 <_printf_common+0xa4>
 8005a22:	3601      	adds	r6, #1
 8005a24:	e7d9      	b.n	80059da <_printf_common+0x8e>
	...

08005a28 <_printf_i>:
 8005a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2c:	7e0f      	ldrb	r7, [r1, #24]
 8005a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a30:	2f78      	cmp	r7, #120	@ 0x78
 8005a32:	4691      	mov	r9, r2
 8005a34:	4680      	mov	r8, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	469a      	mov	sl, r3
 8005a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a3e:	d807      	bhi.n	8005a50 <_printf_i+0x28>
 8005a40:	2f62      	cmp	r7, #98	@ 0x62
 8005a42:	d80a      	bhi.n	8005a5a <_printf_i+0x32>
 8005a44:	2f00      	cmp	r7, #0
 8005a46:	f000 80d2 	beq.w	8005bee <_printf_i+0x1c6>
 8005a4a:	2f58      	cmp	r7, #88	@ 0x58
 8005a4c:	f000 80b9 	beq.w	8005bc2 <_printf_i+0x19a>
 8005a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a58:	e03a      	b.n	8005ad0 <_printf_i+0xa8>
 8005a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a5e:	2b15      	cmp	r3, #21
 8005a60:	d8f6      	bhi.n	8005a50 <_printf_i+0x28>
 8005a62:	a101      	add	r1, pc, #4	@ (adr r1, 8005a68 <_printf_i+0x40>)
 8005a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005a51 	.word	0x08005a51
 8005a74:	08005a51 	.word	0x08005a51
 8005a78:	08005a51 	.word	0x08005a51
 8005a7c:	08005a51 	.word	0x08005a51
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005a51 	.word	0x08005a51
 8005a88:	08005a51 	.word	0x08005a51
 8005a8c:	08005a51 	.word	0x08005a51
 8005a90:	08005a51 	.word	0x08005a51
 8005a94:	08005bd5 	.word	0x08005bd5
 8005a98:	08005aff 	.word	0x08005aff
 8005a9c:	08005b8f 	.word	0x08005b8f
 8005aa0:	08005a51 	.word	0x08005a51
 8005aa4:	08005a51 	.word	0x08005a51
 8005aa8:	08005bf7 	.word	0x08005bf7
 8005aac:	08005a51 	.word	0x08005a51
 8005ab0:	08005aff 	.word	0x08005aff
 8005ab4:	08005a51 	.word	0x08005a51
 8005ab8:	08005a51 	.word	0x08005a51
 8005abc:	08005b97 	.word	0x08005b97
 8005ac0:	6833      	ldr	r3, [r6, #0]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6032      	str	r2, [r6, #0]
 8005ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e09d      	b.n	8005c10 <_printf_i+0x1e8>
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	1d19      	adds	r1, r3, #4
 8005ada:	6031      	str	r1, [r6, #0]
 8005adc:	0606      	lsls	r6, r0, #24
 8005ade:	d501      	bpl.n	8005ae4 <_printf_i+0xbc>
 8005ae0:	681d      	ldr	r5, [r3, #0]
 8005ae2:	e003      	b.n	8005aec <_printf_i+0xc4>
 8005ae4:	0645      	lsls	r5, r0, #25
 8005ae6:	d5fb      	bpl.n	8005ae0 <_printf_i+0xb8>
 8005ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005aec:	2d00      	cmp	r5, #0
 8005aee:	da03      	bge.n	8005af8 <_printf_i+0xd0>
 8005af0:	232d      	movs	r3, #45	@ 0x2d
 8005af2:	426d      	negs	r5, r5
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af8:	4859      	ldr	r0, [pc, #356]	@ (8005c60 <_printf_i+0x238>)
 8005afa:	230a      	movs	r3, #10
 8005afc:	e011      	b.n	8005b22 <_printf_i+0xfa>
 8005afe:	6821      	ldr	r1, [r4, #0]
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	0608      	lsls	r0, r1, #24
 8005b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b08:	d402      	bmi.n	8005b10 <_printf_i+0xe8>
 8005b0a:	0649      	lsls	r1, r1, #25
 8005b0c:	bf48      	it	mi
 8005b0e:	b2ad      	uxthmi	r5, r5
 8005b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b12:	4853      	ldr	r0, [pc, #332]	@ (8005c60 <_printf_i+0x238>)
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	bf14      	ite	ne
 8005b18:	230a      	movne	r3, #10
 8005b1a:	2308      	moveq	r3, #8
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b22:	6866      	ldr	r6, [r4, #4]
 8005b24:	60a6      	str	r6, [r4, #8]
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	bfa2      	ittt	ge
 8005b2a:	6821      	ldrge	r1, [r4, #0]
 8005b2c:	f021 0104 	bicge.w	r1, r1, #4
 8005b30:	6021      	strge	r1, [r4, #0]
 8005b32:	b90d      	cbnz	r5, 8005b38 <_printf_i+0x110>
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	d04b      	beq.n	8005bd0 <_printf_i+0x1a8>
 8005b38:	4616      	mov	r6, r2
 8005b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b42:	5dc7      	ldrb	r7, [r0, r7]
 8005b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b48:	462f      	mov	r7, r5
 8005b4a:	42bb      	cmp	r3, r7
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	d9f4      	bls.n	8005b3a <_printf_i+0x112>
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d10b      	bne.n	8005b6c <_printf_i+0x144>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07df      	lsls	r7, r3, #31
 8005b58:	d508      	bpl.n	8005b6c <_printf_i+0x144>
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	6861      	ldr	r1, [r4, #4]
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	bfde      	ittt	le
 8005b62:	2330      	movle	r3, #48	@ 0x30
 8005b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b6c:	1b92      	subs	r2, r2, r6
 8005b6e:	6122      	str	r2, [r4, #16]
 8005b70:	f8cd a000 	str.w	sl, [sp]
 8005b74:	464b      	mov	r3, r9
 8005b76:	aa03      	add	r2, sp, #12
 8005b78:	4621      	mov	r1, r4
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	f7ff fee6 	bl	800594c <_printf_common>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d14a      	bne.n	8005c1a <_printf_i+0x1f2>
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	b004      	add	sp, #16
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	f043 0320 	orr.w	r3, r3, #32
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	4833      	ldr	r0, [pc, #204]	@ (8005c64 <_printf_i+0x23c>)
 8005b98:	2778      	movs	r7, #120	@ 0x78
 8005b9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	6831      	ldr	r1, [r6, #0]
 8005ba2:	061f      	lsls	r7, r3, #24
 8005ba4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ba8:	d402      	bmi.n	8005bb0 <_printf_i+0x188>
 8005baa:	065f      	lsls	r7, r3, #25
 8005bac:	bf48      	it	mi
 8005bae:	b2ad      	uxthmi	r5, r5
 8005bb0:	6031      	str	r1, [r6, #0]
 8005bb2:	07d9      	lsls	r1, r3, #31
 8005bb4:	bf44      	itt	mi
 8005bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bba:	6023      	strmi	r3, [r4, #0]
 8005bbc:	b11d      	cbz	r5, 8005bc6 <_printf_i+0x19e>
 8005bbe:	2310      	movs	r3, #16
 8005bc0:	e7ac      	b.n	8005b1c <_printf_i+0xf4>
 8005bc2:	4827      	ldr	r0, [pc, #156]	@ (8005c60 <_printf_i+0x238>)
 8005bc4:	e7e9      	b.n	8005b9a <_printf_i+0x172>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	f023 0320 	bic.w	r3, r3, #32
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	e7f6      	b.n	8005bbe <_printf_i+0x196>
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	e7bd      	b.n	8005b50 <_printf_i+0x128>
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	6825      	ldr	r5, [r4, #0]
 8005bd8:	6961      	ldr	r1, [r4, #20]
 8005bda:	1d18      	adds	r0, r3, #4
 8005bdc:	6030      	str	r0, [r6, #0]
 8005bde:	062e      	lsls	r6, r5, #24
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0x1c0>
 8005be4:	6019      	str	r1, [r3, #0]
 8005be6:	e002      	b.n	8005bee <_printf_i+0x1c6>
 8005be8:	0668      	lsls	r0, r5, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0x1bc>
 8005bec:	8019      	strh	r1, [r3, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	4616      	mov	r6, r2
 8005bf4:	e7bc      	b.n	8005b70 <_printf_i+0x148>
 8005bf6:	6833      	ldr	r3, [r6, #0]
 8005bf8:	1d1a      	adds	r2, r3, #4
 8005bfa:	6032      	str	r2, [r6, #0]
 8005bfc:	681e      	ldr	r6, [r3, #0]
 8005bfe:	6862      	ldr	r2, [r4, #4]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7fa faec 	bl	80001e0 <memchr>
 8005c08:	b108      	cbz	r0, 8005c0e <_printf_i+0x1e6>
 8005c0a:	1b80      	subs	r0, r0, r6
 8005c0c:	6060      	str	r0, [r4, #4]
 8005c0e:	6863      	ldr	r3, [r4, #4]
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	2300      	movs	r3, #0
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c18:	e7aa      	b.n	8005b70 <_printf_i+0x148>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	47d0      	blx	sl
 8005c24:	3001      	adds	r0, #1
 8005c26:	d0ad      	beq.n	8005b84 <_printf_i+0x15c>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	079b      	lsls	r3, r3, #30
 8005c2c:	d413      	bmi.n	8005c56 <_printf_i+0x22e>
 8005c2e:	68e0      	ldr	r0, [r4, #12]
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	4298      	cmp	r0, r3
 8005c34:	bfb8      	it	lt
 8005c36:	4618      	movlt	r0, r3
 8005c38:	e7a6      	b.n	8005b88 <_printf_i+0x160>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	47d0      	blx	sl
 8005c44:	3001      	adds	r0, #1
 8005c46:	d09d      	beq.n	8005b84 <_printf_i+0x15c>
 8005c48:	3501      	adds	r5, #1
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	9903      	ldr	r1, [sp, #12]
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dcf2      	bgt.n	8005c3a <_printf_i+0x212>
 8005c54:	e7eb      	b.n	8005c2e <_printf_i+0x206>
 8005c56:	2500      	movs	r5, #0
 8005c58:	f104 0619 	add.w	r6, r4, #25
 8005c5c:	e7f5      	b.n	8005c4a <_printf_i+0x222>
 8005c5e:	bf00      	nop
 8005c60:	08005eb9 	.word	0x08005eb9
 8005c64:	08005eca 	.word	0x08005eca

08005c68 <memmove>:
 8005c68:	4288      	cmp	r0, r1
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	eb01 0402 	add.w	r4, r1, r2
 8005c70:	d902      	bls.n	8005c78 <memmove+0x10>
 8005c72:	4284      	cmp	r4, r0
 8005c74:	4623      	mov	r3, r4
 8005c76:	d807      	bhi.n	8005c88 <memmove+0x20>
 8005c78:	1e43      	subs	r3, r0, #1
 8005c7a:	42a1      	cmp	r1, r4
 8005c7c:	d008      	beq.n	8005c90 <memmove+0x28>
 8005c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c86:	e7f8      	b.n	8005c7a <memmove+0x12>
 8005c88:	4402      	add	r2, r0
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	428a      	cmp	r2, r1
 8005c8e:	d100      	bne.n	8005c92 <memmove+0x2a>
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c9a:	e7f7      	b.n	8005c8c <memmove+0x24>

08005c9c <_sbrk_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d06      	ldr	r5, [pc, #24]	@ (8005cb8 <_sbrk_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fa ffe6 	bl	8000c78 <_sbrk>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_sbrk_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_sbrk_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	20004208 	.word	0x20004208

08005cbc <_realloc_r>:
 8005cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4615      	mov	r5, r2
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b921      	cbnz	r1, 8005cd2 <_realloc_r+0x16>
 8005cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	4611      	mov	r1, r2
 8005cce:	f7ff bc59 	b.w	8005584 <_malloc_r>
 8005cd2:	b92a      	cbnz	r2, 8005ce0 <_realloc_r+0x24>
 8005cd4:	f7ff fbea 	bl	80054ac <_free_r>
 8005cd8:	2400      	movs	r4, #0
 8005cda:	4620      	mov	r0, r4
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce0:	f000 f81a 	bl	8005d18 <_malloc_usable_size_r>
 8005ce4:	4285      	cmp	r5, r0
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	d802      	bhi.n	8005cf0 <_realloc_r+0x34>
 8005cea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cee:	d8f4      	bhi.n	8005cda <_realloc_r+0x1e>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f7ff fc46 	bl	8005584 <_malloc_r>
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0ec      	beq.n	8005cd8 <_realloc_r+0x1c>
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	462a      	mov	r2, r5
 8005d02:	4621      	mov	r1, r4
 8005d04:	bf28      	it	cs
 8005d06:	4632      	movcs	r2, r6
 8005d08:	f7ff fbc2 	bl	8005490 <memcpy>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4640      	mov	r0, r8
 8005d10:	f7ff fbcc 	bl	80054ac <_free_r>
 8005d14:	463c      	mov	r4, r7
 8005d16:	e7e0      	b.n	8005cda <_realloc_r+0x1e>

08005d18 <_malloc_usable_size_r>:
 8005d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d1c:	1f18      	subs	r0, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bfbc      	itt	lt
 8005d22:	580b      	ldrlt	r3, [r1, r0]
 8005d24:	18c0      	addlt	r0, r0, r3
 8005d26:	4770      	bx	lr

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
