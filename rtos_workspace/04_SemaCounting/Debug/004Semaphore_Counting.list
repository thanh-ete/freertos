
004Semaphore_Counting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f34  08005f34  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f3c  08005f3c  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005f44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000701c  2**0
                  CONTENTS
 10 .bss          00004074  2000001c  2000001c  0000701c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004090  20004090  0000701c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011985  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b12  00000000  00000000  000189d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  0001b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cad  00000000  00000000  0001c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002272f  00000000  00000000  0001d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013939  00000000  00000000  0003f904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30b5  00000000  00000000  0005323d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001262f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004448  00000000  00000000  00126338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cc4 	.word	0x08005cc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005cc4 	.word	0x08005cc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000038 	.word	0x20000038
 8000500:	2000008c 	.word	0x2000008c

08000504 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fe75 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f871 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f903 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8d7 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	4924      	ldr	r1, [pc, #144]	@ (80005b0 <main+0xac>)
 800051e:	4825      	ldr	r0, [pc, #148]	@ (80005b4 <main+0xb0>)
 8000520:	f002 fa03 	bl	800292a <HAL_UART_Receive_IT>
  CountingSem = xSemaphoreCreateCounting(3, 0);
 8000524:	2100      	movs	r1, #0
 8000526:	2003      	movs	r0, #3
 8000528:	f003 faf2 	bl	8003b10 <xQueueCreateCountingSemaphore>
 800052c:	4603      	mov	r3, r0
 800052e:	4a22      	ldr	r2, [pc, #136]	@ (80005b8 <main+0xb4>)
 8000530:	6013      	str	r3, [r2, #0]
  if (CountingSem == NULL)
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <main+0xb4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d106      	bne.n	8000548 <main+0x44>
    HAL_UART_Transmit(&huart2, (uint8_t *)"Unable to Create Semaphore\n\n", 28, 100);
 800053a:	2364      	movs	r3, #100	@ 0x64
 800053c:	221c      	movs	r2, #28
 800053e:	491f      	ldr	r1, [pc, #124]	@ (80005bc <main+0xb8>)
 8000540:	481c      	ldr	r0, [pc, #112]	@ (80005b4 <main+0xb0>)
 8000542:	f002 f967 	bl	8002814 <HAL_UART_Transmit>
 8000546:	e006      	b.n	8000556 <main+0x52>
  else
    HAL_UART_Transmit(&huart2, (uint8_t *)"Counting Semaphore created successfully\n\n", 41, 1000);
 8000548:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054c:	2229      	movs	r2, #41	@ 0x29
 800054e:	491c      	ldr	r1, [pc, #112]	@ (80005c0 <main+0xbc>)
 8000550:	4818      	ldr	r0, [pc, #96]	@ (80005b4 <main+0xb0>)
 8000552:	f002 f95f 	bl	8002814 <HAL_UART_Transmit>

  /* Create Tasks*/

  xTaskCreate(HPT_Task, "HPT", 128, NULL, 3, &HPThandler);
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <main+0xc0>)
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2303      	movs	r3, #3
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2280      	movs	r2, #128	@ 0x80
 8000562:	4919      	ldr	r1, [pc, #100]	@ (80005c8 <main+0xc4>)
 8000564:	4819      	ldr	r0, [pc, #100]	@ (80005cc <main+0xc8>)
 8000566:	f003 ff2c 	bl	80043c2 <xTaskCreate>
  xTaskCreate(MPT_Task, "MPT", 128, NULL, 2, &MPThandler);
 800056a:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <main+0xcc>)
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2302      	movs	r3, #2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	4917      	ldr	r1, [pc, #92]	@ (80005d4 <main+0xd0>)
 8000578:	4817      	ldr	r0, [pc, #92]	@ (80005d8 <main+0xd4>)
 800057a:	f003 ff22 	bl	80043c2 <xTaskCreate>
  xTaskCreate(LPT_Task, "LPT", 128, NULL, 1, &LPThandler);
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <main+0xd8>)
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	4915      	ldr	r1, [pc, #84]	@ (80005e0 <main+0xdc>)
 800058c:	4815      	ldr	r0, [pc, #84]	@ (80005e4 <main+0xe0>)
 800058e:	f003 ff18 	bl	80043c2 <xTaskCreate>
  xTaskCreate(VLPT_Task, "VLPT", 128, NULL, 0, &VLPThandler);
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <main+0xe4>)
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2300      	movs	r3, #0
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2280      	movs	r2, #128	@ 0x80
 800059e:	4913      	ldr	r1, [pc, #76]	@ (80005ec <main+0xe8>)
 80005a0:	4813      	ldr	r0, [pc, #76]	@ (80005f0 <main+0xec>)
 80005a2:	f003 ff0e 	bl	80043c2 <xTaskCreate>

  vTaskStartScheduler();
 80005a6:	f004 f879 	bl	800469c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005aa:	bf00      	nop
 80005ac:	e7fd      	b.n	80005aa <main+0xa6>
 80005ae:	bf00      	nop
 80005b0:	200002ec 	.word	0x200002ec
 80005b4:	2000028c 	.word	0x2000028c
 80005b8:	200002e4 	.word	0x200002e4
 80005bc:	08005cdc 	.word	0x08005cdc
 80005c0:	08005cfc 	.word	0x08005cfc
 80005c4:	200002d4 	.word	0x200002d4
 80005c8:	08005d28 	.word	0x08005d28
 80005cc:	0800076d 	.word	0x0800076d
 80005d0:	200002d8 	.word	0x200002d8
 80005d4:	08005d2c 	.word	0x08005d2c
 80005d8:	08000955 	.word	0x08000955
 80005dc:	200002dc 	.word	0x200002dc
 80005e0:	08005d30 	.word	0x08005d30
 80005e4:	08000b11 	.word	0x08000b11
 80005e8:	200002e0 	.word	0x200002e0
 80005ec:	08005d34 	.word	0x08005d34
 80005f0:	08000ccd 	.word	0x08000ccd

080005f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fb14 	bl	8005c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	@ (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000668:	23a8      	movs	r3, #168	@ 0xa8
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f90f 	bl	800189c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 fc4e 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fb70 	bl	8001d8c <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 fc37 	bl	8000f24 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f002 f838 	bl	8002774 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 fc0b 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000028c 	.word	0x2000028c
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x4c>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_GPIO_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_GPIO_Init+0x4c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x4c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_GPIO_Init+0x4c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <HPT_Task>:

/* USER CODE BEGIN 4 */

// High Priority
void HPT_Task(void *pvParameters)
{
 800076c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076e:	b0ad      	sub	sp, #180	@ 0xb4
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  char sresource[3];
  int semcount = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char ssemcount[2];
  xSemaphoreGive(CountingSem);
 800077a:	4b6d      	ldr	r3, [pc, #436]	@ (8000930 <HPT_Task+0x1c4>)
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	f003 f9fa 	bl	8003b7c <xQueueGenericSend>
  xSemaphoreGive(CountingSem);
 8000788:	4b69      	ldr	r3, [pc, #420]	@ (8000930 <HPT_Task+0x1c4>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	f003 f9f3 	bl	8003b7c <xQueueGenericSend>
  xSemaphoreGive(CountingSem);
 8000796:	4b66      	ldr	r3, [pc, #408]	@ (8000930 <HPT_Task+0x1c4>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	f003 f9ec 	bl	8003b7c <xQueueGenericSend>

  while (1)
  {
    char str[150];
    strcpy(str, "Entered HPT Task\n About to ACQUIRE the Semaphore\n ");
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4a62      	ldr	r2, [pc, #392]	@ (8000934 <HPT_Task+0x1c8>)
 80007aa:	461c      	mov	r4, r3
 80007ac:	4615      	mov	r5, r2
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	682b      	ldr	r3, [r5, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	8022      	strh	r2, [r4, #0]
 80007c0:	3402      	adds	r4, #2
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	7023      	strb	r3, [r4, #0]
    semcount = uxSemaphoreGetCount(CountingSem);
 80007c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000930 <HPT_Task+0x1c4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fc78 	bl	80040c0 <uxQueueMessagesWaiting>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    itoa(semcount, ssemcount, 10);
 80007d6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007da:	220a      	movs	r2, #10
 80007dc:	4619      	mov	r1, r3
 80007de:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80007e2:	f005 f9e1 	bl	8005ba8 <itoa>
    strcat(str, "Tokens available are: ");
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fcf0 	bl	80001d0 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4413      	add	r3, r2
 80007fa:	4a4f      	ldr	r2, [pc, #316]	@ (8000938 <HPT_Task+0x1cc>)
 80007fc:	461c      	mov	r4, r3
 80007fe:	4615      	mov	r5, r2
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	6020      	str	r0, [r4, #0]
 8000804:	6061      	str	r1, [r4, #4]
 8000806:	60a2      	str	r2, [r4, #8]
 8000808:	60e3      	str	r3, [r4, #12]
 800080a:	6828      	ldr	r0, [r5, #0]
 800080c:	6120      	str	r0, [r4, #16]
 800080e:	88ab      	ldrh	r3, [r5, #4]
 8000810:	79aa      	ldrb	r2, [r5, #6]
 8000812:	82a3      	strh	r3, [r4, #20]
 8000814:	4613      	mov	r3, r2
 8000816:	75a3      	strb	r3, [r4, #22]
    strcat(str, ssemcount);
 8000818:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fa0c 	bl	8005c40 <strcat>
    strcat(str, "\n\n");
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fccf 	bl	80001d0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4413      	add	r3, r2
 800083c:	4a3f      	ldr	r2, [pc, #252]	@ (800093c <HPT_Task+0x1d0>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fcc0 	bl	80001d0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 010c 	add.w	r1, r7, #12
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	4838      	ldr	r0, [pc, #224]	@ (8000940 <HPT_Task+0x1d4>)
 800085e:	f001 ffd9 	bl	8002814 <HAL_UART_Transmit>

    xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000862:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <HPT_Task+0x1c4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f04f 31ff 	mov.w	r1, #4294967295
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fb18 	bl	8003ea0 <xQueueSemaphoreTake>

    itoa(resource[indx], sresource, 10);
 8000870:	4b34      	ldr	r3, [pc, #208]	@ (8000944 <HPT_Task+0x1d8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a34      	ldr	r2, [pc, #208]	@ (8000948 <HPT_Task+0x1dc>)
 8000876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800087e:	220a      	movs	r2, #10
 8000880:	4618      	mov	r0, r3
 8000882:	f005 f991 	bl	8005ba8 <itoa>
    strcpy(str, "Leaving HPT Task\n Data ACCESSED is:: ");
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4a30      	ldr	r2, [pc, #192]	@ (800094c <HPT_Task+0x1e0>)
 800088c:	461c      	mov	r4, r3
 800088e:	4615      	mov	r5, r2
 8000890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000898:	e895 0003 	ldmia.w	r5, {r0, r1}
 800089c:	6020      	str	r0, [r4, #0]
 800089e:	3404      	adds	r4, #4
 80008a0:	8021      	strh	r1, [r4, #0]
    strcat(str, sresource);
 80008a2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 f9c7 	bl	8005c40 <strcat>
    strcat(str, "\n Not releasing the Semaphore\n\n\n");
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fc8a 	bl	80001d0 <strlen>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4413      	add	r3, r2
 80008c6:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <HPT_Task+0x1e4>)
 80008c8:	4614      	mov	r4, r2
 80008ca:	469c      	mov	ip, r3
 80008cc:	f104 0e20 	add.w	lr, r4, #32
 80008d0:	4665      	mov	r5, ip
 80008d2:	4626      	mov	r6, r4
 80008d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008d6:	6028      	str	r0, [r5, #0]
 80008d8:	6069      	str	r1, [r5, #4]
 80008da:	60aa      	str	r2, [r5, #8]
 80008dc:	60eb      	str	r3, [r5, #12]
 80008de:	3410      	adds	r4, #16
 80008e0:	f10c 0c10 	add.w	ip, ip, #16
 80008e4:	4574      	cmp	r4, lr
 80008e6:	d1f3      	bne.n	80008d0 <HPT_Task+0x164>
 80008e8:	4663      	mov	r3, ip
 80008ea:	4622      	mov	r2, r4
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc6b 	bl	80001d0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f107 010c 	add.w	r1, r7, #12
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <HPT_Task+0x1d4>)
 8000908:	f001 ff84 	bl	8002814 <HAL_UART_Transmit>

    indx++;
 800090c:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HPT_Task+0x1d8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <HPT_Task+0x1d8>)
 8000914:	6013      	str	r3, [r2, #0]
    if (indx > 2)
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HPT_Task+0x1d8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	dd02      	ble.n	8000924 <HPT_Task+0x1b8>
      indx = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HPT_Task+0x1d8>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]

    vTaskDelay(3000);
 8000924:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000928:	f003 fe82 	bl	8004630 <vTaskDelay>
  {
 800092c:	e73a      	b.n	80007a4 <HPT_Task+0x38>
 800092e:	bf00      	nop
 8000930:	200002e4 	.word	0x200002e4
 8000934:	08005d3c 	.word	0x08005d3c
 8000938:	08005d70 	.word	0x08005d70
 800093c:	08005d88 	.word	0x08005d88
 8000940:	2000028c 	.word	0x2000028c
 8000944:	200002e8 	.word	0x200002e8
 8000948:	20000000 	.word	0x20000000
 800094c:	08005d8c 	.word	0x08005d8c
 8000950:	08005db4 	.word	0x08005db4

08000954 <MPT_Task>:
    //		vTaskDelete(NULL);
  }
}
// Medium Priority
void MPT_Task(void *pvParameters)
{
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	b0ad      	sub	sp, #180	@ 0xb4
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  char sresource[3];
  int semcount = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char ssemcount[2];

  while (1)
  {
    char str[150];
    strcpy(str, "Entered MPT Task\n About to ACQUIRE the Semaphore\n ");
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4a61      	ldr	r2, [pc, #388]	@ (8000aec <MPT_Task+0x198>)
 8000968:	461c      	mov	r4, r3
 800096a:	4615      	mov	r5, r2
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	8022      	strh	r2, [r4, #0]
 800097e:	3402      	adds	r4, #2
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	7023      	strb	r3, [r4, #0]
    semcount = uxSemaphoreGetCount(CountingSem);
 8000984:	4b5a      	ldr	r3, [pc, #360]	@ (8000af0 <MPT_Task+0x19c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fb99 	bl	80040c0 <uxQueueMessagesWaiting>
 800098e:	4603      	mov	r3, r0
 8000990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    itoa(semcount, ssemcount, 10);
 8000994:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000998:	220a      	movs	r2, #10
 800099a:	4619      	mov	r1, r3
 800099c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80009a0:	f005 f902 	bl	8005ba8 <itoa>
    strcat(str, "Tokens available are: ");
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc11 	bl	80001d0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4413      	add	r3, r2
 80009b8:	4a4e      	ldr	r2, [pc, #312]	@ (8000af4 <MPT_Task+0x1a0>)
 80009ba:	461c      	mov	r4, r3
 80009bc:	4615      	mov	r5, r2
 80009be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c0:	6020      	str	r0, [r4, #0]
 80009c2:	6061      	str	r1, [r4, #4]
 80009c4:	60a2      	str	r2, [r4, #8]
 80009c6:	60e3      	str	r3, [r4, #12]
 80009c8:	6828      	ldr	r0, [r5, #0]
 80009ca:	6120      	str	r0, [r4, #16]
 80009cc:	88ab      	ldrh	r3, [r5, #4]
 80009ce:	79aa      	ldrb	r2, [r5, #6]
 80009d0:	82a3      	strh	r3, [r4, #20]
 80009d2:	4613      	mov	r3, r2
 80009d4:	75a3      	strb	r3, [r4, #22]
    strcat(str, ssemcount);
 80009d6:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f005 f92d 	bl	8005c40 <strcat>
    strcat(str, "\n\n");
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fbf0 	bl	80001d0 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4413      	add	r3, r2
 80009fa:	4a3f      	ldr	r2, [pc, #252]	@ (8000af8 <MPT_Task+0x1a4>)
 80009fc:	8811      	ldrh	r1, [r2, #0]
 80009fe:	7892      	ldrb	r2, [r2, #2]
 8000a00:	8019      	strh	r1, [r3, #0]
 8000a02:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fbe1 	bl	80001d0 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f107 010c 	add.w	r1, r7, #12
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	4838      	ldr	r0, [pc, #224]	@ (8000afc <MPT_Task+0x1a8>)
 8000a1c:	f001 fefa 	bl	8002814 <HAL_UART_Transmit>

    xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000a20:	4b33      	ldr	r3, [pc, #204]	@ (8000af0 <MPT_Task+0x19c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 fa39 	bl	8003ea0 <xQueueSemaphoreTake>

    itoa(resource[indx], sresource, 10);
 8000a2e:	4b34      	ldr	r3, [pc, #208]	@ (8000b00 <MPT_Task+0x1ac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a34      	ldr	r2, [pc, #208]	@ (8000b04 <MPT_Task+0x1b0>)
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f8b2 	bl	8005ba8 <itoa>
    strcpy(str, "Leaving MPT Task\n Data ACCESSED is:: ");
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <MPT_Task+0x1b4>)
 8000a4a:	461c      	mov	r4, r3
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a5a:	6020      	str	r0, [r4, #0]
 8000a5c:	3404      	adds	r4, #4
 8000a5e:	8021      	strh	r1, [r4, #0]
    strcat(str, sresource);
 8000a60:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 f8e8 	bl	8005c40 <strcat>
    strcat(str, "\n Not releasing the Semaphore\n\n\n");
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fbab 	bl	80001d0 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4413      	add	r3, r2
 8000a84:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <MPT_Task+0x1b8>)
 8000a86:	4614      	mov	r4, r2
 8000a88:	469c      	mov	ip, r3
 8000a8a:	f104 0e20 	add.w	lr, r4, #32
 8000a8e:	4665      	mov	r5, ip
 8000a90:	4626      	mov	r6, r4
 8000a92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a94:	6028      	str	r0, [r5, #0]
 8000a96:	6069      	str	r1, [r5, #4]
 8000a98:	60aa      	str	r2, [r5, #8]
 8000a9a:	60eb      	str	r3, [r5, #12]
 8000a9c:	3410      	adds	r4, #16
 8000a9e:	f10c 0c10 	add.w	ip, ip, #16
 8000aa2:	4574      	cmp	r4, lr
 8000aa4:	d1f3      	bne.n	8000a8e <MPT_Task+0x13a>
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fb8c 	bl	80001d0 <strlen>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f107 010c 	add.w	r1, r7, #12
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MPT_Task+0x1a8>)
 8000ac6:	f001 fea5 	bl	8002814 <HAL_UART_Transmit>

    indx++;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <MPT_Task+0x1ac>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <MPT_Task+0x1ac>)
 8000ad2:	6013      	str	r3, [r2, #0]
    if (indx > 2)
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MPT_Task+0x1ac>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	dd02      	ble.n	8000ae2 <MPT_Task+0x18e>
      indx = 0;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MPT_Task+0x1ac>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]

    vTaskDelay(2000);
 8000ae2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae6:	f003 fda3 	bl	8004630 <vTaskDelay>
  {
 8000aea:	e73a      	b.n	8000962 <MPT_Task+0xe>
 8000aec:	08005dd8 	.word	0x08005dd8
 8000af0:	200002e4 	.word	0x200002e4
 8000af4:	08005d70 	.word	0x08005d70
 8000af8:	08005d88 	.word	0x08005d88
 8000afc:	2000028c 	.word	0x2000028c
 8000b00:	200002e8 	.word	0x200002e8
 8000b04:	20000000 	.word	0x20000000
 8000b08:	08005e0c 	.word	0x08005e0c
 8000b0c:	08005db4 	.word	0x08005db4

08000b10 <LPT_Task>:
    //		vTaskDelete(NULL);
  }
}
// Low Priority
void LPT_Task(void *pvParameters)
{
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	b0ad      	sub	sp, #180	@ 0xb4
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  char sresource[3];
  int semcount = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char ssemcount[2];

  while (1)
  {
    char str[150];
    strcpy(str, "Entered LPT Task\n About to ACQUIRE the Semaphore\n ");
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4a61      	ldr	r2, [pc, #388]	@ (8000ca8 <LPT_Task+0x198>)
 8000b24:	461c      	mov	r4, r3
 8000b26:	4615      	mov	r5, r2
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	8022      	strh	r2, [r4, #0]
 8000b3a:	3402      	adds	r4, #2
 8000b3c:	0c1b      	lsrs	r3, r3, #16
 8000b3e:	7023      	strb	r3, [r4, #0]
    semcount = uxSemaphoreGetCount(CountingSem);
 8000b40:	4b5a      	ldr	r3, [pc, #360]	@ (8000cac <LPT_Task+0x19c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fabb 	bl	80040c0 <uxQueueMessagesWaiting>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    itoa(semcount, ssemcount, 10);
 8000b50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b54:	220a      	movs	r2, #10
 8000b56:	4619      	mov	r1, r3
 8000b58:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000b5c:	f005 f824 	bl	8005ba8 <itoa>
    strcat(str, "Tokens available are: ");
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb33 	bl	80001d0 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4413      	add	r3, r2
 8000b74:	4a4e      	ldr	r2, [pc, #312]	@ (8000cb0 <LPT_Task+0x1a0>)
 8000b76:	461c      	mov	r4, r3
 8000b78:	4615      	mov	r5, r2
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	6020      	str	r0, [r4, #0]
 8000b7e:	6061      	str	r1, [r4, #4]
 8000b80:	60a2      	str	r2, [r4, #8]
 8000b82:	60e3      	str	r3, [r4, #12]
 8000b84:	6828      	ldr	r0, [r5, #0]
 8000b86:	6120      	str	r0, [r4, #16]
 8000b88:	88ab      	ldrh	r3, [r5, #4]
 8000b8a:	79aa      	ldrb	r2, [r5, #6]
 8000b8c:	82a3      	strh	r3, [r4, #20]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	75a3      	strb	r3, [r4, #22]
    strcat(str, ssemcount);
 8000b92:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 f84f 	bl	8005c40 <strcat>
    strcat(str, "\n\n");
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb12 	bl	80001d0 <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb4 <LPT_Task+0x1a4>)
 8000bb8:	8811      	ldrh	r1, [r2, #0]
 8000bba:	7892      	ldrb	r2, [r2, #2]
 8000bbc:	8019      	strh	r1, [r3, #0]
 8000bbe:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb03 	bl	80001d0 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 010c 	add.w	r1, r7, #12
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4838      	ldr	r0, [pc, #224]	@ (8000cb8 <LPT_Task+0x1a8>)
 8000bd8:	f001 fe1c 	bl	8002814 <HAL_UART_Transmit>

    xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000bdc:	4b33      	ldr	r3, [pc, #204]	@ (8000cac <LPT_Task+0x19c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 f95b 	bl	8003ea0 <xQueueSemaphoreTake>

    itoa(resource[indx], sresource, 10);
 8000bea:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <LPT_Task+0x1ac>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a34      	ldr	r2, [pc, #208]	@ (8000cc0 <LPT_Task+0x1b0>)
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8000bf8:	220a      	movs	r2, #10
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 ffd4 	bl	8005ba8 <itoa>
    strcpy(str, "Leaving LPT Task\n Data ACCESSED is:: ");
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4a2f      	ldr	r2, [pc, #188]	@ (8000cc4 <LPT_Task+0x1b4>)
 8000c06:	461c      	mov	r4, r3
 8000c08:	4615      	mov	r5, r2
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c16:	6020      	str	r0, [r4, #0]
 8000c18:	3404      	adds	r4, #4
 8000c1a:	8021      	strh	r1, [r4, #0]
    strcat(str, sresource);
 8000c1c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f005 f80a 	bl	8005c40 <strcat>
    strcat(str, "\n Not releasing the Semaphore\n\n\n");
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff facd 	bl	80001d0 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <LPT_Task+0x1b8>)
 8000c42:	4614      	mov	r4, r2
 8000c44:	469c      	mov	ip, r3
 8000c46:	f104 0e20 	add.w	lr, r4, #32
 8000c4a:	4665      	mov	r5, ip
 8000c4c:	4626      	mov	r6, r4
 8000c4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c50:	6028      	str	r0, [r5, #0]
 8000c52:	6069      	str	r1, [r5, #4]
 8000c54:	60aa      	str	r2, [r5, #8]
 8000c56:	60eb      	str	r3, [r5, #12]
 8000c58:	3410      	adds	r4, #16
 8000c5a:	f10c 0c10 	add.w	ip, ip, #16
 8000c5e:	4574      	cmp	r4, lr
 8000c60:	d1f3      	bne.n	8000c4a <LPT_Task+0x13a>
 8000c62:	4663      	mov	r3, ip
 8000c64:	4622      	mov	r2, r4
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff faae 	bl	80001d0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 010c 	add.w	r1, r7, #12
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <LPT_Task+0x1a8>)
 8000c82:	f001 fdc7 	bl	8002814 <HAL_UART_Transmit>

    indx++;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <LPT_Task+0x1ac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <LPT_Task+0x1ac>)
 8000c8e:	6013      	str	r3, [r2, #0]
    if (indx > 2)
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <LPT_Task+0x1ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	dd02      	ble.n	8000c9e <LPT_Task+0x18e>
      indx = 0;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <LPT_Task+0x1ac>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]

    vTaskDelay(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca2:	f003 fcc5 	bl	8004630 <vTaskDelay>
  {
 8000ca6:	e73a      	b.n	8000b1e <LPT_Task+0xe>
 8000ca8:	08005e34 	.word	0x08005e34
 8000cac:	200002e4 	.word	0x200002e4
 8000cb0:	08005d70 	.word	0x08005d70
 8000cb4:	08005d88 	.word	0x08005d88
 8000cb8:	2000028c 	.word	0x2000028c
 8000cbc:	200002e8 	.word	0x200002e8
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	08005e68 	.word	0x08005e68
 8000cc8:	08005db4 	.word	0x08005db4

08000ccc <VLPT_Task>:
    //		vTaskDelete(NULL);
  }
}
// Very-low Priority
void VLPT_Task(void *pvParameters)
{
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	b0ad      	sub	sp, #180	@ 0xb4
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  char sresource[3];
  int semcount = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char ssemcount[2];

  while (1)
  {
    char str[150];
    strcpy(str, "Entered VLPT Task\n About to ACQUIRE the Semaphore\n ");
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4a61      	ldr	r2, [pc, #388]	@ (8000e64 <VLPT_Task+0x198>)
 8000ce0:	461c      	mov	r4, r3
 8000ce2:	4615      	mov	r5, r2
 8000ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	6023      	str	r3, [r4, #0]
    semcount = uxSemaphoreGetCount(CountingSem);
 8000cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8000e68 <VLPT_Task+0x19c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 f9e1 	bl	80040c0 <uxQueueMessagesWaiting>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    itoa(semcount, ssemcount, 10);
 8000d04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d08:	220a      	movs	r2, #10
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000d10:	f004 ff4a 	bl	8005ba8 <itoa>
    strcat(str, "Tokens available are: ");
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fa59 	bl	80001d0 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4413      	add	r3, r2
 8000d28:	4a50      	ldr	r2, [pc, #320]	@ (8000e6c <VLPT_Task+0x1a0>)
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	4615      	mov	r5, r2
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	6020      	str	r0, [r4, #0]
 8000d32:	6061      	str	r1, [r4, #4]
 8000d34:	60a2      	str	r2, [r4, #8]
 8000d36:	60e3      	str	r3, [r4, #12]
 8000d38:	6828      	ldr	r0, [r5, #0]
 8000d3a:	6120      	str	r0, [r4, #16]
 8000d3c:	88ab      	ldrh	r3, [r5, #4]
 8000d3e:	79aa      	ldrb	r2, [r5, #6]
 8000d40:	82a3      	strh	r3, [r4, #20]
 8000d42:	4613      	mov	r3, r2
 8000d44:	75a3      	strb	r3, [r4, #22]
    strcat(str, ssemcount);
 8000d46:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 ff75 	bl	8005c40 <strcat>
    strcat(str, "\n\n");
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fa38 	bl	80001d0 <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a41      	ldr	r2, [pc, #260]	@ (8000e70 <VLPT_Task+0x1a4>)
 8000d6c:	8811      	ldrh	r1, [r2, #0]
 8000d6e:	7892      	ldrb	r2, [r2, #2]
 8000d70:	8019      	strh	r1, [r3, #0]
 8000d72:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fa29 	bl	80001d0 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f107 010c 	add.w	r1, r7, #12
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	483a      	ldr	r0, [pc, #232]	@ (8000e74 <VLPT_Task+0x1a8>)
 8000d8c:	f001 fd42 	bl	8002814 <HAL_UART_Transmit>

    xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000d90:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <VLPT_Task+0x19c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 f881 	bl	8003ea0 <xQueueSemaphoreTake>

    itoa(resource[indx], sresource, 10);
 8000d9e:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <VLPT_Task+0x1ac>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a36      	ldr	r2, [pc, #216]	@ (8000e7c <VLPT_Task+0x1b0>)
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8000dac:	220a      	movs	r2, #10
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 fefa 	bl	8005ba8 <itoa>
    strcpy(str, "Leaving VLPT Task\n Data ACCESSED is:: ");
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4a31      	ldr	r2, [pc, #196]	@ (8000e80 <VLPT_Task+0x1b4>)
 8000dba:	461c      	mov	r4, r3
 8000dbc:	4615      	mov	r5, r2
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dca:	6020      	str	r0, [r4, #0]
 8000dcc:	3404      	adds	r4, #4
 8000dce:	8021      	strh	r1, [r4, #0]
 8000dd0:	3402      	adds	r4, #2
 8000dd2:	0c0b      	lsrs	r3, r1, #16
 8000dd4:	7023      	strb	r3, [r4, #0]
    strcat(str, sresource);
 8000dd6:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 ff2d 	bl	8005c40 <strcat>
    strcat(str, "\n Not releasing the Semaphore\n\n\n");
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9f0 	bl	80001d0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a22      	ldr	r2, [pc, #136]	@ (8000e84 <VLPT_Task+0x1b8>)
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	469c      	mov	ip, r3
 8000e00:	f104 0e20 	add.w	lr, r4, #32
 8000e04:	4665      	mov	r5, ip
 8000e06:	4626      	mov	r6, r4
 8000e08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e0a:	6028      	str	r0, [r5, #0]
 8000e0c:	6069      	str	r1, [r5, #4]
 8000e0e:	60aa      	str	r2, [r5, #8]
 8000e10:	60eb      	str	r3, [r5, #12]
 8000e12:	3410      	adds	r4, #16
 8000e14:	f10c 0c10 	add.w	ip, ip, #16
 8000e18:	4574      	cmp	r4, lr
 8000e1a:	d1f3      	bne.n	8000e04 <VLPT_Task+0x138>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	4622      	mov	r2, r4
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f9d1 	bl	80001d0 <strlen>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	f107 010c 	add.w	r1, r7, #12
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <VLPT_Task+0x1a8>)
 8000e3c:	f001 fcea 	bl	8002814 <HAL_UART_Transmit>

    indx++;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <VLPT_Task+0x1ac>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <VLPT_Task+0x1ac>)
 8000e48:	6013      	str	r3, [r2, #0]
    if (indx > 2)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <VLPT_Task+0x1ac>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	dd02      	ble.n	8000e58 <VLPT_Task+0x18c>
      indx = 0;
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <VLPT_Task+0x1ac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

    vTaskDelay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e5c:	f003 fbe8 	bl	8004630 <vTaskDelay>
  {
 8000e60:	e73b      	b.n	8000cda <VLPT_Task+0xe>
 8000e62:	bf00      	nop
 8000e64:	08005e90 	.word	0x08005e90
 8000e68:	200002e4 	.word	0x200002e4
 8000e6c:	08005d70 	.word	0x08005d70
 8000e70:	08005d88 	.word	0x08005d88
 8000e74:	2000028c 	.word	0x2000028c
 8000e78:	200002e8 	.word	0x200002e8
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	08005ec4 	.word	0x08005ec4
 8000e84:	08005db4 	.word	0x08005db4

08000e88 <HAL_UART_RxCpltCallback>:
  }
}

// UART callback func
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, &rx_data, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	4918      	ldr	r1, [pc, #96]	@ (8000ef4 <HAL_UART_RxCpltCallback+0x6c>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f001 fd48 	bl	800292a <HAL_UART_Receive_IT>
  if (rx_data == 'r')
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_UART_RxCpltCallback+0x6c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b72      	cmp	r3, #114	@ 0x72
 8000ea0:	d124      	bne.n	8000eec <HAL_UART_RxCpltCallback+0x64>
  {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f107 020c 	add.w	r2, r7, #12
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f002 ff65 	bl	8003d80 <xQueueGiveFromISR>
    xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 ff5d 	bl	8003d80 <xQueueGiveFromISR>
    xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f107 020c 	add.w	r2, r7, #12
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 ff55 	bl	8003d80 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d007      	beq.n	8000eec <HAL_UART_RxCpltCallback+0x64>
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <HAL_UART_RxCpltCallback+0x74>)
 8000ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	f3bf 8f6f 	isb	sy
  }
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002ec 	.word	0x200002ec
 8000ef8:	200002e4 	.word	0x200002e4
 8000efc:	e000ed04 	.word	0xe000ed04

08000f00 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f12:	f000 f993 	bl	800123c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40001000 	.word	0x40001000

08000f24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_MspInit+0x54>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <HAL_MspInit+0x54>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_MspInit+0x54>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_MspInit+0x54>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_MspInit+0x54>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <HAL_MspInit+0x54>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	210f      	movs	r1, #15
 8000f72:	f06f 0001 	mvn.w	r0, #1
 8000f76:	f000 fa39 	bl	80013ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d133      	bne.n	8001012 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4809      	ldr	r0, [pc, #36]	@ (8001024 <HAL_UART_MspInit+0x9c>)
 8000ffe:	f000 fab1 	bl	8001564 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2026      	movs	r0, #38	@ 0x26
 8001008:	f000 f9f0 	bl	80013ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800100c:	2026      	movs	r0, #38	@ 0x26
 800100e:	f000 fa09 	bl	8001424 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	@ 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	@ 0x38
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <HAL_InitTick+0xe4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	4a32      	ldr	r2, [pc, #200]	@ (800110c <HAL_InitTick+0xe4>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6413      	str	r3, [r2, #64]	@ 0x40
 8001048:	4b30      	ldr	r3, [pc, #192]	@ (800110c <HAL_InitTick+0xe4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001054:	f107 0210 	add.w	r2, r7, #16
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f001 f8b4 	bl	80021cc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800106e:	f001 f885 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8001072:	6378      	str	r0, [r7, #52]	@ 0x34
 8001074:	e004      	b.n	8001080 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001076:	f001 f881 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 800107a:	4603      	mov	r3, r0
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001082:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <HAL_InitTick+0xe8>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3b01      	subs	r3, #1
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_InitTick+0xec>)
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <HAL_InitTick+0xf0>)
 8001092:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_InitTick+0xec>)
 8001096:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800109c:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <HAL_InitTick+0xec>)
 800109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <HAL_InitTick+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_InitTick+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <HAL_InitTick+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010b4:	4817      	ldr	r0, [pc, #92]	@ (8001114 <HAL_InitTick+0xec>)
 80010b6:	f001 f8bb 	bl	8002230 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11b      	bne.n	8001100 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010c8:	4812      	ldr	r0, [pc, #72]	@ (8001114 <HAL_InitTick+0xec>)
 80010ca:	f001 f90b 	bl	80022e4 <HAL_TIM_Base_Start_IT>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010dc:	2036      	movs	r0, #54	@ 0x36
 80010de:	f000 f9a1 	bl	8001424 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d808      	bhi.n	80010fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	2036      	movs	r0, #54	@ 0x36
 80010ee:	f000 f97d 	bl	80013ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_InitTick+0xf4>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e002      	b.n	8001100 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001100:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001104:	4618      	mov	r0, r3
 8001106:	3738      	adds	r7, #56	@ 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	431bde83 	.word	0x431bde83
 8001114:	200002f0 	.word	0x200002f0
 8001118:	40001000 	.word	0x40001000
 800111c:	20000010 	.word	0x20000010

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <USART2_IRQHandler+0x10>)
 800115e:	f001 fc09 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000028c 	.word	0x2000028c

0800116c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <TIM6_DAC_IRQHandler+0x10>)
 8001172:	f001 f927 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002f0 	.word	0x200002f0

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f004 fd45 	bl	8005c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff f995 	bl	8000504 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80011e8:	08005f44 	.word	0x08005f44
  ldr r2, =_sbss
 80011ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80011f0:	20004090 	.word	0x20004090

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <HAL_Init+0x40>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_Init+0x40>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <HAL_Init+0x40>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f8d8 	bl	80013d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	200f      	movs	r0, #15
 8001228:	f7ff fefe 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fe80 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000014 	.word	0x20000014
 8001260:	20000338 	.word	0x20000338

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000338 	.word	0x20000338

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff4c 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fe:	f7ff ff61 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001402:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	6978      	ldr	r0, [r7, #20]
 800140a:	f7ff ffb1 	bl	8001370 <NVIC_EncodePriority>
 800140e:	4602      	mov	r2, r0
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff80 	bl	800131c <__NVIC_SetPriority>
}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff54 	bl	80012e0 <__NVIC_EnableIRQ>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800144e:	f7ff ff09 	bl	8001264 <HAL_GetTick>
 8001452:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d008      	beq.n	8001472 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e052      	b.n	8001518 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0216 	bic.w	r2, r2, #22
 8001480:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001490:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <HAL_DMA_Abort+0x62>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0208 	bic.w	r2, r2, #8
 80014b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c2:	e013      	b.n	80014ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c4:	f7ff fece 	bl	8001264 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d90c      	bls.n	80014ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2203      	movs	r2, #3
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e015      	b.n	8001518 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1e4      	bne.n	80014c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fe:	223f      	movs	r2, #63	@ 0x3f
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d004      	beq.n	800153e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00c      	b.n	8001558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e16b      	b.n	8001858 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 815a 	bne.w	8001852 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80b4 	beq.w	8001852 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b60      	ldr	r3, [pc, #384]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001706:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <HAL_GPIO_Init+0x310>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_GPIO_Init+0x314>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d02b      	beq.n	800178a <HAL_GPIO_Init+0x226>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a51      	ldr	r2, [pc, #324]	@ (800187c <HAL_GPIO_Init+0x318>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d025      	beq.n	8001786 <HAL_GPIO_Init+0x222>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a50      	ldr	r2, [pc, #320]	@ (8001880 <HAL_GPIO_Init+0x31c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01f      	beq.n	8001782 <HAL_GPIO_Init+0x21e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4f      	ldr	r2, [pc, #316]	@ (8001884 <HAL_GPIO_Init+0x320>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d019      	beq.n	800177e <HAL_GPIO_Init+0x21a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4e      	ldr	r2, [pc, #312]	@ (8001888 <HAL_GPIO_Init+0x324>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x216>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4d      	ldr	r2, [pc, #308]	@ (800188c <HAL_GPIO_Init+0x328>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x212>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4c      	ldr	r2, [pc, #304]	@ (8001890 <HAL_GPIO_Init+0x32c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <HAL_GPIO_Init+0x330>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x20a>
 800176a:	2307      	movs	r3, #7
 800176c:	e00e      	b.n	800178c <HAL_GPIO_Init+0x228>
 800176e:	2308      	movs	r3, #8
 8001770:	e00c      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001772:	2306      	movs	r3, #6
 8001774:	e00a      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001776:	2305      	movs	r3, #5
 8001778:	e008      	b.n	800178c <HAL_GPIO_Init+0x228>
 800177a:	2304      	movs	r3, #4
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x228>
 800177e:	2303      	movs	r3, #3
 8001780:	e004      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001782:	2302      	movs	r3, #2
 8001784:	e002      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x228>
 800178a:	2300      	movs	r3, #0
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	f002 0203 	and.w	r2, r2, #3
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	4093      	lsls	r3, r2
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800179c:	4935      	ldr	r1, [pc, #212]	@ (8001874 <HAL_GPIO_Init+0x310>)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <HAL_GPIO_Init+0x334>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001822:	4a1d      	ldr	r2, [pc, #116]	@ (8001898 <HAL_GPIO_Init+0x334>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_GPIO_Init+0x334>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_GPIO_Init+0x334>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3301      	adds	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	f67f ae90 	bls.w	8001580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3724      	adds	r7, #36	@ 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40013800 	.word	0x40013800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400
 8001880:	40020800 	.word	0x40020800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40021000 	.word	0x40021000
 800188c:	40021400 	.word	0x40021400
 8001890:	40021800 	.word	0x40021800
 8001894:	40021c00 	.word	0x40021c00
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e267      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d075      	beq.n	80019a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	4b88      	ldr	r3, [pc, #544]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d00c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b85      	ldr	r3, [pc, #532]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d2:	4b82      	ldr	r3, [pc, #520]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b7e      	ldr	r3, [pc, #504]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d05b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x108>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e242      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x74>
 8001902:	4b76      	ldr	r3, [pc, #472]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a75      	ldr	r2, [pc, #468]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x98>
 800191a:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6f      	ldr	r2, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b6d      	ldr	r3, [pc, #436]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6c      	ldr	r2, [pc, #432]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001934:	4b69      	ldr	r3, [pc, #420]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a68      	ldr	r2, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b66      	ldr	r3, [pc, #408]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a65      	ldr	r2, [pc, #404]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fc86 	bl	8001264 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fc82 	bl	8001264 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e207      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xc0>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fc72 	bl	8001264 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fc6e 	bl	8001264 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1f3      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b51      	ldr	r3, [pc, #324]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0xe8>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	4b4a      	ldr	r3, [pc, #296]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x152>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1c7      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4937      	ldr	r1, [pc, #220]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e03a      	b.n	8001a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <HAL_RCC_OscConfig+0x244>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fc27 	bl	8001264 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fc23 	bl	8001264 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1a8      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4925      	ldr	r1, [pc, #148]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_RCC_OscConfig+0x244>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fc06 	bl	8001264 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fc02 	bl	8001264 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e187      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d036      	beq.n	8001af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d016      	beq.n	8001abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_RCC_OscConfig+0x248>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fbe6 	bl	8001264 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fbe2 	bl	8001264 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e167      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_RCC_OscConfig+0x240>)
 8001ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x200>
 8001aba:	e01b      	b.n	8001af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_OscConfig+0x248>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fbcf 	bl	8001264 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	e00e      	b.n	8001ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff fbcb 	bl	8001264 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d907      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e150      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	42470000 	.word	0x42470000
 8001ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b88      	ldr	r3, [pc, #544]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ea      	bne.n	8001aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8097 	beq.w	8001c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b81      	ldr	r3, [pc, #516]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b7d      	ldr	r3, [pc, #500]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b7a      	ldr	r3, [pc, #488]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b77      	ldr	r3, [pc, #476]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b74      	ldr	r3, [pc, #464]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a73      	ldr	r2, [pc, #460]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fb8b 	bl	8001264 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff fb87 	bl	8001264 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e10c      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_RCC_OscConfig+0x474>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2ea>
 8001b78:	4b64      	ldr	r3, [pc, #400]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7c:	4a63      	ldr	r2, [pc, #396]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b84:	e01c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x324>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x30c>
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b92:	4a5e      	ldr	r2, [pc, #376]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x324>
 8001ba8:	4b58      	ldr	r3, [pc, #352]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bac:	4a57      	ldr	r2, [pc, #348]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb4:	4b55      	ldr	r3, [pc, #340]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb8:	4a54      	ldr	r2, [pc, #336]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001bba:	f023 0304 	bic.w	r3, r3, #4
 8001bbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d015      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fb4c 	bl	8001264 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fb48 	bl	8001264 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0cb      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0ee      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fb36 	bl	8001264 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fb32 	bl	8001264 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0b5      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a1 	beq.w	8001d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3a:	4b34      	ldr	r3, [pc, #208]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d05c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d141      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb06 	bl	8001264 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fb02 	bl	8001264 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e087      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	491b      	ldr	r1, [pc, #108]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fadb 	bl	8001264 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff fad7 	bl	8001264 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e05c      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x416>
 8001cd0:	e054      	b.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_RCC_OscConfig+0x478>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fac4 	bl	8001264 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fac0 	bl	8001264 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e045      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_OscConfig+0x470>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x444>
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e038      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_RCC_OscConfig+0x4ec>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d028      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d121      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11a      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	3b01      	subs	r3, #1
 8001d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0cc      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b68      	ldr	r3, [pc, #416]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d90c      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b65      	ldr	r3, [pc, #404]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b8      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a58      	ldr	r2, [pc, #352]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	4b53      	ldr	r3, [pc, #332]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b50      	ldr	r3, [pc, #320]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	494d      	ldr	r1, [pc, #308]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d044      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d119      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e067      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4934      	ldr	r1, [pc, #208]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f9f2 	bl	8001264 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f9ee 	bl	8001264 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e04f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d20c      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4916      	ldr	r1, [pc, #88]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490e      	ldr	r1, [pc, #56]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	490a      	ldr	r1, [pc, #40]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f878 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	08005ef4 	.word	0x08005ef4
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	20000010 	.word	0x20000010

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b094      	sub	sp, #80	@ 0x50
 8001f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f64:	2300      	movs	r3, #0
 8001f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f68:	2300      	movs	r3, #0
 8001f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f70:	4b79      	ldr	r3, [pc, #484]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d00d      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x40>
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	f200 80e1 	bhi.w	8002144 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8a:	e0db      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b73      	ldr	r3, [pc, #460]	@ (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001f90:	e0db      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f92:	4b73      	ldr	r3, [pc, #460]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f96:	e0d8      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f98:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b6a      	ldr	r3, [pc, #424]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fca:	4622      	mov	r2, r4
 8001fcc:	462b      	mov	r3, r5
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	1a51      	subs	r1, r2, r1
 8001fe6:	6139      	str	r1, [r7, #16]
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb63 0301 	sbc.w	r3, r3, r1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	018b      	lsls	r3, r1, #6
 8002000:	4651      	mov	r1, sl
 8002002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002006:	4651      	mov	r1, sl
 8002008:	018a      	lsls	r2, r1, #6
 800200a:	4651      	mov	r1, sl
 800200c:	ebb2 0801 	subs.w	r8, r2, r1
 8002010:	4659      	mov	r1, fp
 8002012:	eb63 0901 	sbc.w	r9, r3, r1
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800202a:	4690      	mov	r8, r2
 800202c:	4699      	mov	r9, r3
 800202e:	4623      	mov	r3, r4
 8002030:	eb18 0303 	adds.w	r3, r8, r3
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	462b      	mov	r3, r5
 8002038:	eb49 0303 	adc.w	r3, r9, r3
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800204a:	4629      	mov	r1, r5
 800204c:	024b      	lsls	r3, r1, #9
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002054:	4621      	mov	r1, r4
 8002056:	024a      	lsls	r2, r1, #9
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800205e:	2200      	movs	r2, #0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002064:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002068:	f7fe f8ba 	bl	80001e0 <__aeabi_uldivmod>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4613      	mov	r3, r2
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002074:	e058      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002076:	4b38      	ldr	r3, [pc, #224]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	099b      	lsrs	r3, r3, #6
 800207c:	2200      	movs	r2, #0
 800207e:	4618      	mov	r0, r3
 8002080:	4611      	mov	r1, r2
 8002082:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
 800208c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002090:	4642      	mov	r2, r8
 8002092:	464b      	mov	r3, r9
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	0159      	lsls	r1, r3, #5
 800209e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a2:	0150      	lsls	r0, r2, #5
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4641      	mov	r1, r8
 80020aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ae:	4649      	mov	r1, r9
 80020b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c8:	ebb2 040a 	subs.w	r4, r2, sl
 80020cc:	eb63 050b 	sbc.w	r5, r3, fp
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	00eb      	lsls	r3, r5, #3
 80020da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020de:	00e2      	lsls	r2, r4, #3
 80020e0:	4614      	mov	r4, r2
 80020e2:	461d      	mov	r5, r3
 80020e4:	4643      	mov	r3, r8
 80020e6:	18e3      	adds	r3, r4, r3
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	464b      	mov	r3, r9
 80020ec:	eb45 0303 	adc.w	r3, r5, r3
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fe:	4629      	mov	r1, r5
 8002100:	028b      	lsls	r3, r1, #10
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002108:	4621      	mov	r1, r4
 800210a:	028a      	lsls	r2, r1, #10
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	61fa      	str	r2, [r7, #28]
 8002118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211c:	f7fe f860 	bl	80001e0 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002138:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800213a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8002146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800214c:	4618      	mov	r0, r3
 800214e:	3750      	adds	r7, #80	@ 0x50
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	@ (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	08005f04 	.word	0x08005f04

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0b5b      	lsrs	r3, r3, #13
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08005f04 	.word	0x08005f04

080021cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	220f      	movs	r2, #15
 80021da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_RCC_GetClockConfig+0x5c>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_RCC_GetClockConfig+0x5c>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_RCC_GetClockConfig+0x5c>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_GetClockConfig+0x5c>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <HAL_RCC_GetClockConfig+0x60>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e041      	b.n	80022c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f839 	bl	80022ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 f9c0 	bl	80025f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d001      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e04e      	b.n	800239a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d022      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002326:	d01d      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_TIM_Base_Start_IT+0xc8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d018      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d013      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x80>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a18      	ldr	r2, [pc, #96]	@ (80023c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d111      	bne.n	8002388 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d010      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002386:	e007      	b.n	8002398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40010400 	.word	0x40010400
 80023bc:	40014000 	.word	0x40014000
 80023c0:	40001800 	.word	0x40001800

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d020      	beq.n	8002428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0202 	mvn.w	r2, #2
 80023f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8d2 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8c4 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8d5 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d020      	beq.n	8002474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0204 	mvn.w	r2, #4
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8ac 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f89e 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8af 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d020      	beq.n	80024c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01b      	beq.n	80024c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0208 	mvn.w	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f886 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f878 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f889 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d020      	beq.n	800250c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0210 	mvn.w	r2, #16
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2208      	movs	r2, #8
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f860 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f852 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f863 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0201 	mvn.w	r2, #1
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fce8 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f906 	bl	8002760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f834 	bl	80025e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0220 	mvn.w	r2, #32
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8d8 	bl	800274c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a46      	ldr	r2, [pc, #280]	@ (8002720 <TIM_Base_SetConfig+0x12c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <TIM_Base_SetConfig+0x40>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002612:	d00f      	beq.n	8002634 <TIM_Base_SetConfig+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a43      	ldr	r2, [pc, #268]	@ (8002724 <TIM_Base_SetConfig+0x130>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00b      	beq.n	8002634 <TIM_Base_SetConfig+0x40>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a42      	ldr	r2, [pc, #264]	@ (8002728 <TIM_Base_SetConfig+0x134>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <TIM_Base_SetConfig+0x40>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a41      	ldr	r2, [pc, #260]	@ (800272c <TIM_Base_SetConfig+0x138>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_Base_SetConfig+0x40>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a40      	ldr	r2, [pc, #256]	@ (8002730 <TIM_Base_SetConfig+0x13c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d108      	bne.n	8002646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a35      	ldr	r2, [pc, #212]	@ (8002720 <TIM_Base_SetConfig+0x12c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d02b      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002654:	d027      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a32      	ldr	r2, [pc, #200]	@ (8002724 <TIM_Base_SetConfig+0x130>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d023      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a31      	ldr	r2, [pc, #196]	@ (8002728 <TIM_Base_SetConfig+0x134>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a30      	ldr	r2, [pc, #192]	@ (800272c <TIM_Base_SetConfig+0x138>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01b      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a2f      	ldr	r2, [pc, #188]	@ (8002730 <TIM_Base_SetConfig+0x13c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d017      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a2e      	ldr	r2, [pc, #184]	@ (8002734 <TIM_Base_SetConfig+0x140>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a2d      	ldr	r2, [pc, #180]	@ (8002738 <TIM_Base_SetConfig+0x144>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00f      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a2c      	ldr	r2, [pc, #176]	@ (800273c <TIM_Base_SetConfig+0x148>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00b      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a2b      	ldr	r2, [pc, #172]	@ (8002740 <TIM_Base_SetConfig+0x14c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a2a      	ldr	r2, [pc, #168]	@ (8002744 <TIM_Base_SetConfig+0x150>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d003      	beq.n	80026a6 <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a29      	ldr	r2, [pc, #164]	@ (8002748 <TIM_Base_SetConfig+0x154>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d108      	bne.n	80026b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <TIM_Base_SetConfig+0x12c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0xf8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <TIM_Base_SetConfig+0x13c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f023 0201 	bic.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	611a      	str	r2, [r3, #16]
  }
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40010000 	.word	0x40010000
 8002724:	40000400 	.word	0x40000400
 8002728:	40000800 	.word	0x40000800
 800272c:	40000c00 	.word	0x40000c00
 8002730:	40010400 	.word	0x40010400
 8002734:	40014000 	.word	0x40014000
 8002738:	40014400 	.word	0x40014400
 800273c:	40014800 	.word	0x40014800
 8002740:	40001800 	.word	0x40001800
 8002744:	40001c00 	.word	0x40001c00
 8002748:	40002000 	.word	0x40002000

0800274c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e042      	b.n	800280c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fbf4 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fdbd 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	@ 0x28
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b20      	cmp	r3, #32
 8002832:	d175      	bne.n	8002920 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_UART_Transmit+0x2c>
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e06e      	b.n	8002922 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2221      	movs	r2, #33	@ 0x21
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002852:	f7fe fd07 	bl	8001264 <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800286c:	d108      	bne.n	8002880 <HAL_UART_Transmit+0x6c>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e003      	b.n	8002888 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002888:	e02e      	b.n	80028e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fb1f 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e03a      	b.n	8002922 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10b      	bne.n	80028ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	3302      	adds	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	e007      	b.n	80028da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1cb      	bne.n	800288a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2140      	movs	r1, #64	@ 0x40
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 faeb 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e006      	b.n	8002922 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	4613      	mov	r3, r2
 8002936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b20      	cmp	r3, #32
 8002942:	d112      	bne.n	800296a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_UART_Receive_IT+0x26>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e00b      	b.n	800296c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	461a      	mov	r2, r3
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fb12 	bl	8002f8a <UART_Start_Receive_IT>
 8002966:	4603      	mov	r3, r0
 8002968:	e000      	b.n	800296c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0ba      	sub	sp, #232	@ 0xe8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_UART_IRQHandler+0x66>
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fbf2 	bl	80031bc <UART_Receive_IT>
      return;
 80029d8:	e25b      	b.n	8002e92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80de 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x22c>
 80029e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80d1 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_UART_IRQHandler+0xae>
 8002a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_UART_IRQHandler+0xd2>
 8002a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f043 0202 	orr.w	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_UART_IRQHandler+0xf6>
 8002a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <HAL_UART_IRQHandler+0x126>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f043 0208 	orr.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 81f2 	beq.w	8002e88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x14e>
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fb7d 	bl	80031bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	2b40      	cmp	r3, #64	@ 0x40
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <HAL_UART_IRQHandler+0x17a>
 8002ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04f      	beq.n	8002b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa85 	bl	8002ffe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afe:	2b40      	cmp	r3, #64	@ 0x40
 8002b00:	d141      	bne.n	8002b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1d9      	bne.n	8002b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d54 <HAL_UART_IRQHandler+0x3e0>)
 8002b5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fcdc 	bl	8001520 <HAL_DMA_Abort_IT>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e00e      	b.n	8002b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f994 	bl	8002eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	e00a      	b.n	8002b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f990 	bl	8002eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	e006      	b.n	8002b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f98c 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b9a:	e175      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	bf00      	nop
    return;
 8002b9e:	e173      	b.n	8002e88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 814f 	bne.w	8002e48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8148 	beq.w	8002e48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8141 	beq.w	8002e48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be6:	2b40      	cmp	r3, #64	@ 0x40
 8002be8:	f040 80b6 	bne.w	8002d58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8145 	beq.w	8002e8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	f080 813e 	bcs.w	8002e8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c22:	f000 8088 	beq.w	8002d36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1d9      	bne.n	8002c26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3314      	adds	r3, #20
 8002c78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e1      	bne.n	8002c72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3314      	adds	r3, #20
 8002cb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d06:	f023 0310 	bic.w	r3, r3, #16
 8002d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e3      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fb85 	bl	8001440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8b7 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d52:	e09b      	b.n	8002e8c <HAL_UART_IRQHandler+0x518>
 8002d54:	080030c5 	.word	0x080030c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 808e 	beq.w	8002e90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8089 	beq.w	8002e90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002da2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e3      	bne.n	8002d7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dda:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e3      	bne.n	8002db6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0310 	bic.w	r3, r3, #16
 8002e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e20:	61fa      	str	r2, [r7, #28]
 8002e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	69b9      	ldr	r1, [r7, #24]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e3      	bne.n	8002dfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f83d 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e46:	e023      	b.n	8002e90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_UART_IRQHandler+0x4f4>
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f943 	bl	80030ec <UART_Transmit_IT>
    return;
 8002e66:	e014      	b.n	8002e92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00e      	beq.n	8002e92 <HAL_UART_IRQHandler+0x51e>
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f983 	bl	800318c <UART_EndTransmit_IT>
    return;
 8002e86:	e004      	b.n	8002e92 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e88:	bf00      	nop
 8002e8a:	e002      	b.n	8002e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e8c:	bf00      	nop
 8002e8e:	e000      	b.n	8002e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e90:	bf00      	nop
  }
}
 8002e92:	37e8      	adds	r7, #232	@ 0xe8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee8:	e03b      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d037      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe f9b7 	bl	8001264 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e03a      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d023      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b80      	cmp	r3, #128	@ 0x80
 8002f1e:	d020      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b40      	cmp	r3, #64	@ 0x40
 8002f24:	d01d      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d116      	bne.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f857 	bl	8002ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2208      	movs	r2, #8
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d0b4      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	4613      	mov	r3, r2
 8002f96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2222      	movs	r2, #34	@ 0x22
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b095      	sub	sp, #84	@ 0x54
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800301c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003026:	643a      	str	r2, [r7, #64]	@ 0x40
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800302c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e5      	bne.n	8003006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	61fb      	str	r3, [r7, #28]
   return(result);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800305a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	2b01      	cmp	r3, #1
 8003074:	d119      	bne.n	80030aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	60bb      	str	r3, [r7, #8]
   return(result);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f023 0310 	bic.w	r3, r3, #16
 800308c:	647b      	str	r3, [r7, #68]	@ 0x44
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003096:	61ba      	str	r2, [r7, #24]
 8003098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6979      	ldr	r1, [r7, #20]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	613b      	str	r3, [r7, #16]
   return(result);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e5      	bne.n	8003076 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030b8:	bf00      	nop
 80030ba:	3754      	adds	r7, #84	@ 0x54
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff fee4 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b21      	cmp	r3, #33	@ 0x21
 80030fe:	d13e      	bne.n	800317e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003108:	d114      	bne.n	8003134 <UART_Transmit_IT+0x48>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d110      	bne.n	8003134 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003126:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	621a      	str	r2, [r3, #32]
 8003132:	e008      	b.n	8003146 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	1c59      	adds	r1, r3, #1
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6211      	str	r1, [r2, #32]
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4619      	mov	r1, r3
 8003154:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003168:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003178:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fe73 	bl	8002e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b22      	cmp	r3, #34	@ 0x22
 80031ce:	f040 80ae 	bne.w	800332e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031da:	d117      	bne.n	800320c <UART_Receive_IT+0x50>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	1c9a      	adds	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
 800320a:	e026      	b.n	800325a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800321e:	d007      	beq.n	8003230 <UART_Receive_IT+0x74>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <UART_Receive_IT+0x82>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e008      	b.n	8003250 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800324a:	b2da      	uxtb	r2, r3
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4619      	mov	r1, r3
 8003268:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800326a:	2b00      	cmp	r3, #0
 800326c:	d15d      	bne.n	800332a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0220 	bic.w	r2, r2, #32
 800327c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800328c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d135      	bne.n	8003320 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f023 0310 	bic.w	r3, r3, #16
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032da:	623a      	str	r2, [r7, #32]
 80032dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d10a      	bne.n	8003312 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fdd1 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
 800331e:	e002      	b.n	8003326 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd fdb1 	bl	8000e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e002      	b.n	8003330 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3730      	adds	r7, #48	@ 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b0c0      	sub	sp, #256	@ 0x100
 800333e:	af00      	add	r7, sp, #0
 8003340:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	ea40 0301 	orr.w	r3, r0, r1
 8003360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003390:	f021 010c 	bic.w	r1, r1, #12
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800339e:	430b      	orrs	r3, r1
 80033a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b2:	6999      	ldr	r1, [r3, #24]
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	ea40 0301 	orr.w	r3, r0, r1
 80033be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003604 <UART_SetConfig+0x2cc>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <UART_SetConfig+0xa0>
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003608 <UART_SetConfig+0x2d0>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d104      	bne.n	80033e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe fee4 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80033dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033e0:	e003      	b.n	80033ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033e2:	f7fe fecb 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80033e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	f040 810c 	bne.w	8003610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003402:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	1891      	adds	r1, r2, r2
 8003410:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003412:	415b      	adcs	r3, r3
 8003414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800341a:	4621      	mov	r1, r4
 800341c:	eb12 0801 	adds.w	r8, r2, r1
 8003420:	4629      	mov	r1, r5
 8003422:	eb43 0901 	adc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003448:	462b      	mov	r3, r5
 800344a:	eb49 0303 	adc.w	r3, r9, r3
 800344e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800345e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003466:	460b      	mov	r3, r1
 8003468:	18db      	adds	r3, r3, r3
 800346a:	653b      	str	r3, [r7, #80]	@ 0x50
 800346c:	4613      	mov	r3, r2
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	657b      	str	r3, [r7, #84]	@ 0x54
 8003474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800347c:	f7fc feb0 	bl	80001e0 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b61      	ldr	r3, [pc, #388]	@ (800360c <UART_SetConfig+0x2d4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003498:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800349c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034a8:	415b      	adcs	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034b0:	4641      	mov	r1, r8
 80034b2:	eb12 0a01 	adds.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb43 0b01 	adc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	4692      	mov	sl, r2
 80034d2:	469b      	mov	fp, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	eb1a 0303 	adds.w	r3, sl, r3
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034de:	464b      	mov	r3, r9
 80034e0:	eb4b 0303 	adc.w	r3, fp, r3
 80034e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	643b      	str	r3, [r7, #64]	@ 0x40
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	647b      	str	r3, [r7, #68]	@ 0x44
 800350a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800350e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003512:	f7fc fe65 	bl	80001e0 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4611      	mov	r1, r2
 800351c:	4b3b      	ldr	r3, [pc, #236]	@ (800360c <UART_SetConfig+0x2d4>)
 800351e:	fba3 2301 	umull	r2, r3, r3, r1
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	@ 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003532:	4b36      	ldr	r3, [pc, #216]	@ (800360c <UART_SetConfig+0x2d4>)
 8003534:	fba3 2302 	umull	r2, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003540:	441c      	add	r4, r3
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800354c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800355c:	415b      	adcs	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6339      	str	r1, [r7, #48]	@ 0x30
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003598:	464b      	mov	r3, r9
 800359a:	460a      	mov	r2, r1
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035b8:	460b      	mov	r3, r1
 80035ba:	18db      	adds	r3, r3, r3
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035be:	4613      	mov	r3, r2
 80035c0:	eb42 0303 	adc.w	r3, r2, r3
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035ce:	f7fc fe07 	bl	80001e0 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <UART_SetConfig+0x2d4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	@ 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	@ 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <UART_SetConfig+0x2d4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003600:	e106      	b.n	8003810 <UART_SetConfig+0x4d8>
 8003602:	bf00      	nop
 8003604:	40011000 	.word	0x40011000
 8003608:	40011400 	.word	0x40011400
 800360c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800361a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800361e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6239      	str	r1, [r7, #32]
 800362a:	415b      	adcs	r3, r3
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
 800362e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003632:	4641      	mov	r1, r8
 8003634:	1854      	adds	r4, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0501 	adc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003658:	464b      	mov	r3, r9
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800366e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800367e:	4629      	mov	r1, r5
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003688:	4621      	mov	r1, r4
 800368a:	008a      	lsls	r2, r1, #2
 800368c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003690:	f7fc fda6 	bl	80001e0 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b60      	ldr	r3, [pc, #384]	@ (800381c <UART_SetConfig+0x4e4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	61b9      	str	r1, [r7, #24]
 80036bc:	415b      	adcs	r3, r3
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6139      	str	r1, [r7, #16]
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800370e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800372e:	f7fc fd57 	bl	80001e0 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4611      	mov	r1, r2
 8003738:	4b38      	ldr	r3, [pc, #224]	@ (800381c <UART_SetConfig+0x4e4>)
 800373a:	fba3 2301 	umull	r2, r3, r3, r1
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2264      	movs	r2, #100	@ 0x64
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	1acb      	subs	r3, r1, r3
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	3332      	adds	r3, #50	@ 0x32
 800374c:	4a33      	ldr	r2, [pc, #204]	@ (800381c <UART_SetConfig+0x4e4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003758:	441c      	add	r4, r3
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	673b      	str	r3, [r7, #112]	@ 0x70
 8003762:	677a      	str	r2, [r7, #116]	@ 0x74
 8003764:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	1891      	adds	r1, r2, r2
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	415b      	adcs	r3, r3
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003778:	4641      	mov	r1, r8
 800377a:	1851      	adds	r1, r2, r1
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	4649      	mov	r1, r9
 8003780:	414b      	adcs	r3, r1
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003790:	4659      	mov	r1, fp
 8003792:	00cb      	lsls	r3, r1, #3
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379a:	4651      	mov	r1, sl
 800379c:	00ca      	lsls	r2, r1, #3
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	4642      	mov	r2, r8
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037aa:	464b      	mov	r3, r9
 80037ac:	460a      	mov	r2, r1
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80037be:	667a      	str	r2, [r7, #100]	@ 0x64
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037de:	f7fc fcff 	bl	80001e0 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <UART_SetConfig+0x4e4>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	@ 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	3332      	adds	r3, #50	@ 0x32
 80037fa:	4a08      	ldr	r2, [pc, #32]	@ (800381c <UART_SetConfig+0x4e4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4422      	add	r2, r4
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381c:	51eb851f 	.word	0x51eb851f

08003820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0208 	add.w	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f103 0208 	add.w	r2, r3, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f103 0208 	add.w	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d103      	bne.n	80038e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e00c      	b.n	80038fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3308      	adds	r3, #8
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e002      	b.n	80038f0 <vListInsert+0x2e>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d2f6      	bcs.n	80038ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6892      	ldr	r2, [r2, #8]
 800394a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6852      	ldr	r2, [r2, #4]
 8003954:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d103      	bne.n	8003968 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	1e5a      	subs	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039b4:	f001 fdd0 	bl	8005558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	441a      	add	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	3b01      	subs	r3, #1
 80039e6:	68f9      	ldr	r1, [r7, #12]
 80039e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	22ff      	movs	r2, #255	@ 0xff
 80039f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	22ff      	movs	r2, #255	@ 0xff
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d114      	bne.n	8003a34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01a      	beq.n	8003a48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3310      	adds	r3, #16
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f88a 	bl	8004b30 <xTaskRemoveFromEventList>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <xQueueGenericReset+0xd0>)
 8003a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	e009      	b.n	8003a48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3310      	adds	r3, #16
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fef1 	bl	8003820 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3324      	adds	r3, #36	@ 0x24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff feec 	bl	8003820 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a48:	f001 fdb8 	bl	80055bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a4c:	2301      	movs	r3, #1
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	e000ed04 	.word	0xe000ed04

08003a5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	613b      	str	r3, [r7, #16]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3348      	adds	r3, #72	@ 0x48
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fe80 	bl	800579c <pvPortMalloc>
 8003a9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d011      	beq.n	8003ac8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3348      	adds	r3, #72	@ 0x48
 8003aac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ab6:	79fa      	ldrb	r2, [r7, #7]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f805 	bl	8003ad2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
	}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e002      	b.n	8003af4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b00:	2101      	movs	r1, #1
 8003b02:	69b8      	ldr	r0, [r7, #24]
 8003b04:	f7ff ff40 	bl	8003988 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	613b      	str	r3, [r7, #16]
}
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d90b      	bls.n	8003b58 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60fb      	str	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b58:	2202      	movs	r2, #2
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff7d 	bl	8003a5c <xQueueGenericCreate>
 8003b62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003b70:	697b      	ldr	r3, [r7, #20]
	}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08e      	sub	sp, #56	@ 0x38
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <xQueueGenericSend+0x34>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <xQueueGenericSend+0x42>
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <xQueueGenericSend+0x46>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <xQueueGenericSend+0x48>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <xQueueGenericSend+0x64>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d103      	bne.n	8003bee <xQueueGenericSend+0x72>
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <xQueueGenericSend+0x76>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <xQueueGenericSend+0x78>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueGenericSend+0x94>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	623b      	str	r3, [r7, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c10:	f001 f94e 	bl	8004eb0 <xTaskGetSchedulerState>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <xQueueGenericSend+0xa4>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <xQueueGenericSend+0xa8>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <xQueueGenericSend+0xaa>
 8003c24:	2300      	movs	r3, #0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <xQueueGenericSend+0xc6>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	61fb      	str	r3, [r7, #28]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c42:	f001 fc89 	bl	8005558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <xQueueGenericSend+0xdc>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d129      	bne.n	8003cac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c5e:	f000 fa66 	bl	800412e <prvCopyDataToQueue>
 8003c62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	3324      	adds	r3, #36	@ 0x24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 ff5d 	bl	8004b30 <xTaskRemoveFromEventList>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <xQueueGenericSend+0x200>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	e00a      	b.n	8003ca4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c94:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <xQueueGenericSend+0x200>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ca4:	f001 fc8a 	bl	80055bc <vPortExitCritical>
				return pdPASS;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e063      	b.n	8003d74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cb2:	f001 fc83 	bl	80055bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e05c      	b.n	8003d74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 ff97 	bl	8004bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cce:	f001 fc75 	bl	80055bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cd2:	f000 fd45 	bl	8004760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cd6:	f001 fc3f 	bl	8005558 <vPortEnterCritical>
 8003cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d103      	bne.n	8003cf0 <xQueueGenericSend+0x174>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d103      	bne.n	8003d06 <xQueueGenericSend+0x18a>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d06:	f001 fc59 	bl	80055bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d0a:	1d3a      	adds	r2, r7, #4
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 ff86 	bl	8004c24 <xTaskCheckForTimeOut>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d124      	bne.n	8003d68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d20:	f000 fad7 	bl	80042d2 <prvIsQueueFull>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fed6 	bl	8004ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d3a:	f000 fa62 	bl	8004202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d3e:	f000 fd1d 	bl	800477c <xTaskResumeAll>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f af7c 	bne.w	8003c42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <xQueueGenericSend+0x200>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	e772      	b.n	8003c42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d5e:	f000 fa50 	bl	8004202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d62:	f000 fd0b 	bl	800477c <xTaskResumeAll>
 8003d66:	e76c      	b.n	8003c42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d6a:	f000 fa4a 	bl	8004202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d6e:	f000 fd05 	bl	800477c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3738      	adds	r7, #56	@ 0x38
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	@ 0x38
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	623b      	str	r3, [r7, #32]
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	61fb      	str	r3, [r7, #28]
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <xQueueGiveFromISR+0x5c>
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <xQueueGiveFromISR+0x60>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <xQueueGiveFromISR+0x62>
 8003de0:	2300      	movs	r3, #0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	61bb      	str	r3, [r7, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dfe:	f001 fc8b 	bl	8005718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e02:	f3ef 8211 	mrs	r2, BASEPRI
 8003e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	617a      	str	r2, [r7, #20]
 8003e18:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d22b      	bcs.n	8003e86 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d112      	bne.n	8003e70 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	3324      	adds	r3, #36	@ 0x24
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fe6a 	bl	8004b30 <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e007      	b.n	8003e80 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	b25a      	sxtb	r2, r3
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e80:	2301      	movs	r3, #1
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e84:	e001      	b.n	8003e8a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3738      	adds	r7, #56	@ 0x38
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	@ 0x38
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	623b      	str	r3, [r7, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61fb      	str	r3, [r7, #28]
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ef4:	f000 ffdc 	bl	8004eb0 <xTaskGetSchedulerState>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <xQueueSemaphoreTake+0x64>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <xQueueSemaphoreTake+0x68>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <xQueueSemaphoreTake+0x6a>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	61bb      	str	r3, [r7, #24]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f26:	f001 fb17 	bl	8005558 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d024      	beq.n	8003f80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f46:	f001 f95f 	bl	8005208 <pvTaskIncrementMutexHeldCount>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	3310      	adds	r3, #16
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fde7 	bl	8004b30 <xTaskRemoveFromEventList>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f68:	4b54      	ldr	r3, [pc, #336]	@ (80040bc <xQueueSemaphoreTake+0x21c>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f78:	f001 fb20 	bl	80055bc <vPortExitCritical>
				return pdPASS;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e098      	b.n	80040b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	617b      	str	r3, [r7, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fa4:	f001 fb0a 	bl	80055bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e082      	b.n	80040b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fe1e 	bl	8004bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc0:	f001 fafc 	bl	80055bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc4:	f000 fbcc 	bl	8004760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fc8:	f001 fac6 	bl	8005558 <vPortEnterCritical>
 8003fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d103      	bne.n	8003fe2 <xQueueSemaphoreTake+0x142>
 8003fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d103      	bne.n	8003ff8 <xQueueSemaphoreTake+0x158>
 8003ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff8:	f001 fae0 	bl	80055bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ffc:	463a      	mov	r2, r7
 8003ffe:	f107 030c 	add.w	r3, r7, #12
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fe0d 	bl	8004c24 <xTaskCheckForTimeOut>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d132      	bne.n	8004076 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004010:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004012:	f000 f948 	bl	80042a6 <prvIsQueueEmpty>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d026      	beq.n	800406a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004024:	f001 fa98 	bl	8005558 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 ff5d 	bl	8004eec <xTaskPriorityInherit>
 8004032:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004034:	f001 fac2 	bl	80055bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403a:	3324      	adds	r3, #36	@ 0x24
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fd4f 	bl	8004ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004046:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004048:	f000 f8db 	bl	8004202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800404c:	f000 fb96 	bl	800477c <xTaskResumeAll>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	f47f af67 	bne.w	8003f26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004058:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <xQueueSemaphoreTake+0x21c>)
 800405a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	e75d      	b.n	8003f26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800406a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800406c:	f000 f8c9 	bl	8004202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004070:	f000 fb84 	bl	800477c <xTaskResumeAll>
 8004074:	e757      	b.n	8003f26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004076:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004078:	f000 f8c3 	bl	8004202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800407c:	f000 fb7e 	bl	800477c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004082:	f000 f910 	bl	80042a6 <prvIsQueueEmpty>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	f43f af4c 	beq.w	8003f26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004094:	f001 fa60 	bl	8005558 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004098:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800409a:	f000 f830 	bl	80040fe <prvGetDisinheritPriorityAfterTimeout>
 800409e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80040a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 f81e 	bl	80050e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040ac:	f001 fa86 	bl	80055bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3738      	adds	r7, #56	@ 0x38
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60bb      	str	r3, [r7, #8]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80040e6:	f001 fa37 	bl	8005558 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80040f0:	f001 fa64 	bl	80055bc <vPortExitCritical>

	return uxReturn;
 80040f4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1c3 0307 	rsb	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e001      	b.n	8004120 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004120:	68fb      	ldr	r3, [r7, #12]
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10d      	bne.n	8004168 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d14d      	bne.n	80041f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 ff3d 	bl	8004fd8 <xTaskPriorityDisinherit>
 800415e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	e043      	b.n	80041f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6858      	ldr	r0, [r3, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	461a      	mov	r2, r3
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	f001 fd95 	bl	8005ca8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	d32b      	bcc.n	80041f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e026      	b.n	80041f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68d8      	ldr	r0, [r3, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	461a      	mov	r2, r3
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	f001 fd7b 	bl	8005ca8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	425b      	negs	r3, r3
 80041bc:	441a      	add	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d207      	bcs.n	80041de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	425b      	negs	r3, r3
 80041d8:	441a      	add	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d105      	bne.n	80041f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80041f8:	697b      	ldr	r3, [r7, #20]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800420a:	f001 f9a5 	bl	8005558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004216:	e011      	b.n	800423c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3324      	adds	r3, #36	@ 0x24
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fc83 	bl	8004b30 <xTaskRemoveFromEventList>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004230:	f000 fd5c 	bl	8004cec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	3b01      	subs	r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800423c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	dce9      	bgt.n	8004218 <prvUnlockQueue+0x16>
 8004244:	e000      	b.n	8004248 <prvUnlockQueue+0x46>
					break;
 8004246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	22ff      	movs	r2, #255	@ 0xff
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004250:	f001 f9b4 	bl	80055bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004254:	f001 f980 	bl	8005558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800425e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004260:	e011      	b.n	8004286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d012      	beq.n	8004290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3310      	adds	r3, #16
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fc5e 	bl	8004b30 <xTaskRemoveFromEventList>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800427a:	f000 fd37 	bl	8004cec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800427e:	7bbb      	ldrb	r3, [r7, #14]
 8004280:	3b01      	subs	r3, #1
 8004282:	b2db      	uxtb	r3, r3
 8004284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800428a:	2b00      	cmp	r3, #0
 800428c:	dce9      	bgt.n	8004262 <prvUnlockQueue+0x60>
 800428e:	e000      	b.n	8004292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	22ff      	movs	r2, #255	@ 0xff
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800429a:	f001 f98f 	bl	80055bc <vPortExitCritical>
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042ae:	f001 f953 	bl	8005558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e001      	b.n	80042c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042c4:	f001 f97a 	bl	80055bc <vPortExitCritical>

	return xReturn;
 80042c8:	68fb      	ldr	r3, [r7, #12]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042da:	f001 f93d 	bl	8005558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d102      	bne.n	80042f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e001      	b.n	80042f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042f4:	f001 f962 	bl	80055bc <vPortExitCritical>

	return xReturn;
 80042f8:	68fb      	ldr	r3, [r7, #12]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08e      	sub	sp, #56	@ 0x38
 8004306:	af04      	add	r7, sp, #16
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <xTaskCreateStatic+0x2c>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	623b      	str	r3, [r7, #32]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61fb      	str	r3, [r7, #28]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800434c:	2354      	movs	r3, #84	@ 0x54
 800434e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b54      	cmp	r3, #84	@ 0x54
 8004354:	d00b      	beq.n	800436e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61bb      	str	r3, [r7, #24]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800436e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01e      	beq.n	80043b4 <xTaskCreateStatic+0xb2>
 8004376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01b      	beq.n	80043b4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004384:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800438e:	2300      	movs	r3, #0
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f850 	bl	800444c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043ae:	f000 f8d5 	bl	800455c <prvAddNewTaskToReadyList>
 80043b2:	e001      	b.n	80043b8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043b8:	697b      	ldr	r3, [r7, #20]
	}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3728      	adds	r7, #40	@ 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b08c      	sub	sp, #48	@ 0x30
 80043c6:	af04      	add	r7, sp, #16
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 f9e0 	bl	800579c <pvPortMalloc>
 80043dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043e4:	2054      	movs	r0, #84	@ 0x54
 80043e6:	f001 f9d9 	bl	800579c <pvPortMalloc>
 80043ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043f8:	e005      	b.n	8004406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f001 fa9c 	bl	8005938 <vPortFree>
 8004400:	e001      	b.n	8004406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	2300      	movs	r3, #0
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f80e 	bl	800444c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004430:	69f8      	ldr	r0, [r7, #28]
 8004432:	f000 f893 	bl	800455c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004436:	2301      	movs	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e002      	b.n	8004442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004442:	69bb      	ldr	r3, [r7, #24]
	}
 8004444:	4618      	mov	r0, r3
 8004446:	3720      	adds	r7, #32
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004464:	3b01      	subs	r3, #1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f023 0307 	bic.w	r3, r3, #7
 8004472:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01f      	beq.n	80044dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e012      	b.n	80044c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	7819      	ldrb	r1, [r3, #0]
 80044aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	3334      	adds	r3, #52	@ 0x34
 80044b2:	460a      	mov	r2, r1
 80044b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d006      	beq.n	80044d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	d9e9      	bls.n	80044a2 <prvInitialiseNewTask+0x56>
 80044ce:	e000      	b.n	80044d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80044d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044da:	e003      	b.n	80044e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d901      	bls.n	80044ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ea:	2306      	movs	r3, #6
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	2200      	movs	r2, #0
 80044fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f9ab 	bl	8003860 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	3318      	adds	r3, #24
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f9a6 	bl	8003860 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004518:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	f1c3 0207 	rsb	r2, r3, #7
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2200      	movs	r2, #0
 800452e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	69b8      	ldr	r0, [r7, #24]
 800453e:	f000 fedd 	bl	80052fc <pxPortInitialiseStack>
 8004542:	4602      	mov	r2, r0
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004554:	bf00      	nop
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004564:	f000 fff8 	bl	8005558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004568:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <prvAddNewTaskToReadyList+0xb8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a29      	ldr	r2, [pc, #164]	@ (8004614 <prvAddNewTaskToReadyList+0xb8>)
 8004570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004572:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <prvAddNewTaskToReadyList+0xbc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800457a:	4a27      	ldr	r2, [pc, #156]	@ (8004618 <prvAddNewTaskToReadyList+0xbc>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004580:	4b24      	ldr	r3, [pc, #144]	@ (8004614 <prvAddNewTaskToReadyList+0xb8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d110      	bne.n	80045aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004588:	f000 fbd4 	bl	8004d34 <prvInitialiseTaskLists>
 800458c:	e00d      	b.n	80045aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800458e:	4b23      	ldr	r3, [pc, #140]	@ (800461c <prvAddNewTaskToReadyList+0xc0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <prvAddNewTaskToReadyList+0xbc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d802      	bhi.n	80045aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <prvAddNewTaskToReadyList+0xbc>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <prvAddNewTaskToReadyList+0xc4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <prvAddNewTaskToReadyList+0xc4>)
 80045b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <prvAddNewTaskToReadyList+0xc8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <prvAddNewTaskToReadyList+0xc8>)
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <prvAddNewTaskToReadyList+0xcc>)
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f7ff f94c 	bl	800387a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045e2:	f000 ffeb 	bl	80055bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e6:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <prvAddNewTaskToReadyList+0xc0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00e      	beq.n	800460c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <prvAddNewTaskToReadyList+0xbc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d207      	bcs.n	800460c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <prvAddNewTaskToReadyList+0xd0>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000043c 	.word	0x2000043c
 8004618:	2000033c 	.word	0x2000033c
 800461c:	20000448 	.word	0x20000448
 8004620:	20000458 	.word	0x20000458
 8004624:	20000444 	.word	0x20000444
 8004628:	20000340 	.word	0x20000340
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004642:	4b14      	ldr	r3, [pc, #80]	@ (8004694 <vTaskDelay+0x64>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <vTaskDelay+0x32>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004662:	f000 f87d 	bl	8004760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fde1 	bl	8005230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800466e:	f000 f885 	bl	800477c <xTaskResumeAll>
 8004672:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800467a:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <vTaskDelay+0x68>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000464 	.word	0x20000464
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046aa:	463a      	mov	r2, r7
 80046ac:	1d39      	adds	r1, r7, #4
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb ff0c 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	9202      	str	r2, [sp, #8]
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	460a      	mov	r2, r1
 80046ca:	491f      	ldr	r1, [pc, #124]	@ (8004748 <vTaskStartScheduler+0xac>)
 80046cc:	481f      	ldr	r0, [pc, #124]	@ (800474c <vTaskStartScheduler+0xb0>)
 80046ce:	f7ff fe18 	bl	8004302 <xTaskCreateStatic>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004750 <vTaskStartScheduler+0xb4>)
 80046d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <vTaskStartScheduler+0xb4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e001      	b.n	80046ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d116      	bne.n	800471e <vTaskStartScheduler+0x82>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	613b      	str	r3, [r7, #16]
}
 8004702:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004704:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <vTaskStartScheduler+0xb8>)
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800470c:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <vTaskStartScheduler+0xbc>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <vTaskStartScheduler+0xc0>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004718:	f000 fe7a 	bl	8005410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800471c:	e00f      	b.n	800473e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d10b      	bne.n	800473e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60fb      	str	r3, [r7, #12]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <vTaskStartScheduler+0x9e>
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	08005eec 	.word	0x08005eec
 800474c:	08004d05 	.word	0x08004d05
 8004750:	20000460 	.word	0x20000460
 8004754:	2000045c 	.word	0x2000045c
 8004758:	20000448 	.word	0x20000448
 800475c:	20000440 	.word	0x20000440

08004760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <vTaskSuspendAll+0x18>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	4a03      	ldr	r2, [pc, #12]	@ (8004778 <vTaskSuspendAll+0x18>)
 800476c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000464 	.word	0x20000464

0800477c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800478a:	4b42      	ldr	r3, [pc, #264]	@ (8004894 <xTaskResumeAll+0x118>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <xTaskResumeAll+0x2e>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	603b      	str	r3, [r7, #0]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047aa:	f000 fed5 	bl	8005558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ae:	4b39      	ldr	r3, [pc, #228]	@ (8004894 <xTaskResumeAll+0x118>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	4a37      	ldr	r2, [pc, #220]	@ (8004894 <xTaskResumeAll+0x118>)
 80047b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b8:	4b36      	ldr	r3, [pc, #216]	@ (8004894 <xTaskResumeAll+0x118>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d161      	bne.n	8004884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047c0:	4b35      	ldr	r3, [pc, #212]	@ (8004898 <xTaskResumeAll+0x11c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05d      	beq.n	8004884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c8:	e02e      	b.n	8004828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ca:	4b34      	ldr	r3, [pc, #208]	@ (800489c <xTaskResumeAll+0x120>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3318      	adds	r3, #24
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff f8ac 	bl	8003934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3304      	adds	r3, #4
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f8a7 	bl	8003934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	2201      	movs	r2, #1
 80047ec:	409a      	lsls	r2, r3
 80047ee:	4b2c      	ldr	r3, [pc, #176]	@ (80048a0 <xTaskResumeAll+0x124>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <xTaskResumeAll+0x124>)
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4a27      	ldr	r2, [pc, #156]	@ (80048a4 <xTaskResumeAll+0x128>)
 8004806:	441a      	add	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7ff f833 	bl	800387a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004818:	4b23      	ldr	r3, [pc, #140]	@ (80048a8 <xTaskResumeAll+0x12c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <xTaskResumeAll+0x130>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004828:	4b1c      	ldr	r3, [pc, #112]	@ (800489c <xTaskResumeAll+0x120>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1cc      	bne.n	80047ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004836:	f000 fb1b 	bl	8004e70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <xTaskResumeAll+0x134>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d010      	beq.n	8004868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004846:	f000 f837 	bl	80048b8 <xTaskIncrementTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004850:	4b16      	ldr	r3, [pc, #88]	@ (80048ac <xTaskResumeAll+0x130>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3b01      	subs	r3, #1
 800485a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f1      	bne.n	8004846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <xTaskResumeAll+0x134>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004868:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <xTaskResumeAll+0x130>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <xTaskResumeAll+0x138>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004884:	f000 fe9a 	bl	80055bc <vPortExitCritical>

	return xAlreadyYielded;
 8004888:	68bb      	ldr	r3, [r7, #8]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000464 	.word	0x20000464
 8004898:	2000043c 	.word	0x2000043c
 800489c:	200003fc 	.word	0x200003fc
 80048a0:	20000444 	.word	0x20000444
 80048a4:	20000340 	.word	0x20000340
 80048a8:	2000033c 	.word	0x2000033c
 80048ac:	20000450 	.word	0x20000450
 80048b0:	2000044c 	.word	0x2000044c
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a00 <xTaskIncrementTick+0x148>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 808f 	bne.w	80049ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004a04 <xTaskIncrementTick+0x14c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004a04 <xTaskIncrementTick+0x14c>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d121      	bne.n	8004924 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80048e0:	4b49      	ldr	r3, [pc, #292]	@ (8004a08 <xTaskIncrementTick+0x150>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <xTaskIncrementTick+0x4a>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <xTaskIncrementTick+0x46>
 8004902:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <xTaskIncrementTick+0x150>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	4b40      	ldr	r3, [pc, #256]	@ (8004a0c <xTaskIncrementTick+0x154>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a08 <xTaskIncrementTick+0x150>)
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4a3e      	ldr	r2, [pc, #248]	@ (8004a0c <xTaskIncrementTick+0x154>)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b3e      	ldr	r3, [pc, #248]	@ (8004a10 <xTaskIncrementTick+0x158>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a10 <xTaskIncrementTick+0x158>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	f000 faa6 	bl	8004e70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004924:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <xTaskIncrementTick+0x15c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d348      	bcc.n	80049c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492e:	4b36      	ldr	r3, [pc, #216]	@ (8004a08 <xTaskIncrementTick+0x150>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <xTaskIncrementTick+0x15c>)
 800493a:	f04f 32ff 	mov.w	r2, #4294967295
 800493e:	601a      	str	r2, [r3, #0]
					break;
 8004940:	e03e      	b.n	80049c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004942:	4b31      	ldr	r3, [pc, #196]	@ (8004a08 <xTaskIncrementTick+0x150>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d203      	bcs.n	8004962 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800495a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a14 <xTaskIncrementTick+0x15c>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004960:	e02e      	b.n	80049c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3304      	adds	r3, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe ffe4 	bl	8003934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3318      	adds	r3, #24
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe ffdb 	bl	8003934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	2201      	movs	r2, #1
 8004984:	409a      	lsls	r2, r3
 8004986:	4b24      	ldr	r3, [pc, #144]	@ (8004a18 <xTaskIncrementTick+0x160>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	4a22      	ldr	r2, [pc, #136]	@ (8004a18 <xTaskIncrementTick+0x160>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a1c <xTaskIncrementTick+0x164>)
 800499e:	441a      	add	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe ff67 	bl	800387a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <xTaskIncrementTick+0x168>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b9      	bcc.n	800492e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049be:	e7b6      	b.n	800492e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c0:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <xTaskIncrementTick+0x168>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c6:	4915      	ldr	r1, [pc, #84]	@ (8004a1c <xTaskIncrementTick+0x164>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d901      	bls.n	80049dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049dc:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <xTaskIncrementTick+0x16c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e004      	b.n	80049f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <xTaskIncrementTick+0x170>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <xTaskIncrementTick+0x170>)
 80049f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000464 	.word	0x20000464
 8004a04:	20000440 	.word	0x20000440
 8004a08:	200003f4 	.word	0x200003f4
 8004a0c:	200003f8 	.word	0x200003f8
 8004a10:	20000454 	.word	0x20000454
 8004a14:	2000045c 	.word	0x2000045c
 8004a18:	20000444 	.word	0x20000444
 8004a1c:	20000340 	.word	0x20000340
 8004a20:	2000033c 	.word	0x2000033c
 8004a24:	20000450 	.word	0x20000450
 8004a28:	2000044c 	.word	0x2000044c

08004a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a32:	4b27      	ldr	r3, [pc, #156]	@ (8004ad0 <vTaskSwitchContext+0xa4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3a:	4b26      	ldr	r3, [pc, #152]	@ (8004ad4 <vTaskSwitchContext+0xa8>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a40:	e040      	b.n	8004ac4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004a42:	4b24      	ldr	r3, [pc, #144]	@ (8004ad4 <vTaskSwitchContext+0xa8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	4b23      	ldr	r3, [pc, #140]	@ (8004ad8 <vTaskSwitchContext+0xac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f1c3 031f 	rsb	r3, r3, #31
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	491f      	ldr	r1, [pc, #124]	@ (8004adc <vTaskSwitchContext+0xb0>)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	607b      	str	r3, [r7, #4]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <vTaskSwitchContext+0x5a>
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <vTaskSwitchContext+0xb0>)
 8004a96:	4413      	add	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d104      	bne.n	8004aba <vTaskSwitchContext+0x8e>
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a07      	ldr	r2, [pc, #28]	@ (8004ae0 <vTaskSwitchContext+0xb4>)
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000464 	.word	0x20000464
 8004ad4:	20000450 	.word	0x20000450
 8004ad8:	20000444 	.word	0x20000444
 8004adc:	20000340 	.word	0x20000340
 8004ae0:	2000033c 	.word	0x2000033c

08004ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	e7fd      	b.n	8004b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b0c:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <vTaskPlaceOnEventList+0x48>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3318      	adds	r3, #24
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fe fed4 	bl	80038c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	6838      	ldr	r0, [r7, #0]
 8004b1e:	f000 fb87 	bl	8005230 <prvAddCurrentTaskToDelayedList>
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000033c 	.word	0x2000033c

08004b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60fb      	str	r3, [r7, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3318      	adds	r3, #24
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fee6 	bl	8003934 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b68:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <xTaskRemoveFromEventList+0xb0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11c      	bne.n	8004baa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fedd 	bl	8003934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	2201      	movs	r2, #1
 8004b80:	409a      	lsls	r2, r3
 8004b82:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <xTaskRemoveFromEventList+0xb4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4a16      	ldr	r2, [pc, #88]	@ (8004be4 <xTaskRemoveFromEventList+0xb4>)
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a13      	ldr	r2, [pc, #76]	@ (8004be8 <xTaskRemoveFromEventList+0xb8>)
 8004b9a:	441a      	add	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fe fe69 	bl	800387a <vListInsertEnd>
 8004ba8:	e005      	b.n	8004bb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3318      	adds	r3, #24
 8004bae:	4619      	mov	r1, r3
 8004bb0:	480e      	ldr	r0, [pc, #56]	@ (8004bec <xTaskRemoveFromEventList+0xbc>)
 8004bb2:	f7fe fe62 	bl	800387a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <xTaskRemoveFromEventList+0xc0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d905      	bls.n	8004bd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <xTaskRemoveFromEventList+0xc4>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e001      	b.n	8004bd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bd4:	697b      	ldr	r3, [r7, #20]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000464 	.word	0x20000464
 8004be4:	20000444 	.word	0x20000444
 8004be8:	20000340 	.word	0x20000340
 8004bec:	200003fc 	.word	0x200003fc
 8004bf0:	2000033c 	.word	0x2000033c
 8004bf4:	20000450 	.word	0x20000450

08004bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <vTaskInternalSetTimeOutState+0x24>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <vTaskInternalSetTimeOutState+0x28>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	605a      	str	r2, [r3, #4]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000454 	.word	0x20000454
 8004c20:	20000440 	.word	0x20000440

08004c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	613b      	str	r3, [r7, #16]
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c6a:	f000 fc75 	bl	8005558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <xTaskCheckForTimeOut+0xc0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d102      	bne.n	8004c8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e023      	b.n	8004cd6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <xTaskCheckForTimeOut+0xc4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d007      	beq.n	8004caa <xTaskCheckForTimeOut+0x86>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e015      	b.n	8004cd6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d20b      	bcs.n	8004ccc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1ad2      	subs	r2, r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff99 	bl	8004bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e004      	b.n	8004cd6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cd6:	f000 fc71 	bl	80055bc <vPortExitCritical>

	return xReturn;
 8004cda:	69fb      	ldr	r3, [r7, #28]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000440 	.word	0x20000440
 8004ce8:	20000454 	.word	0x20000454

08004cec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <vTaskMissedYield+0x14>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000450 	.word	0x20000450

08004d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d0c:	f000 f852 	bl	8004db4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <prvIdleTask+0x28>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d9f9      	bls.n	8004d0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <prvIdleTask+0x2c>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d28:	e7f0      	b.n	8004d0c <prvIdleTask+0x8>
 8004d2a:	bf00      	nop
 8004d2c:	20000340 	.word	0x20000340
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e00c      	b.n	8004d5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4a12      	ldr	r2, [pc, #72]	@ (8004d94 <prvInitialiseTaskLists+0x60>)
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fd66 	bl	8003820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3301      	adds	r3, #1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d9ef      	bls.n	8004d40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d60:	480d      	ldr	r0, [pc, #52]	@ (8004d98 <prvInitialiseTaskLists+0x64>)
 8004d62:	f7fe fd5d 	bl	8003820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d66:	480d      	ldr	r0, [pc, #52]	@ (8004d9c <prvInitialiseTaskLists+0x68>)
 8004d68:	f7fe fd5a 	bl	8003820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d6c:	480c      	ldr	r0, [pc, #48]	@ (8004da0 <prvInitialiseTaskLists+0x6c>)
 8004d6e:	f7fe fd57 	bl	8003820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d72:	480c      	ldr	r0, [pc, #48]	@ (8004da4 <prvInitialiseTaskLists+0x70>)
 8004d74:	f7fe fd54 	bl	8003820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d78:	480b      	ldr	r0, [pc, #44]	@ (8004da8 <prvInitialiseTaskLists+0x74>)
 8004d7a:	f7fe fd51 	bl	8003820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <prvInitialiseTaskLists+0x78>)
 8004d80:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <prvInitialiseTaskLists+0x64>)
 8004d82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <prvInitialiseTaskLists+0x7c>)
 8004d86:	4a05      	ldr	r2, [pc, #20]	@ (8004d9c <prvInitialiseTaskLists+0x68>)
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000340 	.word	0x20000340
 8004d98:	200003cc 	.word	0x200003cc
 8004d9c:	200003e0 	.word	0x200003e0
 8004da0:	200003fc 	.word	0x200003fc
 8004da4:	20000410 	.word	0x20000410
 8004da8:	20000428 	.word	0x20000428
 8004dac:	200003f4 	.word	0x200003f4
 8004db0:	200003f8 	.word	0x200003f8

08004db4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dba:	e019      	b.n	8004df0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dbc:	f000 fbcc 	bl	8005558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc0:	4b10      	ldr	r3, [pc, #64]	@ (8004e04 <prvCheckTasksWaitingTermination+0x50>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fdb1 	bl	8003934 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004dda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <prvCheckTasksWaitingTermination+0x58>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <prvCheckTasksWaitingTermination+0x58>)
 8004de4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004de6:	f000 fbe9 	bl	80055bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f810 	bl	8004e10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <prvCheckTasksWaitingTermination+0x58>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e1      	bne.n	8004dbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000410 	.word	0x20000410
 8004e08:	2000043c 	.word	0x2000043c
 8004e0c:	20000424 	.word	0x20000424

08004e10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd86 	bl	8005938 <vPortFree>
				vPortFree( pxTCB );
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fd83 	bl	8005938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e32:	e019      	b.n	8004e68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d103      	bne.n	8004e46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fd7a 	bl	8005938 <vPortFree>
	}
 8004e44:	e010      	b.n	8004e68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d00b      	beq.n	8004e68 <prvDeleteTCB+0x58>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <prvDeleteTCB+0x54>
	}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <prvResetNextTaskUnblockTime+0x38>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e80:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <prvResetNextTaskUnblockTime+0x3c>)
 8004e82:	f04f 32ff 	mov.w	r2, #4294967295
 8004e86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e88:	e008      	b.n	8004e9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <prvResetNextTaskUnblockTime+0x38>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <prvResetNextTaskUnblockTime+0x3c>)
 8004e9a:	6013      	str	r3, [r2, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	200003f4 	.word	0x200003f4
 8004eac:	2000045c 	.word	0x2000045c

08004eb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <xTaskGetSchedulerState+0x34>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	e008      	b.n	8004ed6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <xTaskGetSchedulerState+0x38>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	e001      	b.n	8004ed6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ed6:	687b      	ldr	r3, [r7, #4]
	}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000448 	.word	0x20000448
 8004ee8:	20000464 	.word	0x20000464

08004eec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d05e      	beq.n	8004fc0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f06:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <xTaskPriorityInherit+0xe0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d24e      	bcs.n	8004fae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	db06      	blt.n	8004f26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f18:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <xTaskPriorityInherit+0xe0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	f1c3 0207 	rsb	r2, r3, #7
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6959      	ldr	r1, [r3, #20]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4a26      	ldr	r2, [pc, #152]	@ (8004fd0 <xTaskPriorityInherit+0xe4>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	d12f      	bne.n	8004f9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fcf6 	bl	8003934 <uxListRemove>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	2201      	movs	r2, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43da      	mvns	r2, r3
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <xTaskPriorityInherit+0xe8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <xTaskPriorityInherit+0xe8>)
 8004f62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <xTaskPriorityInherit+0xe0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	2201      	movs	r2, #1
 8004f74:	409a      	lsls	r2, r3
 8004f76:	4b17      	ldr	r3, [pc, #92]	@ (8004fd4 <xTaskPriorityInherit+0xe8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <xTaskPriorityInherit+0xe8>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a10      	ldr	r2, [pc, #64]	@ (8004fd0 <xTaskPriorityInherit+0xe4>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe fc6f 	bl	800387a <vListInsertEnd>
 8004f9c:	e004      	b.n	8004fa8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <xTaskPriorityInherit+0xe0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e008      	b.n	8004fc0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <xTaskPriorityInherit+0xe0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d201      	bcs.n	8004fc0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
	}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000033c 	.word	0x2000033c
 8004fd0:	20000340 	.word	0x20000340
 8004fd4:	20000444 	.word	0x20000444

08004fd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d070      	beq.n	80050d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fee:	4b3b      	ldr	r3, [pc, #236]	@ (80050dc <xTaskPriorityDisinherit+0x104>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d00b      	beq.n	8005010 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	60fb      	str	r3, [r7, #12]
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60bb      	str	r3, [r7, #8]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	429a      	cmp	r2, r3
 8005044:	d044      	beq.n	80050d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504a:	2b00      	cmp	r3, #0
 800504c:	d140      	bne.n	80050d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fc6e 	bl	8003934 <uxListRemove>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d115      	bne.n	800508a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005062:	491f      	ldr	r1, [pc, #124]	@ (80050e0 <xTaskPriorityDisinherit+0x108>)
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTaskPriorityDisinherit+0xb2>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	4b18      	ldr	r3, [pc, #96]	@ (80050e4 <xTaskPriorityDisinherit+0x10c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4013      	ands	r3, r2
 8005086:	4a17      	ldr	r2, [pc, #92]	@ (80050e4 <xTaskPriorityDisinherit+0x10c>)
 8005088:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	f1c3 0207 	rsb	r2, r3, #7
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	2201      	movs	r2, #1
 80050a4:	409a      	lsls	r2, r3
 80050a6:	4b0f      	ldr	r3, [pc, #60]	@ (80050e4 <xTaskPriorityDisinherit+0x10c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	4a0d      	ldr	r2, [pc, #52]	@ (80050e4 <xTaskPriorityDisinherit+0x10c>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <xTaskPriorityDisinherit+0x108>)
 80050be:	441a      	add	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fe fbd7 	bl	800387a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050d0:	697b      	ldr	r3, [r7, #20]
	}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2000033c 	.word	0x2000033c
 80050e0:	20000340 	.word	0x20000340
 80050e4:	20000444 	.word	0x20000444

080050e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050f6:	2301      	movs	r3, #1
 80050f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d079      	beq.n	80051f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	e7fd      	b.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d902      	bls.n	8005130 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e002      	b.n	8005136 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005134:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	429a      	cmp	r2, r3
 800513e:	d059      	beq.n	80051f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	429a      	cmp	r2, r3
 8005148:	d154      	bne.n	80051f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800514a:	4b2c      	ldr	r3, [pc, #176]	@ (80051fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	429a      	cmp	r2, r3
 8005152:	d10b      	bne.n	800516c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60bb      	str	r3, [r7, #8]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db04      	blt.n	800518a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f1c3 0207 	rsb	r2, r3, #7
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	6959      	ldr	r1, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4a19      	ldr	r2, [pc, #100]	@ (8005200 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800519a:	4413      	add	r3, r2
 800519c:	4299      	cmp	r1, r3
 800519e:	d129      	bne.n	80051f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fbc5 	bl	8003934 <uxListRemove>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	2201      	movs	r2, #1
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43da      	mvns	r2, r3
 80051bc:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4013      	ands	r3, r2
 80051c2:	4a10      	ldr	r2, [pc, #64]	@ (8005204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80051c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	2201      	movs	r2, #1
 80051cc:	409a      	lsls	r2, r3
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4a06      	ldr	r2, [pc, #24]	@ (8005200 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051e6:	441a      	add	r2, r3
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7fe fb43 	bl	800387a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	2000033c 	.word	0x2000033c
 8005200:	20000340 	.word	0x20000340
 8005204:	20000444 	.word	0x20000444

08005208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800520c:	4b07      	ldr	r3, [pc, #28]	@ (800522c <pvTaskIncrementMutexHeldCount+0x24>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005214:	4b05      	ldr	r3, [pc, #20]	@ (800522c <pvTaskIncrementMutexHeldCount+0x24>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800521a:	3201      	adds	r2, #1
 800521c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800521e:	4b03      	ldr	r3, [pc, #12]	@ (800522c <pvTaskIncrementMutexHeldCount+0x24>)
 8005220:	681b      	ldr	r3, [r3, #0]
	}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	2000033c 	.word	0x2000033c

08005230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800523a:	4b29      	ldr	r3, [pc, #164]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005240:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3304      	adds	r3, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fb74 	bl	8003934 <uxListRemove>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005252:	4b24      	ldr	r3, [pc, #144]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	2201      	movs	r2, #1
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	4b21      	ldr	r3, [pc, #132]	@ (80052e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4013      	ands	r3, r2
 8005266:	4a20      	ldr	r2, [pc, #128]	@ (80052e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d10a      	bne.n	8005288 <prvAddCurrentTaskToDelayedList+0x58>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005278:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	481a      	ldr	r0, [pc, #104]	@ (80052ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8005282:	f7fe fafa 	bl	800387a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005286:	e026      	b.n	80052d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005290:	4b14      	ldr	r3, [pc, #80]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	429a      	cmp	r2, r3
 800529e:	d209      	bcs.n	80052b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052a0:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b0f      	ldr	r3, [pc, #60]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe fb08 	bl	80038c2 <vListInsert>
}
 80052b2:	e010      	b.n	80052d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b0a      	ldr	r3, [pc, #40]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fe fafe 	bl	80038c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052c6:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d202      	bcs.n	80052d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052d0:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6013      	str	r3, [r2, #0]
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000440 	.word	0x20000440
 80052e4:	2000033c 	.word	0x2000033c
 80052e8:	20000444 	.word	0x20000444
 80052ec:	20000428 	.word	0x20000428
 80052f0:	200003f8 	.word	0x200003f8
 80052f4:	200003f4 	.word	0x200003f4
 80052f8:	2000045c 	.word	0x2000045c

080052fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3b04      	subs	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b04      	subs	r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b04      	subs	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800532c:	4a0c      	ldr	r2, [pc, #48]	@ (8005360 <pxPortInitialiseStack+0x64>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b14      	subs	r3, #20
 8005336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b04      	subs	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f06f 0202 	mvn.w	r2, #2
 800534a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b20      	subs	r3, #32
 8005350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005352:	68fb      	ldr	r3, [r7, #12]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	08005365 	.word	0x08005365

08005364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800536e:	4b13      	ldr	r3, [pc, #76]	@ (80053bc <prvTaskExitError+0x58>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d00b      	beq.n	8005390 <prvTaskExitError+0x2c>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	60fb      	str	r3, [r7, #12]
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <prvTaskExitError+0x28>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60bb      	str	r3, [r7, #8]
}
 80053a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053a4:	bf00      	nop
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0fc      	beq.n	80053a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000018 	.word	0x20000018

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053e8:	4808      	ldr	r0, [pc, #32]	@ (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800540a:	bf00      	nop
 800540c:	e000ed08 	.word	0xe000ed08

08005410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005416:	4b47      	ldr	r3, [pc, #284]	@ (8005534 <xPortStartScheduler+0x124>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a47      	ldr	r2, [pc, #284]	@ (8005538 <xPortStartScheduler+0x128>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10b      	bne.n	8005438 <xPortStartScheduler+0x28>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005438:	4b3e      	ldr	r3, [pc, #248]	@ (8005534 <xPortStartScheduler+0x124>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a3f      	ldr	r2, [pc, #252]	@ (800553c <xPortStartScheduler+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d10b      	bne.n	800545a <xPortStartScheduler+0x4a>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60fb      	str	r3, [r7, #12]
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	e7fd      	b.n	8005456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800545a:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <xPortStartScheduler+0x130>)
 800545c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	22ff      	movs	r2, #255	@ 0xff
 800546a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4b31      	ldr	r3, [pc, #196]	@ (8005544 <xPortStartScheduler+0x134>)
 8005480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <xPortStartScheduler+0x138>)
 8005484:	2207      	movs	r2, #7
 8005486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005488:	e009      	b.n	800549e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800548a:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <xPortStartScheduler+0x138>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3b01      	subs	r3, #1
 8005490:	4a2d      	ldr	r2, [pc, #180]	@ (8005548 <xPortStartScheduler+0x138>)
 8005492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d0ef      	beq.n	800548a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <xPortStartScheduler+0x138>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1c3 0307 	rsb	r3, r3, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00b      	beq.n	80054ce <xPortStartScheduler+0xbe>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60bb      	str	r3, [r7, #8]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <xPortStartScheduler+0x138>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <xPortStartScheduler+0x138>)
 80054d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <xPortStartScheduler+0x138>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054e0:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <xPortStartScheduler+0x138>)
 80054e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054ec:	4b17      	ldr	r3, [pc, #92]	@ (800554c <xPortStartScheduler+0x13c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a16      	ldr	r2, [pc, #88]	@ (800554c <xPortStartScheduler+0x13c>)
 80054f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054f8:	4b14      	ldr	r3, [pc, #80]	@ (800554c <xPortStartScheduler+0x13c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a13      	ldr	r2, [pc, #76]	@ (800554c <xPortStartScheduler+0x13c>)
 80054fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005504:	f000 f8da 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005508:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <xPortStartScheduler+0x140>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800550e:	f000 f8f9 	bl	8005704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <xPortStartScheduler+0x144>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a0f      	ldr	r2, [pc, #60]	@ (8005554 <xPortStartScheduler+0x144>)
 8005518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800551c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800551e:	f7ff ff63 	bl	80053e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005522:	f7ff fa83 	bl	8004a2c <vTaskSwitchContext>
	prvTaskExitError();
 8005526:	f7ff ff1d 	bl	8005364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000ed00 	.word	0xe000ed00
 8005538:	410fc271 	.word	0x410fc271
 800553c:	410fc270 	.word	0x410fc270
 8005540:	e000e400 	.word	0xe000e400
 8005544:	20000468 	.word	0x20000468
 8005548:	2000046c 	.word	0x2000046c
 800554c:	e000ed20 	.word	0xe000ed20
 8005550:	20000018 	.word	0x20000018
 8005554:	e000ef34 	.word	0xe000ef34

08005558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <vPortEnterCritical+0x5c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a0e      	ldr	r2, [pc, #56]	@ (80055b4 <vPortEnterCritical+0x5c>)
 800557a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800557c:	4b0d      	ldr	r3, [pc, #52]	@ (80055b4 <vPortEnterCritical+0x5c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d110      	bne.n	80055a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <vPortEnterCritical+0x60>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <vPortEnterCritical+0x4a>
	}
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000018 	.word	0x20000018
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055c2:	4b12      	ldr	r3, [pc, #72]	@ (800560c <vPortExitCritical+0x50>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <vPortExitCritical+0x26>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	607b      	str	r3, [r7, #4]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <vPortExitCritical+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	4a08      	ldr	r2, [pc, #32]	@ (800560c <vPortExitCritical+0x50>)
 80055ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055ec:	4b07      	ldr	r3, [pc, #28]	@ (800560c <vPortExitCritical+0x50>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <vPortExitCritical+0x44>
 80055f4:	2300      	movs	r3, #0
 80055f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f383 8811 	msr	BASEPRI, r3
}
 80055fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	20000018 	.word	0x20000018

08005610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	@ (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f7ff f9f4 	bl	8004a2c <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7ff f911 	bl	80048b8 <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <SysTick_Handler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	@ (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	@ (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	2000000c 	.word	0x2000000c
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005712:	bf00      	nop
 8005714:	e000ed88 	.word	0xe000ed88

08005718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800571e:	f3ef 8305 	mrs	r3, IPSR
 8005722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d915      	bls.n	8005756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572a:	4a18      	ldr	r2, [pc, #96]	@ (800578c <vPortValidateInterruptPriority+0x74>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005734:	4b16      	ldr	r3, [pc, #88]	@ (8005790 <vPortValidateInterruptPriority+0x78>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	7afa      	ldrb	r2, [r7, #11]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20b      	bcs.n	8005756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005756:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <vPortValidateInterruptPriority+0x7c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800575e:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <vPortValidateInterruptPriority+0x80>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d90b      	bls.n	800577e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	603b      	str	r3, [r7, #0]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <vPortValidateInterruptPriority+0x62>
	}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000e3f0 	.word	0xe000e3f0
 8005790:	20000468 	.word	0x20000468
 8005794:	e000ed0c 	.word	0xe000ed0c
 8005798:	2000046c 	.word	0x2000046c

0800579c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	@ 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057a8:	f7fe ffda 	bl	8004760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005920 <pvPortMalloc+0x184>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057b4:	f000 f924 	bl	8005a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005924 <pvPortMalloc+0x188>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 8095 	bne.w	80058f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057cc:	2208      	movs	r2, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	3308      	adds	r3, #8
 80057e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <pvPortMalloc+0x6e>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d06f      	beq.n	80058f0 <pvPortMalloc+0x154>
 8005810:	4b45      	ldr	r3, [pc, #276]	@ (8005928 <pvPortMalloc+0x18c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d86a      	bhi.n	80058f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800581a:	4b44      	ldr	r3, [pc, #272]	@ (800592c <pvPortMalloc+0x190>)
 800581c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800581e:	4b43      	ldr	r3, [pc, #268]	@ (800592c <pvPortMalloc+0x190>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005824:	e004      	b.n	8005830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d903      	bls.n	8005842 <pvPortMalloc+0xa6>
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f1      	bne.n	8005826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005842:	4b37      	ldr	r3, [pc, #220]	@ (8005920 <pvPortMalloc+0x184>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005848:	429a      	cmp	r2, r3
 800584a:	d051      	beq.n	80058f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2208      	movs	r2, #8
 8005852:	4413      	add	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	2308      	movs	r3, #8
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	429a      	cmp	r2, r3
 800586c:	d920      	bls.n	80058b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800586e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <pvPortMalloc+0xfc>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	613b      	str	r3, [r7, #16]
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058aa:	69b8      	ldr	r0, [r7, #24]
 80058ac:	f000 f90a 	bl	8005ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <pvPortMalloc+0x18c>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <pvPortMalloc+0x18c>)
 80058bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058be:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <pvPortMalloc+0x18c>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <pvPortMalloc+0x194>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d203      	bcs.n	80058d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ca:	4b17      	ldr	r3, [pc, #92]	@ (8005928 <pvPortMalloc+0x18c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <pvPortMalloc+0x194>)
 80058d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b13      	ldr	r3, [pc, #76]	@ (8005924 <pvPortMalloc+0x188>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	431a      	orrs	r2, r3
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058e6:	4b13      	ldr	r3, [pc, #76]	@ (8005934 <pvPortMalloc+0x198>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a11      	ldr	r2, [pc, #68]	@ (8005934 <pvPortMalloc+0x198>)
 80058ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058f0:	f7fe ff44 	bl	800477c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <pvPortMalloc+0x17a>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60fb      	str	r3, [r7, #12]
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <pvPortMalloc+0x176>
	return pvReturn;
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3728      	adds	r7, #40	@ 0x28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20004078 	.word	0x20004078
 8005924:	2000408c 	.word	0x2000408c
 8005928:	2000407c 	.word	0x2000407c
 800592c:	20004070 	.word	0x20004070
 8005930:	20004080 	.word	0x20004080
 8005934:	20004084 	.word	0x20004084

08005938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d04f      	beq.n	80059ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800594a:	2308      	movs	r3, #8
 800594c:	425b      	negs	r3, r3
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <vPortFree+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <vPortFree+0x46>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	60fb      	str	r3, [r7, #12]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <vPortFree+0x66>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60bb      	str	r3, [r7, #8]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <vPortFree+0xbc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01e      	beq.n	80059ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11a      	bne.n	80059ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <vPortFree+0xbc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059c4:	f7fe fecc 	bl	8004760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <vPortFree+0xc0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4413      	add	r3, r2
 80059d2:	4a09      	ldr	r2, [pc, #36]	@ (80059f8 <vPortFree+0xc0>)
 80059d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059d6:	6938      	ldr	r0, [r7, #16]
 80059d8:	f000 f874 	bl	8005ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <vPortFree+0xc4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a06      	ldr	r2, [pc, #24]	@ (80059fc <vPortFree+0xc4>)
 80059e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059e6:	f7fe fec9 	bl	800477c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059ea:	bf00      	nop
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	2000408c 	.word	0x2000408c
 80059f8:	2000407c 	.word	0x2000407c
 80059fc:	20004088 	.word	0x20004088

08005a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a0c:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <prvHeapInit+0xac>)
 8005a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005aac <prvHeapInit+0xac>)
 8005a30:	4413      	add	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <prvHeapInit+0xb0>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab0 <prvHeapInit+0xb0>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a62:	4b14      	ldr	r3, [pc, #80]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a6a:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <prvHeapInit+0xb8>)
 8005a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4a09      	ldr	r2, [pc, #36]	@ (8005abc <prvHeapInit+0xbc>)
 8005a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <prvHeapInit+0xc0>)
 8005a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a9e:	601a      	str	r2, [r3, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000470 	.word	0x20000470
 8005ab0:	20004070 	.word	0x20004070
 8005ab4:	20004078 	.word	0x20004078
 8005ab8:	20004080 	.word	0x20004080
 8005abc:	2000407c 	.word	0x2000407c
 8005ac0:	2000408c 	.word	0x2000408c

08005ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005acc:	4b28      	ldr	r3, [pc, #160]	@ (8005b70 <prvInsertBlockIntoFreeList+0xac>)
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e002      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x14>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d8f7      	bhi.n	8005ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d108      	bne.n	8005b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d118      	bne.n	8005b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <prvInsertBlockIntoFreeList+0xb0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d00d      	beq.n	8005b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	441a      	add	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e008      	b.n	8005b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <prvInsertBlockIntoFreeList+0xb0>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d002      	beq.n	8005b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20004070 	.word	0x20004070
 8005b74:	20004078 	.word	0x20004078

08005b78 <__itoa>:
 8005b78:	1e93      	subs	r3, r2, #2
 8005b7a:	2b22      	cmp	r3, #34	@ 0x22
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	460c      	mov	r4, r1
 8005b80:	d904      	bls.n	8005b8c <__itoa+0x14>
 8005b82:	2300      	movs	r3, #0
 8005b84:	700b      	strb	r3, [r1, #0]
 8005b86:	461c      	mov	r4, r3
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd10      	pop	{r4, pc}
 8005b8c:	2a0a      	cmp	r2, #10
 8005b8e:	d109      	bne.n	8005ba4 <__itoa+0x2c>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	da07      	bge.n	8005ba4 <__itoa+0x2c>
 8005b94:	232d      	movs	r3, #45	@ 0x2d
 8005b96:	700b      	strb	r3, [r1, #0]
 8005b98:	4240      	negs	r0, r0
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	4421      	add	r1, r4
 8005b9e:	f000 f805 	bl	8005bac <__utoa>
 8005ba2:	e7f1      	b.n	8005b88 <__itoa+0x10>
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	e7f9      	b.n	8005b9c <__itoa+0x24>

08005ba8 <itoa>:
 8005ba8:	f7ff bfe6 	b.w	8005b78 <__itoa>

08005bac <__utoa>:
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	4c1f      	ldr	r4, [pc, #124]	@ (8005c2c <__utoa+0x80>)
 8005bb0:	b08b      	sub	sp, #44	@ 0x2c
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	466e      	mov	r6, sp
 8005bb8:	f104 0c20 	add.w	ip, r4, #32
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	6861      	ldr	r1, [r4, #4]
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	c703      	stmia	r7!, {r0, r1}
 8005bc4:	3408      	adds	r4, #8
 8005bc6:	4564      	cmp	r4, ip
 8005bc8:	463e      	mov	r6, r7
 8005bca:	d1f7      	bne.n	8005bbc <__utoa+0x10>
 8005bcc:	7921      	ldrb	r1, [r4, #4]
 8005bce:	7139      	strb	r1, [r7, #4]
 8005bd0:	1e91      	subs	r1, r2, #2
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	6038      	str	r0, [r7, #0]
 8005bd6:	2922      	cmp	r1, #34	@ 0x22
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	d904      	bls.n	8005be8 <__utoa+0x3c>
 8005bde:	7019      	strb	r1, [r3, #0]
 8005be0:	460b      	mov	r3, r1
 8005be2:	4618      	mov	r0, r3
 8005be4:	b00b      	add	sp, #44	@ 0x2c
 8005be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be8:	1e58      	subs	r0, r3, #1
 8005bea:	4684      	mov	ip, r0
 8005bec:	fbb5 f7f2 	udiv	r7, r5, r2
 8005bf0:	fb02 5617 	mls	r6, r2, r7, r5
 8005bf4:	3628      	adds	r6, #40	@ 0x28
 8005bf6:	446e      	add	r6, sp
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005bfe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005c02:	462e      	mov	r6, r5
 8005c04:	42b2      	cmp	r2, r6
 8005c06:	f101 0101 	add.w	r1, r1, #1
 8005c0a:	463d      	mov	r5, r7
 8005c0c:	d9ee      	bls.n	8005bec <__utoa+0x40>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	545a      	strb	r2, [r3, r1]
 8005c12:	1919      	adds	r1, r3, r4
 8005c14:	1aa5      	subs	r5, r4, r2
 8005c16:	42aa      	cmp	r2, r5
 8005c18:	dae3      	bge.n	8005be2 <__utoa+0x36>
 8005c1a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005c1e:	780e      	ldrb	r6, [r1, #0]
 8005c20:	7006      	strb	r6, [r0, #0]
 8005c22:	3201      	adds	r2, #1
 8005c24:	f801 5901 	strb.w	r5, [r1], #-1
 8005c28:	e7f4      	b.n	8005c14 <__utoa+0x68>
 8005c2a:	bf00      	nop
 8005c2c:	08005f0c 	.word	0x08005f0c

08005c30 <memset>:
 8005c30:	4402      	add	r2, r0
 8005c32:	4603      	mov	r3, r0
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d100      	bne.n	8005c3a <memset+0xa>
 8005c38:	4770      	bx	lr
 8005c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3e:	e7f9      	b.n	8005c34 <memset+0x4>

08005c40 <strcat>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4602      	mov	r2, r0
 8005c44:	7814      	ldrb	r4, [r2, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	3201      	adds	r2, #1
 8005c4a:	2c00      	cmp	r4, #0
 8005c4c:	d1fa      	bne.n	8005c44 <strcat+0x4>
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d1f9      	bne.n	8005c50 <strcat+0x10>
 8005c5c:	bd10      	pop	{r4, pc}
	...

08005c60 <__libc_init_array>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	4d0d      	ldr	r5, [pc, #52]	@ (8005c98 <__libc_init_array+0x38>)
 8005c64:	4c0d      	ldr	r4, [pc, #52]	@ (8005c9c <__libc_init_array+0x3c>)
 8005c66:	1b64      	subs	r4, r4, r5
 8005c68:	10a4      	asrs	r4, r4, #2
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	42a6      	cmp	r6, r4
 8005c6e:	d109      	bne.n	8005c84 <__libc_init_array+0x24>
 8005c70:	4d0b      	ldr	r5, [pc, #44]	@ (8005ca0 <__libc_init_array+0x40>)
 8005c72:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca4 <__libc_init_array+0x44>)
 8005c74:	f000 f826 	bl	8005cc4 <_init>
 8005c78:	1b64      	subs	r4, r4, r5
 8005c7a:	10a4      	asrs	r4, r4, #2
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	42a6      	cmp	r6, r4
 8005c80:	d105      	bne.n	8005c8e <__libc_init_array+0x2e>
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c88:	4798      	blx	r3
 8005c8a:	3601      	adds	r6, #1
 8005c8c:	e7ee      	b.n	8005c6c <__libc_init_array+0xc>
 8005c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c92:	4798      	blx	r3
 8005c94:	3601      	adds	r6, #1
 8005c96:	e7f2      	b.n	8005c7e <__libc_init_array+0x1e>
 8005c98:	08005f3c 	.word	0x08005f3c
 8005c9c:	08005f3c 	.word	0x08005f3c
 8005ca0:	08005f3c 	.word	0x08005f3c
 8005ca4:	08005f40 	.word	0x08005f40

08005ca8 <memcpy>:
 8005ca8:	440a      	add	r2, r1
 8005caa:	4291      	cmp	r1, r2
 8005cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cb0:	d100      	bne.n	8005cb4 <memcpy+0xc>
 8005cb2:	4770      	bx	lr
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cbe:	4291      	cmp	r1, r2
 8005cc0:	d1f9      	bne.n	8005cb6 <memcpy+0xe>
 8005cc2:	bd10      	pop	{r4, pc}

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
