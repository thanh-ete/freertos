
009SoftwareTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800556c  0800556c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800556c  0800556c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005574  08005574  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005578  08005578  00006578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800557c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          000045f8  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004608  20004608  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f2c  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9d  00000000  00000000  0001af6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  0001df10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4b  00000000  00000000  0001f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221f2  00000000  00000000  0001ffbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147d5  00000000  00000000  000421ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d2b  00000000  00000000  00056982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a6ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ce4  00000000  00000000  0012a6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0012f3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800549c 	.word	0x0800549c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800549c 	.word	0x0800549c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000080 	.word	0x20000080

080004f4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <vApplicationGetTimerTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	@ (8000524 <vApplicationGetTimerTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000512:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000280 	.word	0x20000280
 8000524:	200002d4 	.word	0x200002d4

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b092      	sub	sp, #72	@ 0x48
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fb1b 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f859 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f8eb 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f8bf 	bl	80006bc <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 800053e:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <main+0xa0>)
 8000540:	643b      	str	r3, [r7, #64]	@ 0x40
 8000542:	2300      	movs	r3, #0
 8000544:	647b      	str	r3, [r7, #68]	@ 0x44
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 8000546:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800054a:	2200      	movs	r2, #0
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fa06 	bl	8002960 <osTimerCreate>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1d      	ldr	r2, [pc, #116]	@ (80005cc <main+0xa4>)
 8000558:	6013      	str	r3, [r2, #0]

  /* definition and creation of onceTimer */
  osTimerDef(onceTimer, OTCallback);
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <main+0xa8>)
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800055e:	2300      	movs	r3, #0
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  onceTimerHandle = osTimerCreate(osTimer(onceTimer), osTimerOnce, NULL);
 8000562:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f9f8 	bl	8002960 <osTimerCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a18      	ldr	r2, [pc, #96]	@ (80005d4 <main+0xac>)
 8000574:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, UartTask, osPriorityNormal, 0, 128);
 8000576:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <main+0xb0>)
 8000578:	f107 041c 	add.w	r4, r7, #28
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f002 f984 	bl	800289e <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a10      	ldr	r2, [pc, #64]	@ (80005dc <main+0xb4>)
 800059a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledTask */
  osThreadDef(ledTask, LedTask, osPriorityNormal, 0, 128);
 800059c:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <main+0xb8>)
 800059e:	463c      	mov	r4, r7
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 80005ae:	463b      	mov	r3, r7
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f973 	bl	800289e <osThreadCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <main+0xbc>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f002 f967 	bl	8002890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x9a>
 80005c6:	bf00      	nop
 80005c8:	08000851 	.word	0x08000851
 80005cc:	20000724 	.word	0x20000724
 80005d0:	08000875 	.word	0x08000875
 80005d4:	20000728 	.word	0x20000728
 80005d8:	080054c0 	.word	0x080054c0
 80005dc:	2000071c 	.word	0x2000071c
 80005e0:	080054e4 	.word	0x080054e4
 80005e4:	20000720 	.word	0x20000720

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 ff16 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	@ 0xa8
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fd6d 	bl	800114c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f91e 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2105      	movs	r1, #5
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ffce 	bl	800163c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f907 	bl	80008b8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fc96 	bl	8002024 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f8db 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200006d4 	.word	0x200006d4
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a25      	ldr	r2, [pc, #148]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a17      	ldr	r2, [pc, #92]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000780:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <MX_GPIO_Init+0xb8>)
 8000782:	f000 fcc9 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	2301      	movs	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_GPIO_Init+0xbc>)
 800079a:	f000 fb09 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800079e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_GPIO_Init+0xb8>)
 80007b8:	f000 fafa 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40020000 	.word	0x40020000

080007d0 <UartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UartTask */
void UartTask(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		osTimerStart(periodicTimerHandle, 1000);
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <UartTask+0x30>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f8f1 	bl	80029c8 <osTimerStart>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart2, "Sending from UART TASK\n", 23, 100);
 80007e6:	2364      	movs	r3, #100	@ 0x64
 80007e8:	2217      	movs	r2, #23
 80007ea:	4906      	ldr	r1, [pc, #24]	@ (8000804 <UartTask+0x34>)
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <UartTask+0x38>)
 80007ee:	f001 fc69 	bl	80020c4 <HAL_UART_Transmit>
	    osDelay(2000);
 80007f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f6:	f002 f89e 	bl	8002936 <osDelay>
		HAL_UART_Transmit(&huart2, "Sending from UART TASK\n", 23, 100);
 80007fa:	bf00      	nop
 80007fc:	e7f3      	b.n	80007e6 <UartTask+0x16>
 80007fe:	bf00      	nop
 8000800:	20000724 	.word	0x20000724
 8000804:	08005500 	.word	0x08005500
 8000808:	200006d4 	.word	0x200006d4

0800080c <LedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask */
void LedTask(void const * argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask */
	  /* Infinite loop */
	  for(;;)
	  {
		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))  // if the button is pressed
 8000814:	2101      	movs	r1, #1
 8000816:	480b      	ldr	r0, [pc, #44]	@ (8000844 <LedTask+0x38>)
 8000818:	f000 fc66 	bl	80010e8 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00c      	beq.n	800083c <LedTask+0x30>
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);  // set the LED
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4807      	ldr	r0, [pc, #28]	@ (8000848 <LedTask+0x3c>)
 800082a:	f000 fc75 	bl	8001118 <HAL_GPIO_WritePin>
			  osTimerStart(onceTimerHandle, 4000);
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <LedTask+0x40>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 f8c6 	bl	80029c8 <osTimerStart>
			}
	    osDelay(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f002 f87a 	bl	8002936 <osDelay>
		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))  // if the button is pressed
 8000842:	e7e7      	b.n	8000814 <LedTask+0x8>
 8000844:	40020000 	.word	0x40020000
 8000848:	40020c00 	.word	0x40020c00
 800084c:	20000728 	.word	0x20000728

08000850 <PTCallback>:
  /* USER CODE END LedTask */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	HAL_UART_Transmit(&huart2, "Sending from PERIODIC TIMER\n", 28, 100);
 8000858:	2364      	movs	r3, #100	@ 0x64
 800085a:	221c      	movs	r2, #28
 800085c:	4903      	ldr	r1, [pc, #12]	@ (800086c <PTCallback+0x1c>)
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <PTCallback+0x20>)
 8000860:	f001 fc30 	bl	80020c4 <HAL_UART_Transmit>
  /* USER CODE END PTCallback */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08005518 	.word	0x08005518
 8000870:	200006d4 	.word	0x200006d4

08000874 <OTCallback>:

/* OTCallback function */
void OTCallback(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTCallback */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);  // Reset the LED
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000882:	4803      	ldr	r0, [pc, #12]	@ (8000890 <OTCallback+0x1c>)
 8000884:	f000 fc48 	bl	8001118 <HAL_GPIO_WritePin>
  /* USER CODE END OTCallback */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020c00 	.word	0x40020c00

08000894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 f981 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40001000 	.word	0x40001000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <HAL_MspInit+0x54>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_MspInit+0x54>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa27 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_UART_MspInit+0x8c>)
 8000992:	f000 fa0d 	bl	8000db0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	@ 0x38
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <HAL_InitTick+0xe4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a32      	ldr	r2, [pc, #200]	@ (8000a90 <HAL_InitTick+0xe4>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <HAL_InitTick+0xe4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 0310 	and.w	r3, r3, #16
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d8:	f107 0210 	add.w	r2, r7, #16
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f84a 	bl	8001a7c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d103      	bne.n	80009fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f2:	f001 f81b 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80009f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80009f8:	e004      	b.n	8000a04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009fa:	f001 f817 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80009fe:	4603      	mov	r3, r0
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a06:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <HAL_InitTick+0xe8>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	0c9b      	lsrs	r3, r3, #18
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_InitTick+0xf0>)
 8000a16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a20:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a38:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a3a:	f001 f851 	bl	8001ae0 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d11b      	bne.n	8000a84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a4c:	4812      	ldr	r0, [pc, #72]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a4e:	f001 f8a1 	bl	8001b94 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d111      	bne.n	8000a84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a60:	2036      	movs	r0, #54	@ 0x36
 8000a62:	f000 f997 	bl	8000d94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d808      	bhi.n	8000a7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2036      	movs	r0, #54	@ 0x36
 8000a72:	f000 f973 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_InitTick+0xf4>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e002      	b.n	8000a84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3738      	adds	r7, #56	@ 0x38
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	2000072c 	.word	0x2000072c
 8000a9c:	40001000 	.word	0x40001000
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <TIM6_DAC_IRQHandler+0x10>)
 8000ae2:	f001 f8c7 	bl	8001c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000072c 	.word	0x2000072c

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f004 fc79 	bl	8005438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fcef 	bl	8000528 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b58:	0800557c 	.word	0x0800557c
  ldr r2, =_sbss
 8000b5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b60:	20004608 	.word	0x20004608

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8d8 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f7ff ff08 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe92 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000774 	.word	0x20000774

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000774 	.word	0x20000774

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e16b      	b.n	80010a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 815a 	bne.w	800109e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80b4 	beq.w	800109e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b60      	ldr	r3, [pc, #384]	@ (80010bc <HAL_GPIO_Init+0x30c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a5f      	ldr	r2, [pc, #380]	@ (80010bc <HAL_GPIO_Init+0x30c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <HAL_GPIO_Init+0x30c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a5b      	ldr	r2, [pc, #364]	@ (80010c0 <HAL_GPIO_Init+0x310>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a52      	ldr	r2, [pc, #328]	@ (80010c4 <HAL_GPIO_Init+0x314>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d02b      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a51      	ldr	r2, [pc, #324]	@ (80010c8 <HAL_GPIO_Init+0x318>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x222>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a50      	ldr	r2, [pc, #320]	@ (80010cc <HAL_GPIO_Init+0x31c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x21e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4f      	ldr	r2, [pc, #316]	@ (80010d0 <HAL_GPIO_Init+0x320>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x21a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x216>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80010d8 <HAL_GPIO_Init+0x328>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80010dc <HAL_GPIO_Init+0x32c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x20e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80010e0 <HAL_GPIO_Init+0x330>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x20a>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e00e      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fba:	2308      	movs	r3, #8
 8000fbc:	e00c      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00a      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e008      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f002 0203 	and.w	r2, r2, #3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe8:	4935      	ldr	r1, [pc, #212]	@ (80010c0 <HAL_GPIO_Init+0x310>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106e:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001098:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <HAL_GPIO_Init+0x334>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	f67f ae90 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e267      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d075      	beq.n	8001256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800116a:	4b88      	ldr	r3, [pc, #544]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b04      	cmp	r3, #4
 8001174:	d00c      	beq.n	8001190 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b85      	ldr	r3, [pc, #532]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800117e:	2b08      	cmp	r3, #8
 8001180:	d112      	bne.n	80011a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b82      	ldr	r3, [pc, #520]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800118a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800118e:	d10b      	bne.n	80011a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	4b7e      	ldr	r3, [pc, #504]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d05b      	beq.n	8001254 <HAL_RCC_OscConfig+0x108>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d157      	bne.n	8001254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e242      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b0:	d106      	bne.n	80011c0 <HAL_RCC_OscConfig+0x74>
 80011b2:	4b76      	ldr	r3, [pc, #472]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a75      	ldr	r2, [pc, #468]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xb0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x98>
 80011ca:	4b70      	ldr	r3, [pc, #448]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6f      	ldr	r2, [pc, #444]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b6d      	ldr	r3, [pc, #436]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6c      	ldr	r2, [pc, #432]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xb0>
 80011e4:	4b69      	ldr	r3, [pc, #420]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a68      	ldr	r2, [pc, #416]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b66      	ldr	r3, [pc, #408]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a65      	ldr	r2, [pc, #404]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fce6 	bl	8000bd4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fce2 	bl	8000bd4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e207      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b5b      	ldr	r3, [pc, #364]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xc0>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fcd2 	bl	8000bd4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fcce 	bl	8000bd4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	@ 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1f3      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b51      	ldr	r3, [pc, #324]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0xe8>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d063      	beq.n	800132a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001262:	4b4a      	ldr	r3, [pc, #296]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b44      	ldr	r3, [pc, #272]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b41      	ldr	r3, [pc, #260]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x152>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1c7      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4937      	ldr	r1, [pc, #220]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e03a      	b.n	800132a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <HAL_RCC_OscConfig+0x244>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc87 	bl	8000bd4 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc83 	bl	8000bd4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1a8      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4925      	ldr	r1, [pc, #148]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_RCC_OscConfig+0x244>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fc66 	bl	8000bd4 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fc62 	bl	8000bd4 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e187      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d036      	beq.n	80013a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d016      	beq.n	800136c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_RCC_OscConfig+0x248>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fc46 	bl	8000bd4 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fc42 	bl	8000bd4 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e167      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_OscConfig+0x240>)
 8001360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x200>
 800136a:	e01b      	b.n	80013a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_RCC_OscConfig+0x248>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fc2f 	bl	8000bd4 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	e00e      	b.n	8001398 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff fc2b 	bl	8000bd4 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d907      	bls.n	8001398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e150      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
 800138c:	40023800 	.word	0x40023800
 8001390:	42470000 	.word	0x42470000
 8001394:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	4b88      	ldr	r3, [pc, #544]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800139a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ea      	bne.n	800137a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8097 	beq.w	80014e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b81      	ldr	r3, [pc, #516]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b7d      	ldr	r3, [pc, #500]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a7c      	ldr	r2, [pc, #496]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b7a      	ldr	r3, [pc, #488]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b77      	ldr	r3, [pc, #476]	@ (80015c0 <HAL_RCC_OscConfig+0x474>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b74      	ldr	r3, [pc, #464]	@ (80015c0 <HAL_RCC_OscConfig+0x474>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a73      	ldr	r2, [pc, #460]	@ (80015c0 <HAL_RCC_OscConfig+0x474>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbeb 	bl	8000bd4 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fbe7 	bl	8000bd4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e10c      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <HAL_RCC_OscConfig+0x474>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x2ea>
 8001428:	4b64      	ldr	r3, [pc, #400]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142c:	4a63      	ldr	r2, [pc, #396]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	@ 0x70
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x324>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x30c>
 800143e:	4b5f      	ldr	r3, [pc, #380]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001442:	4a5e      	ldr	r2, [pc, #376]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6713      	str	r3, [r2, #112]	@ 0x70
 800144a:	4b5c      	ldr	r3, [pc, #368]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144e:	4a5b      	ldr	r2, [pc, #364]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6713      	str	r3, [r2, #112]	@ 0x70
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0x324>
 8001458:	4b58      	ldr	r3, [pc, #352]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145c:	4a57      	ldr	r2, [pc, #348]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	@ 0x70
 8001464:	4b55      	ldr	r3, [pc, #340]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001468:	4a54      	ldr	r2, [pc, #336]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 0304 	bic.w	r3, r3, #4
 800146e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fbac 	bl	8000bd4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff fba8 	bl	8000bd4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0cb      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	4b49      	ldr	r3, [pc, #292]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0ee      	beq.n	8001480 <HAL_RCC_OscConfig+0x334>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff fb96 	bl	8000bd4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff fb92 	bl	8000bd4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0b5      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c2:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ee      	bne.n	80014ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b39      	ldr	r3, [pc, #228]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a38      	ldr	r2, [pc, #224]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80014da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a1 	beq.w	800162c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d05c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d141      	bne.n	8001582 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b31      	ldr	r3, [pc, #196]	@ (80015c4 <HAL_RCC_OscConfig+0x478>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb66 	bl	8000bd4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb62 	bl	8000bd4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e087      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	491b      	ldr	r1, [pc, #108]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x478>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fb3b 	bl	8000bd4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff fb37 	bl	8000bd4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e05c      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x416>
 8001580:	e054      	b.n	800162c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb24 	bl	8000bd4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fb20 	bl	8000bd4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e045      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x444>
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e038      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000
 80015c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x4ec>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d028      	beq.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d121      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d11a      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001600:	4293      	cmp	r3, r2
 8001602:	d111      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0cc      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b68      	ldr	r3, [pc, #416]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d90c      	bls.n	8001678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b65      	ldr	r3, [pc, #404]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b63      	ldr	r3, [pc, #396]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b8      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b59      	ldr	r3, [pc, #356]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a58      	ldr	r2, [pc, #352]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800169a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a8:	4b53      	ldr	r3, [pc, #332]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a52      	ldr	r2, [pc, #328]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b50      	ldr	r3, [pc, #320]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	494d      	ldr	r1, [pc, #308]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d044      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d119      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e07f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b3f      	ldr	r3, [pc, #252]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e067      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4934      	ldr	r1, [pc, #208]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172c:	f7ff fa52 	bl	8000bd4 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff fa4e 	bl	8000bd4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e04f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d20c      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e032      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4916      	ldr	r1, [pc, #88]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490e      	ldr	r1, [pc, #56]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 f821 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	490a      	ldr	r1, [pc, #40]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	5ccb      	ldrb	r3, [r1, r3]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f8e2 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	08005554 	.word	0x08005554
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b094      	sub	sp, #80	@ 0x50
 800180e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001820:	4b79      	ldr	r3, [pc, #484]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d00d      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x40>
 800182c:	2b08      	cmp	r3, #8
 800182e:	f200 80e1 	bhi.w	80019f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x34>
 8001836:	2b04      	cmp	r3, #4
 8001838:	d003      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x3a>
 800183a:	e0db      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800183c:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x204>)
 800183e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001840:	e0db      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001842:	4b73      	ldr	r3, [pc, #460]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001844:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001846:	e0d8      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001848:	4b6f      	ldr	r3, [pc, #444]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001850:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001852:	4b6d      	ldr	r3, [pc, #436]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	099b      	lsrs	r3, r3, #6
 8001864:	2200      	movs	r2, #0
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001868:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800186a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800186c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001870:	633b      	str	r3, [r7, #48]	@ 0x30
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
 8001876:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4621      	mov	r1, r4
 8001894:	1a51      	subs	r1, r2, r1
 8001896:	6139      	str	r1, [r7, #16]
 8001898:	4629      	mov	r1, r5
 800189a:	eb63 0301 	sbc.w	r3, r3, r1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018ac:	4659      	mov	r1, fp
 80018ae:	018b      	lsls	r3, r1, #6
 80018b0:	4651      	mov	r1, sl
 80018b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b6:	4651      	mov	r1, sl
 80018b8:	018a      	lsls	r2, r1, #6
 80018ba:	4651      	mov	r1, sl
 80018bc:	ebb2 0801 	subs.w	r8, r2, r1
 80018c0:	4659      	mov	r1, fp
 80018c2:	eb63 0901 	sbc.w	r9, r3, r1
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018da:	4690      	mov	r8, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	eb18 0303 	adds.w	r3, r8, r3
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	462b      	mov	r3, r5
 80018e8:	eb49 0303 	adc.w	r3, r9, r3
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018fa:	4629      	mov	r1, r5
 80018fc:	024b      	lsls	r3, r1, #9
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001904:	4621      	mov	r1, r4
 8001906:	024a      	lsls	r2, r1, #9
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190e:	2200      	movs	r2, #0
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001914:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001918:	f7fe fc5a 	bl	80001d0 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001924:	e058      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001926:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	2200      	movs	r2, #0
 800192e:	4618      	mov	r0, r3
 8001930:	4611      	mov	r1, r2
 8001932:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
 800193c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001940:	4642      	mov	r2, r8
 8001942:	464b      	mov	r3, r9
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	0159      	lsls	r1, r3, #5
 800194e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001952:	0150      	lsls	r0, r2, #5
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4641      	mov	r1, r8
 800195a:	ebb2 0a01 	subs.w	sl, r2, r1
 800195e:	4649      	mov	r1, r9
 8001960:	eb63 0b01 	sbc.w	fp, r3, r1
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001970:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001974:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001978:	ebb2 040a 	subs.w	r4, r2, sl
 800197c:	eb63 050b 	sbc.w	r5, r3, fp
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	00eb      	lsls	r3, r5, #3
 800198a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198e:	00e2      	lsls	r2, r4, #3
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	4643      	mov	r3, r8
 8001996:	18e3      	adds	r3, r4, r3
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	464b      	mov	r3, r9
 800199c:	eb45 0303 	adc.w	r3, r5, r3
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ae:	4629      	mov	r1, r5
 80019b0:	028b      	lsls	r3, r1, #10
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b8:	4621      	mov	r1, r4
 80019ba:	028a      	lsls	r2, r1, #10
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c2:	2200      	movs	r2, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	61fa      	str	r2, [r7, #28]
 80019c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019cc:	f7fe fc00 	bl	80001d0 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x200>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	3301      	adds	r3, #1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x204>)
 80019f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3750      	adds	r7, #80	@ 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	007a1200 	.word	0x007a1200

08001a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	@ (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08005564 	.word	0x08005564

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffdc 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	@ (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08005564 	.word	0x08005564

08001a7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	220f      	movs	r2, #15
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <HAL_RCC_GetClockConfig+0x60>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0207 	and.w	r2, r3, #7
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e041      	b.n	8001b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f839 	bl	8001b7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f000 f9c0 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d001      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e04e      	b.n	8001c4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a23      	ldr	r2, [pc, #140]	@ (8001c58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d022      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd6:	d01d      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d018      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00e      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001c68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x80>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d111      	bne.n	8001c38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d010      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c36:	e007      	b.n	8001c48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40000800 	.word	0x40000800
 8001c64:	40000c00 	.word	0x40000c00
 8001c68:	40010400 	.word	0x40010400
 8001c6c:	40014000 	.word	0x40014000
 8001c70:	40001800 	.word	0x40001800

08001c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d020      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0202 	mvn.w	r2, #2
 8001ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8d2 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e005      	b.n	8001cd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8c4 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8d5 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d020      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0204 	mvn.w	r2, #4
 8001cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8ac 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f89e 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8af 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d020      	beq.n	8001d70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0208 	mvn.w	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f886 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f878 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f889 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d020      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0210 	mvn.w	r2, #16
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2208      	movs	r2, #8
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f860 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f852 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f863 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0201 	mvn.w	r2, #1
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fd5a 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f906 	bl	8002010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f834 	bl	8001e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0220 	mvn.w	r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8d8 	bl	8001ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a46      	ldr	r2, [pc, #280]	@ (8001fd0 <TIM_Base_SetConfig+0x12c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a43      	ldr	r2, [pc, #268]	@ (8001fd4 <TIM_Base_SetConfig+0x130>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a42      	ldr	r2, [pc, #264]	@ (8001fd8 <TIM_Base_SetConfig+0x134>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a41      	ldr	r2, [pc, #260]	@ (8001fdc <TIM_Base_SetConfig+0x138>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a40      	ldr	r2, [pc, #256]	@ (8001fe0 <TIM_Base_SetConfig+0x13c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a35      	ldr	r2, [pc, #212]	@ (8001fd0 <TIM_Base_SetConfig+0x12c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d027      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a32      	ldr	r2, [pc, #200]	@ (8001fd4 <TIM_Base_SetConfig+0x130>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d023      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a31      	ldr	r2, [pc, #196]	@ (8001fd8 <TIM_Base_SetConfig+0x134>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a30      	ldr	r2, [pc, #192]	@ (8001fdc <TIM_Base_SetConfig+0x138>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe0 <TIM_Base_SetConfig+0x13c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d017      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe4 <TIM_Base_SetConfig+0x140>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe8 <TIM_Base_SetConfig+0x144>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2c      	ldr	r2, [pc, #176]	@ (8001fec <TIM_Base_SetConfig+0x148>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff0 <TIM_Base_SetConfig+0x14c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <TIM_Base_SetConfig+0x150>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a29      	ldr	r2, [pc, #164]	@ (8001ff8 <TIM_Base_SetConfig+0x154>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <TIM_Base_SetConfig+0x12c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0xf8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <TIM_Base_SetConfig+0x13c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f023 0201 	bic.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800
 8001ff0:	40001800 	.word	0x40001800
 8001ff4:	40001c00 	.word	0x40001c00
 8001ff8:	40002000 	.word	0x40002000

08001ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e042      	b.n	80020bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fc66 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f973 	bl	8002354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d175      	bne.n	80021d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_UART_Transmit+0x2c>
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e06e      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2221      	movs	r2, #33	@ 0x21
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002102:	f7fe fd67 	bl	8000bd4 <HAL_GetTick>
 8002106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211c:	d108      	bne.n	8002130 <HAL_UART_Transmit+0x6c>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e003      	b.n	8002138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002138:	e02e      	b.n	8002198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f848 	bl	80021da <UART_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03a      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10b      	bne.n	800217a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3302      	adds	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e007      	b.n	800218a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3301      	adds	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1cb      	bne.n	800213a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	@ 0x40
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f814 	bl	80021da <UART_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ea:	e03b      	b.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d037      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7fe fcee 	bl	8000bd4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	6a3a      	ldr	r2, [r7, #32]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <UART_WaitOnFlagUntilTimeout+0x30>
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e03a      	b.n	8002284 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b80      	cmp	r3, #128	@ 0x80
 8002220:	d020      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b40      	cmp	r3, #64	@ 0x40
 8002226:	d01d      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d116      	bne.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f81d 	bl	800228c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2208      	movs	r2, #8
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e00f      	b.n	8002284 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d0b4      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800228c:	b480      	push	{r7}
 800228e:	b095      	sub	sp, #84	@ 0x54
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3314      	adds	r3, #20
 80022ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	e853 3f00 	ldrex	r3, [r3]
 80022d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022f0:	e841 2300 	strex	r3, r2, [r1]
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e5      	bne.n	80022c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	2b01      	cmp	r3, #1
 8002302:	d119      	bne.n	8002338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	e853 3f00 	ldrex	r3, [r3]
 8002312:	60bb      	str	r3, [r7, #8]
   return(result);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f023 0310 	bic.w	r3, r3, #16
 800231a:	647b      	str	r3, [r7, #68]	@ 0x44
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	330c      	adds	r3, #12
 8002322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002324:	61ba      	str	r2, [r7, #24]
 8002326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	e841 2300 	strex	r3, r2, [r1]
 8002330:	613b      	str	r3, [r7, #16]
   return(result);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e5      	bne.n	8002304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002346:	bf00      	nop
 8002348:	3754      	adds	r7, #84	@ 0x54
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002358:	b0c0      	sub	sp, #256	@ 0x100
 800235a:	af00      	add	r7, sp, #0
 800235c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	ea40 0301 	orr.w	r3, r0, r1
 800237c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	431a      	orrs	r2, r3
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	431a      	orrs	r2, r3
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023ac:	f021 010c 	bic.w	r1, r1, #12
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ba:	430b      	orrs	r3, r1
 80023bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ce:	6999      	ldr	r1, [r3, #24]
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	ea40 0301 	orr.w	r3, r0, r1
 80023da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002620 <UART_SetConfig+0x2cc>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d005      	beq.n	80023f4 <UART_SetConfig+0xa0>
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002624 <UART_SetConfig+0x2d0>)
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d104      	bne.n	80023fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f4:	f7ff fb2e 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80023f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023fc:	e003      	b.n	8002406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023fe:	f7ff fb15 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002402:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002410:	f040 810c 	bne.w	800262c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800241e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002426:	4622      	mov	r2, r4
 8002428:	462b      	mov	r3, r5
 800242a:	1891      	adds	r1, r2, r2
 800242c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800242e:	415b      	adcs	r3, r3
 8002430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002436:	4621      	mov	r1, r4
 8002438:	eb12 0801 	adds.w	r8, r2, r1
 800243c:	4629      	mov	r1, r5
 800243e:	eb43 0901 	adc.w	r9, r3, r1
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4623      	mov	r3, r4
 800245c:	eb18 0303 	adds.w	r3, r8, r3
 8002460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002464:	462b      	mov	r3, r5
 8002466:	eb49 0303 	adc.w	r3, r9, r3
 800246a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800247a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800247e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002482:	460b      	mov	r3, r1
 8002484:	18db      	adds	r3, r3, r3
 8002486:	653b      	str	r3, [r7, #80]	@ 0x50
 8002488:	4613      	mov	r3, r2
 800248a:	eb42 0303 	adc.w	r3, r2, r3
 800248e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002498:	f7fd fe9a 	bl	80001d0 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4b61      	ldr	r3, [pc, #388]	@ (8002628 <UART_SetConfig+0x2d4>)
 80024a2:	fba3 2302 	umull	r2, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	011c      	lsls	r4, r3, #4
 80024aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024bc:	4642      	mov	r2, r8
 80024be:	464b      	mov	r3, r9
 80024c0:	1891      	adds	r1, r2, r2
 80024c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024c4:	415b      	adcs	r3, r3
 80024c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024cc:	4641      	mov	r1, r8
 80024ce:	eb12 0a01 	adds.w	sl, r2, r1
 80024d2:	4649      	mov	r1, r9
 80024d4:	eb43 0b01 	adc.w	fp, r3, r1
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ec:	4692      	mov	sl, r2
 80024ee:	469b      	mov	fp, r3
 80024f0:	4643      	mov	r3, r8
 80024f2:	eb1a 0303 	adds.w	r3, sl, r3
 80024f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024fa:	464b      	mov	r3, r9
 80024fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002500:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002510:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002518:	460b      	mov	r3, r1
 800251a:	18db      	adds	r3, r3, r3
 800251c:	643b      	str	r3, [r7, #64]	@ 0x40
 800251e:	4613      	mov	r3, r2
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	647b      	str	r3, [r7, #68]	@ 0x44
 8002526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800252a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800252e:	f7fd fe4f 	bl	80001d0 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4611      	mov	r1, r2
 8002538:	4b3b      	ldr	r3, [pc, #236]	@ (8002628 <UART_SetConfig+0x2d4>)
 800253a:	fba3 2301 	umull	r2, r3, r3, r1
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2264      	movs	r2, #100	@ 0x64
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	1acb      	subs	r3, r1, r3
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800254e:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <UART_SetConfig+0x2d4>)
 8002550:	fba3 2302 	umull	r2, r3, r3, r2
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800255c:	441c      	add	r4, r3
 800255e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002568:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800256c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002570:	4642      	mov	r2, r8
 8002572:	464b      	mov	r3, r9
 8002574:	1891      	adds	r1, r2, r2
 8002576:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002578:	415b      	adcs	r3, r3
 800257a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002580:	4641      	mov	r1, r8
 8002582:	1851      	adds	r1, r2, r1
 8002584:	6339      	str	r1, [r7, #48]	@ 0x30
 8002586:	4649      	mov	r1, r9
 8002588:	414b      	adcs	r3, r1
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002598:	4659      	mov	r1, fp
 800259a:	00cb      	lsls	r3, r1, #3
 800259c:	4651      	mov	r1, sl
 800259e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a2:	4651      	mov	r1, sl
 80025a4:	00ca      	lsls	r2, r1, #3
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	4642      	mov	r2, r8
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025b4:	464b      	mov	r3, r9
 80025b6:	460a      	mov	r2, r1
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025d4:	460b      	mov	r3, r1
 80025d6:	18db      	adds	r3, r3, r3
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025da:	4613      	mov	r3, r2
 80025dc:	eb42 0303 	adc.w	r3, r2, r3
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025ea:	f7fd fdf1 	bl	80001d0 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <UART_SetConfig+0x2d4>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	@ 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3332      	adds	r3, #50	@ 0x32
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <UART_SetConfig+0x2d4>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4422      	add	r2, r4
 800261a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800261c:	e106      	b.n	800282c <UART_SetConfig+0x4d8>
 800261e:	bf00      	nop
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800262c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002630:	2200      	movs	r2, #0
 8002632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002636:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800263a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	1891      	adds	r1, r2, r2
 8002644:	6239      	str	r1, [r7, #32]
 8002646:	415b      	adcs	r3, r3
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
 800264a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264e:	4641      	mov	r1, r8
 8002650:	1854      	adds	r4, r2, r1
 8002652:	4649      	mov	r1, r9
 8002654:	eb43 0501 	adc.w	r5, r3, r1
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	00eb      	lsls	r3, r5, #3
 8002662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002666:	00e2      	lsls	r2, r4, #3
 8002668:	4614      	mov	r4, r2
 800266a:	461d      	mov	r5, r3
 800266c:	4643      	mov	r3, r8
 800266e:	18e3      	adds	r3, r4, r3
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002674:	464b      	mov	r3, r9
 8002676:	eb45 0303 	adc.w	r3, r5, r3
 800267a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800268a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800269a:	4629      	mov	r1, r5
 800269c:	008b      	lsls	r3, r1, #2
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a4:	4621      	mov	r1, r4
 80026a6:	008a      	lsls	r2, r1, #2
 80026a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026ac:	f7fd fd90 	bl	80001d0 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <UART_SetConfig+0x4e4>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011c      	lsls	r4, r3, #4
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	61b9      	str	r1, [r7, #24]
 80026d8:	415b      	adcs	r3, r3
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e0:	4641      	mov	r1, r8
 80026e2:	1851      	adds	r1, r2, r1
 80026e4:	6139      	str	r1, [r7, #16]
 80026e6:	4649      	mov	r1, r9
 80026e8:	414b      	adcs	r3, r1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f8:	4659      	mov	r1, fp
 80026fa:	00cb      	lsls	r3, r1, #3
 80026fc:	4651      	mov	r1, sl
 80026fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002702:	4651      	mov	r1, sl
 8002704:	00ca      	lsls	r2, r1, #3
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	4603      	mov	r3, r0
 800270c:	4642      	mov	r2, r8
 800270e:	189b      	adds	r3, r3, r2
 8002710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002714:	464b      	mov	r3, r9
 8002716:	460a      	mov	r2, r1
 8002718:	eb42 0303 	adc.w	r3, r2, r3
 800271c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800272a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002738:	4649      	mov	r1, r9
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	4641      	mov	r1, r8
 800273e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002742:	4641      	mov	r1, r8
 8002744:	008a      	lsls	r2, r1, #2
 8002746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800274a:	f7fd fd41 	bl	80001d0 <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4611      	mov	r1, r2
 8002754:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <UART_SetConfig+0x4e4>)
 8002756:	fba3 2301 	umull	r2, r3, r3, r1
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2264      	movs	r2, #100	@ 0x64
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	1acb      	subs	r3, r1, r3
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	3332      	adds	r3, #50	@ 0x32
 8002768:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <UART_SetConfig+0x4e4>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002774:	441c      	add	r4, r3
 8002776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277a:	2200      	movs	r2, #0
 800277c:	673b      	str	r3, [r7, #112]	@ 0x70
 800277e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002780:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	1891      	adds	r1, r2, r2
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	415b      	adcs	r3, r3
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002794:	4641      	mov	r1, r8
 8002796:	1851      	adds	r1, r2, r1
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	4649      	mov	r1, r9
 800279c:	414b      	adcs	r3, r1
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027ac:	4659      	mov	r1, fp
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	4651      	mov	r1, sl
 80027b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b6:	4651      	mov	r1, sl
 80027b8:	00ca      	lsls	r2, r1, #3
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	4642      	mov	r2, r8
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027c6:	464b      	mov	r3, r9
 80027c8:	460a      	mov	r2, r1
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80027da:	667a      	str	r2, [r7, #100]	@ 0x64
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027e8:	4649      	mov	r1, r9
 80027ea:	008b      	lsls	r3, r1, #2
 80027ec:	4641      	mov	r1, r8
 80027ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f2:	4641      	mov	r1, r8
 80027f4:	008a      	lsls	r2, r1, #2
 80027f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027fa:	f7fd fce9 	bl	80001d0 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <UART_SetConfig+0x4e4>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	@ 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	@ 0x32
 8002816:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <UART_SetConfig+0x4e4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4422      	add	r2, r4
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002838:	51eb851f 	.word	0x51eb851f

0800283c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800284a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284e:	2b84      	cmp	r3, #132	@ 0x84
 8002850:	d005      	beq.n	800285e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002852:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	3303      	adds	r3, #3
 800285c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002872:	f3ef 8305 	mrs	r3, IPSR
 8002876:	607b      	str	r3, [r7, #4]
  return(result);
 8002878:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002894:	f001 f854 	bl	8003940 <vTaskStartScheduler>
  
  return osOK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}

0800289e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800289e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a0:	b089      	sub	sp, #36	@ 0x24
 80028a2:	af04      	add	r7, sp, #16
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <osThreadCreate+0x54>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01c      	beq.n	80028f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685c      	ldr	r4, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691e      	ldr	r6, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ffb6 	bl	800283c <makeFreeRtosPriority>
 80028d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028da:	9202      	str	r2, [sp, #8]
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	9100      	str	r1, [sp, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4632      	mov	r2, r6
 80028e4:	4629      	mov	r1, r5
 80028e6:	4620      	mov	r0, r4
 80028e8:	f000 fe5c 	bl	80035a4 <xTaskCreateStatic>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e01c      	b.n	800292c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685c      	ldr	r4, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff98 	bl	800283c <makeFreeRtosPriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	4632      	mov	r2, r6
 800291a:	4629      	mov	r1, r5
 800291c:	4620      	mov	r0, r4
 800291e:	f000 fea1 	bl	8003664 <xTaskCreate>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002936 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <osDelay+0x16>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	e000      	b.n	800294e <osDelay+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f000 ffc0 	bl	80038d4 <vTaskDelay>
  
  return osOK;
 8002954:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	460b      	mov	r3, r1
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d013      	beq.n	800299e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <osTimerCreate+0x20>
 800297c:	2101      	movs	r1, #1
 800297e:	e000      	b.n	8002982 <osTimerCreate+0x22>
 8002980:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800298a:	9201      	str	r2, [sp, #4]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	460a      	mov	r2, r1
 8002992:	2101      	movs	r1, #1
 8002994:	480b      	ldr	r0, [pc, #44]	@ (80029c4 <osTimerCreate+0x64>)
 8002996:	f001 fd96 	bl	80044c6 <xTimerCreateStatic>
 800299a:	4603      	mov	r3, r0
 800299c:	e00e      	b.n	80029bc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <osTimerCreate+0x48>
 80029a4:	2201      	movs	r2, #1
 80029a6:	e000      	b.n	80029aa <osTimerCreate+0x4a>
 80029a8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2101      	movs	r1, #1
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <osTimerCreate+0x64>)
 80029b6:	f001 fd65 	bl	8004484 <xTimerCreate>
 80029ba:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	08005538 	.word	0x08005538

080029c8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <osTimerStart+0x20>
    ticks = 1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80029e8:	f7ff ff40 	bl	800286c <inHandlerMode>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01a      	beq.n	8002a28 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2200      	movs	r2, #0
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	2109      	movs	r1, #9
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 fdde 	bl	80045c0 <xTimerGenericCommand>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002a0a:	23ff      	movs	r3, #255	@ 0xff
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e018      	b.n	8002a42 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d015      	beq.n	8002a42 <osTimerStart+0x7a>
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <osTimerStart+0x84>)
 8002a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	e00c      	b.n	8002a42 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	2104      	movs	r1, #4
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 fdc4 	bl	80045c0 <xTimerGenericCommand>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <osTimerStart+0x7a>
      result = osErrorOS;
 8002a3e:	23ff      	movs	r3, #255	@ 0xff
 8002a40:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002a42:	697b      	ldr	r3, [r7, #20]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f103 0208 	add.w	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f103 0208 	add.w	r2, r3, #8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d103      	bne.n	8002b12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e00c      	b.n	8002b2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3308      	adds	r3, #8
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e002      	b.n	8002b20 <vListInsert+0x2e>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d2f6      	bcs.n	8002b1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	601a      	str	r2, [r3, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6852      	ldr	r2, [r2, #4]
 8002b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d103      	bne.n	8002b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	1e5a      	subs	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002be4:	f002 f910 	bl	8004e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	68f9      	ldr	r1, [r7, #12]
 8002bf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c14:	3b01      	subs	r3, #1
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	441a      	add	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	22ff      	movs	r2, #255	@ 0xff
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	22ff      	movs	r2, #255	@ 0xff
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d114      	bne.n	8002c64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01a      	beq.n	8002c78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3310      	adds	r3, #16
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f906 	bl	8003e58 <xTaskRemoveFromEventList>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <xQueueGenericReset+0xd0>)
 8002c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	e009      	b.n	8002c78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3310      	adds	r3, #16
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fef1 	bl	8002a50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3324      	adds	r3, #36	@ 0x24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff feec 	bl	8002a50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c78:	f002 f8f8 	bl	8004e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	@ 0x38
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <xQueueGenericCreateStatic+0x56>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <xQueueGenericCreateStatic+0x5a>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <xQueueGenericCreateStatic+0x5c>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	623b      	str	r3, [r7, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <xQueueGenericCreateStatic+0x84>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <xQueueGenericCreateStatic+0x88>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <xQueueGenericCreateStatic+0x8a>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	61fb      	str	r3, [r7, #28]
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	e7fd      	b.n	8002d2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d32:	2348      	movs	r3, #72	@ 0x48
 8002d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b48      	cmp	r3, #72	@ 0x48
 8002d3a:	d00b      	beq.n	8002d54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	61bb      	str	r3, [r7, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f805 	bl	8002d86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3730      	adds	r7, #48	@ 0x30
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e002      	b.n	8002da8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002db4:	2101      	movs	r1, #1
 8002db6:	69b8      	ldr	r0, [r7, #24]
 8002db8:	f7ff fefe 	bl	8002bb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	@ 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <xQueueGenericSend+0x34>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <xQueueGenericSend+0x42>
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericSend+0x46>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericSend+0x48>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <xQueueGenericSend+0x64>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d103      	bne.n	8002e36 <xQueueGenericSend+0x72>
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <xQueueGenericSend+0x76>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <xQueueGenericSend+0x78>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <xQueueGenericSend+0x94>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	623b      	str	r3, [r7, #32]
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e58:	f001 f9be 	bl	80041d8 <xTaskGetSchedulerState>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <xQueueGenericSend+0xa4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <xQueueGenericSend+0xa8>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <xQueueGenericSend+0xaa>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <xQueueGenericSend+0xc6>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	61fb      	str	r3, [r7, #28]
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	e7fd      	b.n	8002e86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e8a:	f001 ffbd 	bl	8004e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <xQueueGenericSend+0xdc>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d129      	bne.n	8002ef4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea6:	f000 fa0f 	bl	80032c8 <prvCopyDataToQueue>
 8002eaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	3324      	adds	r3, #36	@ 0x24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ffcd 	bl	8003e58 <xTaskRemoveFromEventList>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc4 <xQueueGenericSend+0x200>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	e00a      	b.n	8002eec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002edc:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <xQueueGenericSend+0x200>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eec:	f001 ffbe 	bl	8004e6c <vPortExitCritical>
				return pdPASS;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e063      	b.n	8002fbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002efa:	f001 ffb7 	bl	8004e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e05c      	b.n	8002fbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 f807 	bl	8003f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f12:	2301      	movs	r3, #1
 8002f14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f16:	f001 ffa9 	bl	8004e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f1a:	f000 fd79 	bl	8003a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1e:	f001 ff73 	bl	8004e08 <vPortEnterCritical>
 8002f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d103      	bne.n	8002f38 <xQueueGenericSend+0x174>
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSend+0x18a>
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f4e:	f001 ff8d 	bl	8004e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f52:	1d3a      	adds	r2, r7, #4
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fff6 	bl	8003f4c <xTaskCheckForTimeOut>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d124      	bne.n	8002fb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f68:	f000 faa6 	bl	80034b8 <prvIsQueueFull>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	3310      	adds	r3, #16
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ff1a 	bl	8003db4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f82:	f000 fa31 	bl	80033e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f86:	f000 fd51 	bl	8003a2c <xTaskResumeAll>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f af7c 	bne.w	8002e8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f92:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <xQueueGenericSend+0x200>)
 8002f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	e772      	b.n	8002e8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fa6:	f000 fa1f 	bl	80033e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002faa:	f000 fd3f 	bl	8003a2c <xTaskResumeAll>
 8002fae:	e76c      	b.n	8002e8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fb2:	f000 fa19 	bl	80033e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb6:	f000 fd39 	bl	8003a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3738      	adds	r7, #56	@ 0x38
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b090      	sub	sp, #64	@ 0x40
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <xQueueGenericSendFromISR+0x3e>
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <xQueueGenericSendFromISR+0x42>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <xQueueGenericSendFromISR+0x44>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d103      	bne.n	8003036 <xQueueGenericSendFromISR+0x6e>
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <xQueueGenericSendFromISR+0x72>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <xQueueGenericSendFromISR+0x74>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	623b      	str	r3, [r7, #32]
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003058:	f001 ffb6 	bl	8004fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800305c:	f3ef 8211 	mrs	r2, BASEPRI
 8003060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	61fa      	str	r2, [r7, #28]
 8003072:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003074:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003076:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	429a      	cmp	r2, r3
 8003082:	d302      	bcc.n	800308a <xQueueGenericSendFromISR+0xc2>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d12f      	bne.n	80030ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800308a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003098:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030a0:	f000 f912 	bl	80032c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d112      	bne.n	80030d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b8:	3324      	adds	r3, #36	@ 0x24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fecc 	bl	8003e58 <xTaskRemoveFromEventList>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00e      	beq.n	80030e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e007      	b.n	80030e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030d8:	3301      	adds	r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	b25a      	sxtb	r2, r3
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80030e4:	2301      	movs	r3, #1
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80030e8:	e001      	b.n	80030ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3740      	adds	r7, #64	@ 0x40
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	@ 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <xQueueReceive+0x32>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	623b      	str	r3, [r7, #32]
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	e7fd      	b.n	8003132 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <xQueueReceive+0x40>
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <xQueueReceive+0x44>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <xQueueReceive+0x46>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <xQueueReceive+0x62>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	61fb      	str	r3, [r7, #28]
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	e7fd      	b.n	8003162 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003166:	f001 f837 	bl	80041d8 <xTaskGetSchedulerState>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <xQueueReceive+0x72>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xQueueReceive+0x76>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueReceive+0x78>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <xQueueReceive+0x94>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003198:	f001 fe36 	bl	8004e08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ac:	f000 f8f6 	bl	800339c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00f      	beq.n	80031e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	3310      	adds	r3, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fe47 	bl	8003e58 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031d0:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <xQueueReceive+0x1c0>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031e0:	f001 fe44 	bl	8004e6c <vPortExitCritical>
				return pdPASS;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e069      	b.n	80032bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ee:	f001 fe3d 	bl	8004e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e062      	b.n	80032bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe8d 	bl	8003f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800320a:	f001 fe2f 	bl	8004e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800320e:	f000 fbff 	bl	8003a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003212:	f001 fdf9 	bl	8004e08 <vPortEnterCritical>
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800321c:	b25b      	sxtb	r3, r3
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d103      	bne.n	800322c <xQueueReceive+0x128>
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <xQueueReceive+0x13e>
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003242:	f001 fe13 	bl	8004e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003246:	1d3a      	adds	r2, r7, #4
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fe7c 	bl	8003f4c <xTaskCheckForTimeOut>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d123      	bne.n	80032a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800325a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800325c:	f000 f916 	bl	800348c <prvIsQueueEmpty>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d017      	beq.n	8003296 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	3324      	adds	r3, #36	@ 0x24
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fda0 	bl	8003db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003276:	f000 f8b7 	bl	80033e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800327a:	f000 fbd7 	bl	8003a2c <xTaskResumeAll>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d189      	bne.n	8003198 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <xQueueReceive+0x1c0>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	e780      	b.n	8003198 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003298:	f000 f8a6 	bl	80033e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800329c:	f000 fbc6 	bl	8003a2c <xTaskResumeAll>
 80032a0:	e77a      	b.n	8003198 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032a4:	f000 f8a0 	bl	80033e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032a8:	f000 fbc0 	bl	8003a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ae:	f000 f8ed 	bl	800348c <prvIsQueueEmpty>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f43f af6f 	beq.w	8003198 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	@ 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d14d      	bne.n	800338a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ff8e 	bl	8004214 <xTaskPriorityDisinherit>
 80032f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e043      	b.n	800338a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d119      	bne.n	800333c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6858      	ldr	r0, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	461a      	mov	r2, r3
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	f002 f8b4 	bl	8005480 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d32b      	bcc.n	800338a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e026      	b.n	800338a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68d8      	ldr	r0, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	461a      	mov	r2, r3
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	f002 f89a 	bl	8005480 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	425b      	negs	r3, r3
 8003356:	441a      	add	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d207      	bcs.n	8003378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	425b      	negs	r3, r3
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d105      	bne.n	800338a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	3b01      	subs	r3, #1
 8003388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d018      	beq.n	80033e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d303      	bcc.n	80033d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68d9      	ldr	r1, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	461a      	mov	r2, r3
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f002 f850 	bl	8005480 <memcpy>
	}
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033f0:	f001 fd0a 	bl	8004e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033fc:	e011      	b.n	8003422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3324      	adds	r3, #36	@ 0x24
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fd24 	bl	8003e58 <xTaskRemoveFromEventList>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003416:	f000 fdfd 	bl	8004014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3b01      	subs	r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	dce9      	bgt.n	80033fe <prvUnlockQueue+0x16>
 800342a:	e000      	b.n	800342e <prvUnlockQueue+0x46>
					break;
 800342c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	22ff      	movs	r2, #255	@ 0xff
 8003432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003436:	f001 fd19 	bl	8004e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800343a:	f001 fce5 	bl	8004e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003446:	e011      	b.n	800346c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d012      	beq.n	8003476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fcff 	bl	8003e58 <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003460:	f000 fdd8 	bl	8004014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	3b01      	subs	r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800346c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003470:	2b00      	cmp	r3, #0
 8003472:	dce9      	bgt.n	8003448 <prvUnlockQueue+0x60>
 8003474:	e000      	b.n	8003478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	22ff      	movs	r2, #255	@ 0xff
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003480:	f001 fcf4 	bl	8004e6c <vPortExitCritical>
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003494:	f001 fcb8 	bl	8004e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034aa:	f001 fcdf 	bl	8004e6c <vPortExitCritical>

	return xReturn;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034c0:	f001 fca2 	bl	8004e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d102      	bne.n	80034d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e001      	b.n	80034da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034da:	f001 fcc7 	bl	8004e6c <vPortExitCritical>

	return xReturn;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e014      	b.n	8003522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003538 <vQueueAddToRegistry+0x50>)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003504:	490c      	ldr	r1, [pc, #48]	@ (8003538 <vQueueAddToRegistry+0x50>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <vQueueAddToRegistry+0x50>)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800351a:	e006      	b.n	800352a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b07      	cmp	r3, #7
 8003526:	d9e7      	bls.n	80034f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000778 	.word	0x20000778

0800353c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800354c:	f001 fc5c 	bl	8004e08 <vPortEnterCritical>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003556:	b25b      	sxtb	r3, r3
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d103      	bne.n	8003566 <vQueueWaitForMessageRestricted+0x2a>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356c:	b25b      	sxtb	r3, r3
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d103      	bne.n	800357c <vQueueWaitForMessageRestricted+0x40>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800357c:	f001 fc76 	bl	8004e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3324      	adds	r3, #36	@ 0x24
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fc35 	bl	8003e00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff26 	bl	80033e8 <prvUnlockQueue>
	}
 800359c:	bf00      	nop
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	@ 0x38
 80035a8:	af04      	add	r7, sp, #16
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	623b      	str	r3, [r7, #32]
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	61fb      	str	r3, [r7, #28]
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	e7fd      	b.n	80035ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035ee:	2354      	movs	r3, #84	@ 0x54
 80035f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b54      	cmp	r3, #84	@ 0x54
 80035f6:	d00b      	beq.n	8003610 <xTaskCreateStatic+0x6c>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61bb      	str	r3, [r7, #24]
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003610:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01e      	beq.n	8003656 <xTaskCreateStatic+0xb2>
 8003618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01b      	beq.n	8003656 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003630:	2300      	movs	r3, #0
 8003632:	9303      	str	r3, [sp, #12]
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f850 	bl	80036ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800364e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003650:	f000 f8d6 	bl	8003800 <prvAddNewTaskToReadyList>
 8003654:	e001      	b.n	800365a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800365a:	697b      	ldr	r3, [r7, #20]
	}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	@ 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08c      	sub	sp, #48	@ 0x30
 8003668:	af04      	add	r7, sp, #16
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fce7 	bl	800504c <pvPortMalloc>
 800367e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003686:	2054      	movs	r0, #84	@ 0x54
 8003688:	f001 fce0 	bl	800504c <pvPortMalloc>
 800368c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
 800369a:	e005      	b.n	80036a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800369c:	6978      	ldr	r0, [r7, #20]
 800369e:	f001 fda3 	bl	80051e8 <vPortFree>
 80036a2:	e001      	b.n	80036a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9303      	str	r3, [sp, #12]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f80e 	bl	80036ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d2:	69f8      	ldr	r0, [r7, #28]
 80036d4:	f000 f894 	bl	8003800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036d8:	2301      	movs	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	e002      	b.n	80036e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036e4:	69bb      	ldr	r3, [r7, #24]
	}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b088      	sub	sp, #32
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003706:	3b01      	subs	r3, #1
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f023 0307 	bic.w	r3, r3, #7
 8003714:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	617b      	str	r3, [r7, #20]
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01f      	beq.n	800377e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e012      	b.n	800376a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	7819      	ldrb	r1, [r3, #0]
 800374c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	3334      	adds	r3, #52	@ 0x34
 8003754:	460a      	mov	r2, r1
 8003756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d006      	beq.n	8003772 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d9e9      	bls.n	8003744 <prvInitialiseNewTask+0x56>
 8003770:	e000      	b.n	8003774 <prvInitialiseNewTask+0x86>
			{
				break;
 8003772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800377c:	e003      	b.n	8003786 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	2b06      	cmp	r3, #6
 800378a:	d901      	bls.n	8003790 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800378c:	2306      	movs	r3, #6
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003794:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800379a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	2200      	movs	r2, #0
 80037a0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f972 	bl	8002a90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	3318      	adds	r3, #24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f96d 	bl	8002a90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	f1c3 0207 	rsb	r2, r3, #7
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	2200      	movs	r2, #0
 80037d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	69b8      	ldr	r0, [r7, #24]
 80037e0:	f001 f9e2 	bl	8004ba8 <pxPortInitialiseStack>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003808:	f001 fafe 	bl	8004e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800380c:	4b2a      	ldr	r3, [pc, #168]	@ (80038b8 <prvAddNewTaskToReadyList+0xb8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	4a29      	ldr	r2, [pc, #164]	@ (80038b8 <prvAddNewTaskToReadyList+0xb8>)
 8003814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003816:	4b29      	ldr	r3, [pc, #164]	@ (80038bc <prvAddNewTaskToReadyList+0xbc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800381e:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <prvAddNewTaskToReadyList+0xbc>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003824:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <prvAddNewTaskToReadyList+0xb8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d110      	bne.n	800384e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800382c:	f000 fc16 	bl	800405c <prvInitialiseTaskLists>
 8003830:	e00d      	b.n	800384e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003832:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <prvAddNewTaskToReadyList+0xc0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <prvAddNewTaskToReadyList+0xbc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	429a      	cmp	r2, r3
 8003846:	d802      	bhi.n	800384e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003848:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <prvAddNewTaskToReadyList+0xbc>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800384e:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a1b      	ldr	r2, [pc, #108]	@ (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 8003856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	4a18      	ldr	r2, [pc, #96]	@ (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <prvAddNewTaskToReadyList+0xcc>)
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff f912 	bl	8002aaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003886:	f001 faf1 	bl	8004e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800388a:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <prvAddNewTaskToReadyList+0xc0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <prvAddNewTaskToReadyList+0xbc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 80038a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200008b8 	.word	0x200008b8
 80038bc:	200007b8 	.word	0x200007b8
 80038c0:	200008c4 	.word	0x200008c4
 80038c4:	200008d4 	.word	0x200008d4
 80038c8:	200008c0 	.word	0x200008c0
 80038cc:	200007bc 	.word	0x200007bc
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038e6:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <vTaskDelay+0x64>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <vTaskDelay+0x32>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	60bb      	str	r3, [r7, #8]
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003906:	f000 f883 	bl	8003a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800390a:	2100      	movs	r1, #0
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fd09 	bl	8004324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003912:	f000 f88b 	bl	8003a2c <xTaskResumeAll>
 8003916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800391e:	4b07      	ldr	r3, [pc, #28]	@ (800393c <vTaskDelay+0x68>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200008e0 	.word	0x200008e0
 800393c:	e000ed04 	.word	0xe000ed04

08003940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800394e:	463a      	mov	r2, r7
 8003950:	1d39      	adds	r1, r7, #4
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fdb2 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800395c:	6839      	ldr	r1, [r7, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	9202      	str	r2, [sp, #8]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	460a      	mov	r2, r1
 800396e:	4922      	ldr	r1, [pc, #136]	@ (80039f8 <vTaskStartScheduler+0xb8>)
 8003970:	4822      	ldr	r0, [pc, #136]	@ (80039fc <vTaskStartScheduler+0xbc>)
 8003972:	f7ff fe17 	bl	80035a4 <xTaskCreateStatic>
 8003976:	4603      	mov	r3, r0
 8003978:	4a21      	ldr	r2, [pc, #132]	@ (8003a00 <vTaskStartScheduler+0xc0>)
 800397a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800397c:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <vTaskStartScheduler+0xc0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003984:	2301      	movs	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e001      	b.n	800398e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003994:	f000 fd2c 	bl	80043f0 <xTimerCreateTimerTask>
 8003998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d116      	bne.n	80039ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	613b      	str	r3, [r7, #16]
}
 80039b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039b4:	4b13      	ldr	r3, [pc, #76]	@ (8003a04 <vTaskStartScheduler+0xc4>)
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039bc:	4b12      	ldr	r3, [pc, #72]	@ (8003a08 <vTaskStartScheduler+0xc8>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <vTaskStartScheduler+0xcc>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039c8:	f001 f97a 	bl	8004cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039cc:	e00f      	b.n	80039ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d10b      	bne.n	80039ee <vTaskStartScheduler+0xae>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	60fb      	str	r3, [r7, #12]
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <vTaskStartScheduler+0xaa>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	0800553c 	.word	0x0800553c
 80039fc:	0800402d 	.word	0x0800402d
 8003a00:	200008dc 	.word	0x200008dc
 8003a04:	200008d8 	.word	0x200008d8
 8003a08:	200008c4 	.word	0x200008c4
 8003a0c:	200008bc 	.word	0x200008bc

08003a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <vTaskSuspendAll+0x18>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	4a03      	ldr	r2, [pc, #12]	@ (8003a28 <vTaskSuspendAll+0x18>)
 8003a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	200008e0 	.word	0x200008e0

08003a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a3a:	4b42      	ldr	r3, [pc, #264]	@ (8003b44 <xTaskResumeAll+0x118>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <xTaskResumeAll+0x2e>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	603b      	str	r3, [r7, #0]
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	e7fd      	b.n	8003a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a5a:	f001 f9d5 	bl	8004e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a5e:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <xTaskResumeAll+0x118>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	4a37      	ldr	r2, [pc, #220]	@ (8003b44 <xTaskResumeAll+0x118>)
 8003a66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a68:	4b36      	ldr	r3, [pc, #216]	@ (8003b44 <xTaskResumeAll+0x118>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d161      	bne.n	8003b34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a70:	4b35      	ldr	r3, [pc, #212]	@ (8003b48 <xTaskResumeAll+0x11c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05d      	beq.n	8003b34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a78:	e02e      	b.n	8003ad8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7a:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <xTaskResumeAll+0x120>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3318      	adds	r3, #24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff f86c 	bl	8002b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff f867 	bl	8002b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b50 <xTaskResumeAll+0x124>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b50 <xTaskResumeAll+0x124>)
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <xTaskResumeAll+0x128>)
 8003ab6:	441a      	add	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f7fe fff3 	bl	8002aaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac8:	4b23      	ldr	r3, [pc, #140]	@ (8003b58 <xTaskResumeAll+0x12c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ad2:	4b22      	ldr	r3, [pc, #136]	@ (8003b5c <xTaskResumeAll+0x130>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <xTaskResumeAll+0x120>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1cc      	bne.n	8003a7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ae6:	f000 fb57 	bl	8004198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003aea:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <xTaskResumeAll+0x134>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003af6:	f000 f847 	bl	8003b88 <xTaskIncrementTick>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b00:	4b16      	ldr	r3, [pc, #88]	@ (8003b5c <xTaskResumeAll+0x130>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f1      	bne.n	8003af6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <xTaskResumeAll+0x134>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b18:	4b10      	ldr	r3, [pc, #64]	@ (8003b5c <xTaskResumeAll+0x130>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <xTaskResumeAll+0x138>)
 8003b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b34:	f001 f99a 	bl	8004e6c <vPortExitCritical>

	return xAlreadyYielded;
 8003b38:	68bb      	ldr	r3, [r7, #8]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200008e0 	.word	0x200008e0
 8003b48:	200008b8 	.word	0x200008b8
 8003b4c:	20000878 	.word	0x20000878
 8003b50:	200008c0 	.word	0x200008c0
 8003b54:	200007bc 	.word	0x200007bc
 8003b58:	200007b8 	.word	0x200007b8
 8003b5c:	200008cc 	.word	0x200008cc
 8003b60:	200008c8 	.word	0x200008c8
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <xTaskGetTickCount+0x1c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b74:	687b      	ldr	r3, [r7, #4]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200008bc 	.word	0x200008bc

08003b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b92:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd0 <xTaskIncrementTick+0x148>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 808f 	bne.w	8003cba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd4 <xTaskIncrementTick+0x14c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8003cd4 <xTaskIncrementTick+0x14c>)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d121      	bne.n	8003bf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bb0:	4b49      	ldr	r3, [pc, #292]	@ (8003cd8 <xTaskIncrementTick+0x150>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	603b      	str	r3, [r7, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	e7fd      	b.n	8003bce <xTaskIncrementTick+0x46>
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <xTaskIncrementTick+0x150>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	4b40      	ldr	r3, [pc, #256]	@ (8003cdc <xTaskIncrementTick+0x154>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8003cd8 <xTaskIncrementTick+0x150>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4a3e      	ldr	r2, [pc, #248]	@ (8003cdc <xTaskIncrementTick+0x154>)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce0 <xTaskIncrementTick+0x158>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce0 <xTaskIncrementTick+0x158>)
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	f000 fad2 	bl	8004198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <xTaskIncrementTick+0x15c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d348      	bcc.n	8003c90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bfe:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <xTaskIncrementTick+0x150>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c08:	4b36      	ldr	r3, [pc, #216]	@ (8003ce4 <xTaskIncrementTick+0x15c>)
 8003c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0e:	601a      	str	r2, [r3, #0]
					break;
 8003c10:	e03e      	b.n	8003c90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c12:	4b31      	ldr	r3, [pc, #196]	@ (8003cd8 <xTaskIncrementTick+0x150>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d203      	bcs.n	8003c32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce4 <xTaskIncrementTick+0x15c>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c30:	e02e      	b.n	8003c90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe ff94 	bl	8002b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3318      	adds	r3, #24
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe ff8b 	bl	8002b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	2201      	movs	r2, #1
 8003c54:	409a      	lsls	r2, r3
 8003c56:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <xTaskIncrementTick+0x160>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ce8 <xTaskIncrementTick+0x160>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cec <xTaskIncrementTick+0x164>)
 8003c6e:	441a      	add	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe ff17 	bl	8002aaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <xTaskIncrementTick+0x168>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3b9      	bcc.n	8003bfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8e:	e7b6      	b.n	8003bfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c90:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <xTaskIncrementTick+0x168>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c96:	4915      	ldr	r1, [pc, #84]	@ (8003cec <xTaskIncrementTick+0x164>)
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d901      	bls.n	8003cac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cac:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <xTaskIncrementTick+0x16c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e004      	b.n	8003cc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <xTaskIncrementTick+0x170>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <xTaskIncrementTick+0x170>)
 8003cc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cc4:	697b      	ldr	r3, [r7, #20]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200008e0 	.word	0x200008e0
 8003cd4:	200008bc 	.word	0x200008bc
 8003cd8:	20000870 	.word	0x20000870
 8003cdc:	20000874 	.word	0x20000874
 8003ce0:	200008d0 	.word	0x200008d0
 8003ce4:	200008d8 	.word	0x200008d8
 8003ce8:	200008c0 	.word	0x200008c0
 8003cec:	200007bc 	.word	0x200007bc
 8003cf0:	200007b8 	.word	0x200007b8
 8003cf4:	200008cc 	.word	0x200008cc
 8003cf8:	200008c8 	.word	0x200008c8

08003cfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d02:	4b27      	ldr	r3, [pc, #156]	@ (8003da0 <vTaskSwitchContext+0xa4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d0a:	4b26      	ldr	r3, [pc, #152]	@ (8003da4 <vTaskSwitchContext+0xa8>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d10:	e040      	b.n	8003d94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003d12:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <vTaskSwitchContext+0xa8>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d18:	4b23      	ldr	r3, [pc, #140]	@ (8003da8 <vTaskSwitchContext+0xac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	f1c3 031f 	rsb	r3, r3, #31
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	491f      	ldr	r1, [pc, #124]	@ (8003dac <vTaskSwitchContext+0xb0>)
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	607b      	str	r3, [r7, #4]
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	e7fd      	b.n	8003d56 <vTaskSwitchContext+0x5a>
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4a11      	ldr	r2, [pc, #68]	@ (8003dac <vTaskSwitchContext+0xb0>)
 8003d66:	4413      	add	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d104      	bne.n	8003d8a <vTaskSwitchContext+0x8e>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a07      	ldr	r2, [pc, #28]	@ (8003db0 <vTaskSwitchContext+0xb4>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200008e0 	.word	0x200008e0
 8003da4:	200008cc 	.word	0x200008cc
 8003da8:	200008c0 	.word	0x200008c0
 8003dac:	200007bc 	.word	0x200007bc
 8003db0:	200007b8 	.word	0x200007b8

08003db4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60fb      	str	r3, [r7, #12]
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	e7fd      	b.n	8003dd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ddc:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <vTaskPlaceOnEventList+0x48>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3318      	adds	r3, #24
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fe fe84 	bl	8002af2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dea:	2101      	movs	r1, #1
 8003dec:	6838      	ldr	r0, [r7, #0]
 8003dee:	f000 fa99 	bl	8004324 <prvAddCurrentTaskToDelayedList>
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200007b8 	.word	0x200007b8

08003e00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	617b      	str	r3, [r7, #20]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3318      	adds	r3, #24
 8003e30:	4619      	mov	r1, r3
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7fe fe39 	bl	8002aaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	f000 fa6c 	bl	8004324 <prvAddCurrentTaskToDelayedList>
	}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200007b8 	.word	0x200007b8

08003e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	60fb      	str	r3, [r7, #12]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3318      	adds	r3, #24
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fe6a 	bl	8002b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <xTaskRemoveFromEventList+0xb0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11c      	bne.n	8003ed2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fe61 	bl	8002b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <xTaskRemoveFromEventList+0xb4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	4a16      	ldr	r2, [pc, #88]	@ (8003f0c <xTaskRemoveFromEventList+0xb4>)
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4a13      	ldr	r2, [pc, #76]	@ (8003f10 <xTaskRemoveFromEventList+0xb8>)
 8003ec2:	441a      	add	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7fe fded 	bl	8002aaa <vListInsertEnd>
 8003ed0:	e005      	b.n	8003ede <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	480e      	ldr	r0, [pc, #56]	@ (8003f14 <xTaskRemoveFromEventList+0xbc>)
 8003eda:	f7fe fde6 	bl	8002aaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <xTaskRemoveFromEventList+0xc0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d905      	bls.n	8003ef8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <xTaskRemoveFromEventList+0xc4>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e001      	b.n	8003efc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003efc:	697b      	ldr	r3, [r7, #20]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200008e0 	.word	0x200008e0
 8003f0c:	200008c0 	.word	0x200008c0
 8003f10:	200007bc 	.word	0x200007bc
 8003f14:	20000878 	.word	0x20000878
 8003f18:	200007b8 	.word	0x200007b8
 8003f1c:	200008cc 	.word	0x200008cc

08003f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f28:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <vTaskInternalSetTimeOutState+0x24>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <vTaskInternalSetTimeOutState+0x28>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	605a      	str	r2, [r3, #4]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	200008d0 	.word	0x200008d0
 8003f48:	200008bc 	.word	0x200008bc

08003f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	613b      	str	r3, [r7, #16]
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	e7fd      	b.n	8003f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60fb      	str	r3, [r7, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f92:	f000 ff39 	bl	8004e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f96:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <xTaskCheckForTimeOut+0xc0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d102      	bne.n	8003fb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e023      	b.n	8003ffe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <xTaskCheckForTimeOut+0xc4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d007      	beq.n	8003fd2 <xTaskCheckForTimeOut+0x86>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e015      	b.n	8003ffe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d20b      	bcs.n	8003ff4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad2      	subs	r2, r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff99 	bl	8003f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e004      	b.n	8003ffe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f000 ff35 	bl	8004e6c <vPortExitCritical>

	return xReturn;
 8004002:	69fb      	ldr	r3, [r7, #28]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	200008bc 	.word	0x200008bc
 8004010:	200008d0 	.word	0x200008d0

08004014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <vTaskMissedYield+0x14>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	200008cc 	.word	0x200008cc

0800402c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004034:	f000 f852 	bl	80040dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004038:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <prvIdleTask+0x28>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d9f9      	bls.n	8004034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <prvIdleTask+0x2c>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004050:	e7f0      	b.n	8004034 <prvIdleTask+0x8>
 8004052:	bf00      	nop
 8004054:	200007bc 	.word	0x200007bc
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	e00c      	b.n	8004082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <prvInitialiseTaskLists+0x60>)
 8004074:	4413      	add	r3, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fcea 	bl	8002a50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d9ef      	bls.n	8004068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004088:	480d      	ldr	r0, [pc, #52]	@ (80040c0 <prvInitialiseTaskLists+0x64>)
 800408a:	f7fe fce1 	bl	8002a50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800408e:	480d      	ldr	r0, [pc, #52]	@ (80040c4 <prvInitialiseTaskLists+0x68>)
 8004090:	f7fe fcde 	bl	8002a50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004094:	480c      	ldr	r0, [pc, #48]	@ (80040c8 <prvInitialiseTaskLists+0x6c>)
 8004096:	f7fe fcdb 	bl	8002a50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800409a:	480c      	ldr	r0, [pc, #48]	@ (80040cc <prvInitialiseTaskLists+0x70>)
 800409c:	f7fe fcd8 	bl	8002a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040a0:	480b      	ldr	r0, [pc, #44]	@ (80040d0 <prvInitialiseTaskLists+0x74>)
 80040a2:	f7fe fcd5 	bl	8002a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <prvInitialiseTaskLists+0x78>)
 80040a8:	4a05      	ldr	r2, [pc, #20]	@ (80040c0 <prvInitialiseTaskLists+0x64>)
 80040aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <prvInitialiseTaskLists+0x7c>)
 80040ae:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <prvInitialiseTaskLists+0x68>)
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200007bc 	.word	0x200007bc
 80040c0:	20000848 	.word	0x20000848
 80040c4:	2000085c 	.word	0x2000085c
 80040c8:	20000878 	.word	0x20000878
 80040cc:	2000088c 	.word	0x2000088c
 80040d0:	200008a4 	.word	0x200008a4
 80040d4:	20000870 	.word	0x20000870
 80040d8:	20000874 	.word	0x20000874

080040dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e2:	e019      	b.n	8004118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040e4:	f000 fe90 	bl	8004e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e8:	4b10      	ldr	r3, [pc, #64]	@ (800412c <prvCheckTasksWaitingTermination+0x50>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fd35 	bl	8002b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <prvCheckTasksWaitingTermination+0x54>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3b01      	subs	r3, #1
 8004100:	4a0b      	ldr	r2, [pc, #44]	@ (8004130 <prvCheckTasksWaitingTermination+0x54>)
 8004102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <prvCheckTasksWaitingTermination+0x58>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a0a      	ldr	r2, [pc, #40]	@ (8004134 <prvCheckTasksWaitingTermination+0x58>)
 800410c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800410e:	f000 fead 	bl	8004e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f810 	bl	8004138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <prvCheckTasksWaitingTermination+0x58>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e1      	bne.n	80040e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000088c 	.word	0x2000088c
 8004130:	200008b8 	.word	0x200008b8
 8004134:	200008a0 	.word	0x200008a0

08004138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f84a 	bl	80051e8 <vPortFree>
				vPortFree( pxTCB );
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 f847 	bl	80051e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800415a:	e019      	b.n	8004190 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004162:	2b01      	cmp	r3, #1
 8004164:	d103      	bne.n	800416e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f001 f83e 	bl	80051e8 <vPortFree>
	}
 800416c:	e010      	b.n	8004190 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004174:	2b02      	cmp	r3, #2
 8004176:	d00b      	beq.n	8004190 <prvDeleteTCB+0x58>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <prvDeleteTCB+0x54>
	}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419e:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <prvResetNextTaskUnblockTime+0x38>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <prvResetNextTaskUnblockTime+0x3c>)
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041b0:	e008      	b.n	80041c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b2:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <prvResetNextTaskUnblockTime+0x38>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a04      	ldr	r2, [pc, #16]	@ (80041d4 <prvResetNextTaskUnblockTime+0x3c>)
 80041c2:	6013      	str	r3, [r2, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000870 	.word	0x20000870
 80041d4:	200008d8 	.word	0x200008d8

080041d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041de:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <xTaskGetSchedulerState+0x34>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041e6:	2301      	movs	r3, #1
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	e008      	b.n	80041fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ec:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <xTaskGetSchedulerState+0x38>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041f4:	2302      	movs	r3, #2
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	e001      	b.n	80041fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041fe:	687b      	ldr	r3, [r7, #4]
	}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	200008c4 	.word	0x200008c4
 8004210:	200008e0 	.word	0x200008e0

08004214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d070      	beq.n	800430c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800422a:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <xTaskPriorityDisinherit+0x104>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	d00b      	beq.n	800424c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60bb      	str	r3, [r7, #8]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	429a      	cmp	r2, r3
 8004280:	d044      	beq.n	800430c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004286:	2b00      	cmp	r3, #0
 8004288:	d140      	bne.n	800430c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fc68 	bl	8002b64 <uxListRemove>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d115      	bne.n	80042c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429e:	491f      	ldr	r1, [pc, #124]	@ (800431c <xTaskPriorityDisinherit+0x108>)
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xTaskPriorityDisinherit+0xb2>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	2201      	movs	r2, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <xTaskPriorityDisinherit+0x10c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4013      	ands	r3, r2
 80042c2:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <xTaskPriorityDisinherit+0x10c>)
 80042c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f1c3 0207 	rsb	r2, r3, #7
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004320 <xTaskPriorityDisinherit+0x10c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004320 <xTaskPriorityDisinherit+0x10c>)
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4a08      	ldr	r2, [pc, #32]	@ (800431c <xTaskPriorityDisinherit+0x108>)
 80042fa:	441a      	add	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7fe fbd1 	bl	8002aaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800430c:	697b      	ldr	r3, [r7, #20]
	}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200007b8 	.word	0x200007b8
 800431c:	200007bc 	.word	0x200007bc
 8004320:	200008c0 	.word	0x200008c0

08004324 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800432e:	4b29      	ldr	r3, [pc, #164]	@ (80043d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004334:	4b28      	ldr	r3, [pc, #160]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fc12 	bl	8002b64 <uxListRemove>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004346:	4b24      	ldr	r3, [pc, #144]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	2201      	movs	r2, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	4b21      	ldr	r3, [pc, #132]	@ (80043dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4013      	ands	r3, r2
 800435a:	4a20      	ldr	r2, [pc, #128]	@ (80043dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800435c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d10a      	bne.n	800437c <prvAddCurrentTaskToDelayedList+0x58>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800436c:	4b1a      	ldr	r3, [pc, #104]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	481a      	ldr	r0, [pc, #104]	@ (80043e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004376:	f7fe fb98 	bl	8002aaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800437a:	e026      	b.n	80043ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004384:	4b14      	ldr	r3, [pc, #80]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d209      	bcs.n	80043a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b0f      	ldr	r3, [pc, #60]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fe fba6 	bl	8002af2 <vListInsert>
}
 80043a6:	e010      	b.n	80043ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a8:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0a      	ldr	r3, [pc, #40]	@ (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe fb9c 	bl	8002af2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043ba:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d202      	bcs.n	80043ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043c4:	4a09      	ldr	r2, [pc, #36]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6013      	str	r3, [r2, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200008bc 	.word	0x200008bc
 80043d8:	200007b8 	.word	0x200007b8
 80043dc:	200008c0 	.word	0x200008c0
 80043e0:	200008a4 	.word	0x200008a4
 80043e4:	20000874 	.word	0x20000874
 80043e8:	20000870 	.word	0x20000870
 80043ec:	200008d8 	.word	0x200008d8

080043f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	@ 0x28
 80043f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043fa:	f000 fb95 	bl	8004b28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <xTimerCreateTimerTask+0x84>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d021      	beq.n	800444a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800440e:	1d3a      	adds	r2, r7, #4
 8004410:	f107 0108 	add.w	r1, r7, #8
 8004414:	f107 030c 	add.w	r3, r7, #12
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc f86b 	bl	80004f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	9202      	str	r2, [sp, #8]
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	2306      	movs	r3, #6
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2300      	movs	r3, #0
 800442e:	460a      	mov	r2, r1
 8004430:	4911      	ldr	r1, [pc, #68]	@ (8004478 <xTimerCreateTimerTask+0x88>)
 8004432:	4812      	ldr	r0, [pc, #72]	@ (800447c <xTimerCreateTimerTask+0x8c>)
 8004434:	f7ff f8b6 	bl	80035a4 <xTaskCreateStatic>
 8004438:	4603      	mov	r3, r0
 800443a:	4a11      	ldr	r2, [pc, #68]	@ (8004480 <xTimerCreateTimerTask+0x90>)
 800443c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800443e:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <xTimerCreateTimerTask+0x90>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	613b      	str	r3, [r7, #16]
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004468:	697b      	ldr	r3, [r7, #20]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000914 	.word	0x20000914
 8004478:	08005544 	.word	0x08005544
 800447c:	080046f9 	.word	0x080046f9
 8004480:	20000918 	.word	0x20000918

08004484 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004492:	2028      	movs	r0, #40	@ 0x28
 8004494:	f000 fdda 	bl	800504c <pvPortMalloc>
 8004498:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f845 	bl	8004546 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80044bc:	697b      	ldr	r3, [r7, #20]
	}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b08a      	sub	sp, #40	@ 0x28
 80044ca:	af02      	add	r7, sp, #8
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80044d4:	2328      	movs	r3, #40	@ 0x28
 80044d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b28      	cmp	r3, #40	@ 0x28
 80044dc:	d00b      	beq.n	80044f6 <xTimerCreateStatic+0x30>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	61bb      	str	r3, [r7, #24]
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	e7fd      	b.n	80044f2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xTimerCreateStatic+0x50>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	617b      	str	r3, [r7, #20]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004518:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00d      	beq.n	800453c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f805 	bl	8004546 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800453c:	69fb      	ldr	r3, [r7, #28]
	}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	617b      	str	r3, [r7, #20]
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01e      	beq.n	80045b6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004578:	f000 fad6 	bl	8004b28 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fa79 	bl	8002a90 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	@ 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <xTimerGenericCommand+0x98>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02a      	beq.n	800464e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	dc18      	bgt.n	800463c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800460a:	f7ff fde5 	bl	80041d8 <xTaskGetSchedulerState>
 800460e:	4603      	mov	r3, r0
 8004610:	2b02      	cmp	r3, #2
 8004612:	d109      	bne.n	8004628 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004614:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <xTimerGenericCommand+0x98>)
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	f107 0114 	add.w	r1, r7, #20
 800461c:	2300      	movs	r3, #0
 800461e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004620:	f7fe fbd0 	bl	8002dc4 <xQueueGenericSend>
 8004624:	6278      	str	r0, [r7, #36]	@ 0x24
 8004626:	e012      	b.n	800464e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <xTimerGenericCommand+0x98>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	f107 0114 	add.w	r1, r7, #20
 8004630:	2300      	movs	r3, #0
 8004632:	2200      	movs	r2, #0
 8004634:	f7fe fbc6 	bl	8002dc4 <xQueueGenericSend>
 8004638:	6278      	str	r0, [r7, #36]	@ 0x24
 800463a:	e008      	b.n	800464e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800463c:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <xTimerGenericCommand+0x98>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f107 0114 	add.w	r1, r7, #20
 8004644:	2300      	movs	r3, #0
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	f7fe fcbe 	bl	8002fc8 <xQueueGenericSendFromISR>
 800464c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	@ 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000914 	.word	0x20000914

0800465c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004666:	4b23      	ldr	r3, [pc, #140]	@ (80046f4 <prvProcessExpiredTimer+0x98>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fa75 	bl	8002b64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d023      	beq.n	80046d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	18d1      	adds	r1, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6978      	ldr	r0, [r7, #20]
 8004696:	f000 f8d5 	bl	8004844 <prvInsertTimerInActiveList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff88 	bl	80045c0 <xTimerGenericCommand>
 80046b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d114      	bne.n	80046e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	4798      	blx	r3
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000090c 	.word	0x2000090c

080046f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f859 	bl	80047bc <prvGetNextExpireTime>
 800470a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4619      	mov	r1, r3
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f805 	bl	8004720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004716:	f000 f8d7 	bl	80048c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800471a:	bf00      	nop
 800471c:	e7f0      	b.n	8004700 <prvTimerTask+0x8>
	...

08004720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800472a:	f7ff f971 	bl	8003a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f866 	bl	8004804 <prvSampleTimeNow>
 8004738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d130      	bne.n	80047a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <prvProcessTimerOrBlockTask+0x3c>
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	429a      	cmp	r2, r3
 800474c:	d806      	bhi.n	800475c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800474e:	f7ff f96d 	bl	8003a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ff81 	bl	800465c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800475a:	e024      	b.n	80047a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <prvProcessTimerOrBlockTask+0x90>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <prvProcessTimerOrBlockTask+0x50>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <prvProcessTimerOrBlockTask+0x52>
 8004770:	2300      	movs	r3, #0
 8004772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <prvProcessTimerOrBlockTask+0x94>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	f7fe fedb 	bl	800353c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004786:	f7ff f951 	bl	8003a2c <xTaskResumeAll>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004790:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <prvProcessTimerOrBlockTask+0x98>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
}
 80047a0:	e001      	b.n	80047a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047a2:	f7ff f943 	bl	8003a2c <xTaskResumeAll>
}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000910 	.word	0x20000910
 80047b4:	20000914 	.word	0x20000914
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <prvGetNextExpireTime+0x44>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <prvGetNextExpireTime+0x16>
 80047ce:	2201      	movs	r2, #1
 80047d0:	e000      	b.n	80047d4 <prvGetNextExpireTime+0x18>
 80047d2:	2200      	movs	r2, #0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e0:	4b07      	ldr	r3, [pc, #28]	@ (8004800 <prvGetNextExpireTime+0x44>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e001      	b.n	80047f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000090c 	.word	0x2000090c

08004804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800480c:	f7ff f9ac 	bl	8003b68 <xTaskGetTickCount>
 8004810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <prvSampleTimeNow+0x3c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	429a      	cmp	r2, r3
 800481a:	d205      	bcs.n	8004828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800481c:	f000 f91e 	bl	8004a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e002      	b.n	800482e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800482e:	4a04      	ldr	r2, [pc, #16]	@ (8004840 <prvSampleTimeNow+0x3c>)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004834:	68fb      	ldr	r3, [r7, #12]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000091c 	.word	0x2000091c

08004844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d812      	bhi.n	8004890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e01b      	b.n	80048b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800487e:	4b10      	ldr	r3, [pc, #64]	@ (80048c0 <prvInsertTimerInActiveList+0x7c>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7fe f932 	bl	8002af2 <vListInsert>
 800488e:	e012      	b.n	80048b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d206      	bcs.n	80048a6 <prvInsertTimerInActiveList+0x62>
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e007      	b.n	80048b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048a6:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <prvInsertTimerInActiveList+0x80>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7fe f91e 	bl	8002af2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048b6:	697b      	ldr	r3, [r7, #20]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000910 	.word	0x20000910
 80048c4:	2000090c 	.word	0x2000090c

080048c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	@ 0x30
 80048cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ce:	e0b2      	b.n	8004a36 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f2c0 80af 	blt.w	8004a36 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe f93b 	bl	8002b64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff ff87 	bl	8004804 <prvSampleTimeNow>
 80048f6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	f200 8098 	bhi.w	8004a30 <prvProcessReceivedCommands+0x168>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <prvProcessReceivedCommands+0x40>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004931 	.word	0x08004931
 800490c:	08004931 	.word	0x08004931
 8004910:	08004931 	.word	0x08004931
 8004914:	080049a7 	.word	0x080049a7
 8004918:	080049bb 	.word	0x080049bb
 800491c:	08004a07 	.word	0x08004a07
 8004920:	08004931 	.word	0x08004931
 8004924:	08004931 	.word	0x08004931
 8004928:	080049a7 	.word	0x080049a7
 800492c:	080049bb 	.word	0x080049bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	18d1      	adds	r1, r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004950:	f7ff ff78 	bl	8004844 <prvInsertTimerInActiveList>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d06c      	beq.n	8004a34 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d061      	beq.n	8004a34 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	441a      	add	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2300      	movs	r3, #0
 800497e:	2100      	movs	r1, #0
 8004980:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004982:	f7ff fe1d 	bl	80045c0 <xTimerGenericCommand>
 8004986:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d152      	bne.n	8004a34 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	61bb      	str	r3, [r7, #24]
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80049b8:	e03d      	b.n	8004a36 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	617b      	str	r3, [r7, #20]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	18d1      	adds	r1, r2, r3
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a00:	f7ff ff20 	bl	8004844 <prvInsertTimerInActiveList>
					break;
 8004a04:	e017      	b.n	8004a36 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004a14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a16:	f000 fbe7 	bl	80051e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a1a:	e00c      	b.n	8004a36 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004a2e:	e002      	b.n	8004a36 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <prvProcessReceivedCommands+0x16e>
					break;
 8004a34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a36:	4b08      	ldr	r3, [pc, #32]	@ (8004a58 <prvProcessReceivedCommands+0x190>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f107 0108 	add.w	r1, r7, #8
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fb5f 	bl	8003104 <xQueueReceive>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f af41 	bne.w	80048d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	3728      	adds	r7, #40	@ 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000914 	.word	0x20000914

08004a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a62:	e049      	b.n	8004af8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a64:	4b2e      	ldr	r3, [pc, #184]	@ (8004b20 <prvSwitchTimerLists+0xc4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b20 <prvSwitchTimerLists+0xc4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe f871 	bl	8002b64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02f      	beq.n	8004af8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d90e      	bls.n	8004ac8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b20 <prvSwitchTimerLists+0xc4>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fe f816 	bl	8002af2 <vListInsert>
 8004ac6:	e017      	b.n	8004af8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fd74 	bl	80045c0 <xTimerGenericCommand>
 8004ad8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	603b      	str	r3, [r7, #0]
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004af8:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <prvSwitchTimerLists+0xc4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1b0      	bne.n	8004a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <prvSwitchTimerLists+0xc4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b08:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <prvSwitchTimerLists+0xc8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a04      	ldr	r2, [pc, #16]	@ (8004b20 <prvSwitchTimerLists+0xc4>)
 8004b0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b10:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <prvSwitchTimerLists+0xc8>)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	2000090c 	.word	0x2000090c
 8004b24:	20000910 	.word	0x20000910

08004b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b2e:	f000 f96b 	bl	8004e08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b32:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <prvCheckForValidListAndQueue+0x60>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d120      	bne.n	8004b7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b3a:	4814      	ldr	r0, [pc, #80]	@ (8004b8c <prvCheckForValidListAndQueue+0x64>)
 8004b3c:	f7fd ff88 	bl	8002a50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b40:	4813      	ldr	r0, [pc, #76]	@ (8004b90 <prvCheckForValidListAndQueue+0x68>)
 8004b42:	f7fd ff85 	bl	8002a50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <prvCheckForValidListAndQueue+0x6c>)
 8004b48:	4a10      	ldr	r2, [pc, #64]	@ (8004b8c <prvCheckForValidListAndQueue+0x64>)
 8004b4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <prvCheckForValidListAndQueue+0x70>)
 8004b4e:	4a10      	ldr	r2, [pc, #64]	@ (8004b90 <prvCheckForValidListAndQueue+0x68>)
 8004b50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b52:	2300      	movs	r3, #0
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <prvCheckForValidListAndQueue+0x74>)
 8004b58:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <prvCheckForValidListAndQueue+0x78>)
 8004b5a:	210c      	movs	r1, #12
 8004b5c:	200a      	movs	r0, #10
 8004b5e:	f7fe f895 	bl	8002c8c <xQueueGenericCreateStatic>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4a08      	ldr	r2, [pc, #32]	@ (8004b88 <prvCheckForValidListAndQueue+0x60>)
 8004b66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b68:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <prvCheckForValidListAndQueue+0x60>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <prvCheckForValidListAndQueue+0x60>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	490b      	ldr	r1, [pc, #44]	@ (8004ba4 <prvCheckForValidListAndQueue+0x7c>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe fcb6 	bl	80034e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b7c:	f000 f976 	bl	8004e6c <vPortExitCritical>
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000914 	.word	0x20000914
 8004b8c:	200008e4 	.word	0x200008e4
 8004b90:	200008f8 	.word	0x200008f8
 8004b94:	2000090c 	.word	0x2000090c
 8004b98:	20000910 	.word	0x20000910
 8004b9c:	20000998 	.word	0x20000998
 8004ba0:	20000920 	.word	0x20000920
 8004ba4:	0800554c 	.word	0x0800554c

08004ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3b04      	subs	r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3b04      	subs	r3, #4
 8004bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <pxPortInitialiseStack+0x64>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3b14      	subs	r3, #20
 8004be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b04      	subs	r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f06f 0202 	mvn.w	r2, #2
 8004bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3b20      	subs	r3, #32
 8004bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	08004c11 	.word	0x08004c11

08004c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <prvTaskExitError+0x58>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d00b      	beq.n	8004c3c <prvTaskExitError+0x2c>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	60fb      	str	r3, [r7, #12]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <prvTaskExitError+0x28>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60bb      	str	r3, [r7, #8]
}
 8004c4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c50:	bf00      	nop
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0fc      	beq.n	8004c52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	2000000c 	.word	0x2000000c
 8004c6c:	00000000 	.word	0x00000000

08004c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <pxCurrentTCBConst2>)
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	f380 8809 	msr	PSP, r0
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8811 	msr	BASEPRI, r0
 8004c8a:	4770      	bx	lr
 8004c8c:	f3af 8000 	nop.w

08004c90 <pxCurrentTCBConst2>:
 8004c90:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c98:	4808      	ldr	r0, [pc, #32]	@ (8004cbc <prvPortStartFirstTask+0x24>)
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f380 8808 	msr	MSP, r0
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8814 	msr	CONTROL, r0
 8004caa:	b662      	cpsie	i
 8004cac:	b661      	cpsie	f
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	df00      	svc	0
 8004cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cba:	bf00      	nop
 8004cbc:	e000ed08 	.word	0xe000ed08

08004cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cc6:	4b47      	ldr	r3, [pc, #284]	@ (8004de4 <xPortStartScheduler+0x124>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a47      	ldr	r2, [pc, #284]	@ (8004de8 <xPortStartScheduler+0x128>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10b      	bne.n	8004ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	613b      	str	r3, [r7, #16]
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <xPortStartScheduler+0x124>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3f      	ldr	r2, [pc, #252]	@ (8004dec <xPortStartScheduler+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10b      	bne.n	8004d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60fb      	str	r3, [r7, #12]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d0a:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <xPortStartScheduler+0x130>)
 8004d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	22ff      	movs	r2, #255	@ 0xff
 8004d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <xPortStartScheduler+0x134>)
 8004d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d32:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d34:	2207      	movs	r2, #7
 8004d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d38:	e009      	b.n	8004d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	4a2d      	ldr	r2, [pc, #180]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d56:	2b80      	cmp	r3, #128	@ 0x80
 8004d58:	d0ef      	beq.n	8004d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d5a:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1c3 0307 	rsb	r3, r3, #7
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d00b      	beq.n	8004d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	60bb      	str	r3, [r7, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	4a1c      	ldr	r2, [pc, #112]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d88:	4b1b      	ldr	r3, [pc, #108]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d90:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <xPortStartScheduler+0x138>)
 8004d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d9c:	4b17      	ldr	r3, [pc, #92]	@ (8004dfc <xPortStartScheduler+0x13c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a16      	ldr	r2, [pc, #88]	@ (8004dfc <xPortStartScheduler+0x13c>)
 8004da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004da8:	4b14      	ldr	r3, [pc, #80]	@ (8004dfc <xPortStartScheduler+0x13c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a13      	ldr	r2, [pc, #76]	@ (8004dfc <xPortStartScheduler+0x13c>)
 8004dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004db4:	f000 f8da 	bl	8004f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004db8:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <xPortStartScheduler+0x140>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dbe:	f000 f8f9 	bl	8004fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	@ (8004e04 <xPortStartScheduler+0x144>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8004e04 <xPortStartScheduler+0x144>)
 8004dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dce:	f7ff ff63 	bl	8004c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dd2:	f7fe ff93 	bl	8003cfc <vTaskSwitchContext>
	prvTaskExitError();
 8004dd6:	f7ff ff1b 	bl	8004c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	e000ed00 	.word	0xe000ed00
 8004de8:	410fc271 	.word	0x410fc271
 8004dec:	410fc270 	.word	0x410fc270
 8004df0:	e000e400 	.word	0xe000e400
 8004df4:	200009e0 	.word	0x200009e0
 8004df8:	200009e4 	.word	0x200009e4
 8004dfc:	e000ed20 	.word	0xe000ed20
 8004e00:	2000000c 	.word	0x2000000c
 8004e04:	e000ef34 	.word	0xe000ef34

08004e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
}
 8004e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e22:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <vPortEnterCritical+0x5c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	4a0e      	ldr	r2, [pc, #56]	@ (8004e64 <vPortEnterCritical+0x5c>)
 8004e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <vPortEnterCritical+0x5c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d110      	bne.n	8004e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e34:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <vPortEnterCritical+0x60>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	603b      	str	r3, [r7, #0]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <vPortEnterCritical+0x4a>
	}
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000000c 	.word	0x2000000c
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <vPortExitCritical+0x50>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <vPortExitCritical+0x26>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e92:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <vPortExitCritical+0x50>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	4a08      	ldr	r2, [pc, #32]	@ (8004ebc <vPortExitCritical+0x50>)
 8004e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e9c:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <vPortExitCritical+0x50>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <vPortExitCritical+0x44>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	2000000c 	.word	0x2000000c

08004ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ec0:	f3ef 8009 	mrs	r0, PSP
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <pxCurrentTCBConst>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	f01e 0f10 	tst.w	lr, #16
 8004ed0:	bf08      	it	eq
 8004ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eda:	6010      	str	r0, [r2, #0]
 8004edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ee4:	f380 8811 	msr	BASEPRI, r0
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f7fe ff04 	bl	8003cfc <vTaskSwitchContext>
 8004ef4:	f04f 0000 	mov.w	r0, #0
 8004ef8:	f380 8811 	msr	BASEPRI, r0
 8004efc:	bc09      	pop	{r0, r3}
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	6808      	ldr	r0, [r1, #0]
 8004f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f06:	f01e 0f10 	tst.w	lr, #16
 8004f0a:	bf08      	it	eq
 8004f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f10:	f380 8809 	msr	PSP, r0
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	f3af 8000 	nop.w

08004f20 <pxCurrentTCBConst>:
 8004f20:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop

08004f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	607b      	str	r3, [r7, #4]
}
 8004f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f42:	f7fe fe21 	bl	8003b88 <xTaskIncrementTick>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <SysTick_Handler+0x40>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
}
 8004f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <vPortSetupTimerInterrupt+0x34>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <vPortSetupTimerInterrupt+0x38>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <vPortSetupTimerInterrupt+0x3c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a0a      	ldr	r2, [pc, #40]	@ (8004fac <vPortSetupTimerInterrupt+0x40>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	4a09      	ldr	r2, [pc, #36]	@ (8004fb0 <vPortSetupTimerInterrupt+0x44>)
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f8e:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <vPortSetupTimerInterrupt+0x34>)
 8004f90:	2207      	movs	r2, #7
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	e000e010 	.word	0xe000e010
 8004fa4:	e000e018 	.word	0xe000e018
 8004fa8:	20000000 	.word	0x20000000
 8004fac:	10624dd3 	.word	0x10624dd3
 8004fb0:	e000e014 	.word	0xe000e014

08004fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004fc4 <vPortEnableVFP+0x10>
 8004fb8:	6801      	ldr	r1, [r0, #0]
 8004fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004fbe:	6001      	str	r1, [r0, #0]
 8004fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fc2:	bf00      	nop
 8004fc4:	e000ed88 	.word	0xe000ed88

08004fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fce:	f3ef 8305 	mrs	r3, IPSR
 8004fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d915      	bls.n	8005006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fda:	4a18      	ldr	r2, [pc, #96]	@ (800503c <vPortValidateInterruptPriority+0x74>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fe4:	4b16      	ldr	r3, [pc, #88]	@ (8005040 <vPortValidateInterruptPriority+0x78>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	7afa      	ldrb	r2, [r7, #11]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d20b      	bcs.n	8005006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005006:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <vPortValidateInterruptPriority+0x7c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800500e:	4b0e      	ldr	r3, [pc, #56]	@ (8005048 <vPortValidateInterruptPriority+0x80>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d90b      	bls.n	800502e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <vPortValidateInterruptPriority+0x62>
	}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000e3f0 	.word	0xe000e3f0
 8005040:	200009e0 	.word	0x200009e0
 8005044:	e000ed0c 	.word	0xe000ed0c
 8005048:	200009e4 	.word	0x200009e4

0800504c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	@ 0x28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005058:	f7fe fcda 	bl	8003a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800505c:	4b5c      	ldr	r3, [pc, #368]	@ (80051d0 <pvPortMalloc+0x184>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005064:	f000 f924 	bl	80052b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005068:	4b5a      	ldr	r3, [pc, #360]	@ (80051d4 <pvPortMalloc+0x188>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f040 8095 	bne.w	80051a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01e      	beq.n	80050ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800507c:	2208      	movs	r2, #8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	3308      	adds	r3, #8
 8005096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <pvPortMalloc+0x6e>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	617b      	str	r3, [r7, #20]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d06f      	beq.n	80051a0 <pvPortMalloc+0x154>
 80050c0:	4b45      	ldr	r3, [pc, #276]	@ (80051d8 <pvPortMalloc+0x18c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d86a      	bhi.n	80051a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050ca:	4b44      	ldr	r3, [pc, #272]	@ (80051dc <pvPortMalloc+0x190>)
 80050cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050ce:	4b43      	ldr	r3, [pc, #268]	@ (80051dc <pvPortMalloc+0x190>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050d4:	e004      	b.n	80050e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d903      	bls.n	80050f2 <pvPortMalloc+0xa6>
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f1      	bne.n	80050d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050f2:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <pvPortMalloc+0x184>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d051      	beq.n	80051a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2208      	movs	r2, #8
 8005102:	4413      	add	r3, r2
 8005104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	2308      	movs	r3, #8
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	429a      	cmp	r2, r3
 800511c:	d920      	bls.n	8005160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800511e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <pvPortMalloc+0xfc>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad2      	subs	r2, r2, r3
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800515a:	69b8      	ldr	r0, [r7, #24]
 800515c:	f000 f90a 	bl	8005374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005160:	4b1d      	ldr	r3, [pc, #116]	@ (80051d8 <pvPortMalloc+0x18c>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <pvPortMalloc+0x18c>)
 800516c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800516e:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <pvPortMalloc+0x18c>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <pvPortMalloc+0x194>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d203      	bcs.n	8005182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800517a:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <pvPortMalloc+0x18c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <pvPortMalloc+0x194>)
 8005180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	4b13      	ldr	r3, [pc, #76]	@ (80051d4 <pvPortMalloc+0x188>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	431a      	orrs	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005196:	4b13      	ldr	r3, [pc, #76]	@ (80051e4 <pvPortMalloc+0x198>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4a11      	ldr	r2, [pc, #68]	@ (80051e4 <pvPortMalloc+0x198>)
 800519e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051a0:	f7fe fc44 	bl	8003a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <pvPortMalloc+0x17a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60fb      	str	r3, [r7, #12]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <pvPortMalloc+0x176>
	return pvReturn;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	@ 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	200045f0 	.word	0x200045f0
 80051d4:	20004604 	.word	0x20004604
 80051d8:	200045f4 	.word	0x200045f4
 80051dc:	200045e8 	.word	0x200045e8
 80051e0:	200045f8 	.word	0x200045f8
 80051e4:	200045fc 	.word	0x200045fc

080051e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04f      	beq.n	800529a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051fa:	2308      	movs	r3, #8
 80051fc:	425b      	negs	r3, r3
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b25      	ldr	r3, [pc, #148]	@ (80052a4 <vPortFree+0xbc>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <vPortFree+0x46>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	e7fd      	b.n	800522a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <vPortFree+0x66>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4b14      	ldr	r3, [pc, #80]	@ (80052a4 <vPortFree+0xbc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01e      	beq.n	800529a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11a      	bne.n	800529a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	4b0e      	ldr	r3, [pc, #56]	@ (80052a4 <vPortFree+0xbc>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	43db      	mvns	r3, r3
 800526e:	401a      	ands	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005274:	f7fe fbcc 	bl	8003a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <vPortFree+0xc0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4413      	add	r3, r2
 8005282:	4a09      	ldr	r2, [pc, #36]	@ (80052a8 <vPortFree+0xc0>)
 8005284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f000 f874 	bl	8005374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <vPortFree+0xc4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	4a06      	ldr	r2, [pc, #24]	@ (80052ac <vPortFree+0xc4>)
 8005294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005296:	f7fe fbc9 	bl	8003a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20004604 	.word	0x20004604
 80052a8:	200045f4 	.word	0x200045f4
 80052ac:	20004600 	.word	0x20004600

080052b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80052ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052bc:	4b27      	ldr	r3, [pc, #156]	@ (800535c <prvHeapInit+0xac>)
 80052be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00c      	beq.n	80052e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3307      	adds	r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0307 	bic.w	r3, r3, #7
 80052d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <prvHeapInit+0xac>)
 80052e0:	4413      	add	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005360 <prvHeapInit+0xb0>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005360 <prvHeapInit+0xb0>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4413      	add	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052fc:	2208      	movs	r2, #8
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0307 	bic.w	r3, r3, #7
 800530a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a15      	ldr	r2, [pc, #84]	@ (8005364 <prvHeapInit+0xb4>)
 8005310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005312:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <prvHeapInit+0xb4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800531a:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <prvHeapInit+0xb4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <prvHeapInit+0xb4>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4a0a      	ldr	r2, [pc, #40]	@ (8005368 <prvHeapInit+0xb8>)
 800533e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4a09      	ldr	r2, [pc, #36]	@ (800536c <prvHeapInit+0xbc>)
 8005346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005348:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <prvHeapInit+0xc0>)
 800534a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800534e:	601a      	str	r2, [r3, #0]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	200009e8 	.word	0x200009e8
 8005360:	200045e8 	.word	0x200045e8
 8005364:	200045f0 	.word	0x200045f0
 8005368:	200045f8 	.word	0x200045f8
 800536c:	200045f4 	.word	0x200045f4
 8005370:	20004604 	.word	0x20004604

08005374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800537c:	4b28      	ldr	r3, [pc, #160]	@ (8005420 <prvInsertBlockIntoFreeList+0xac>)
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e002      	b.n	8005388 <prvInsertBlockIntoFreeList+0x14>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d8f7      	bhi.n	8005382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4413      	add	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d108      	bne.n	80053b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	441a      	add	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d118      	bne.n	80053fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <prvInsertBlockIntoFreeList+0xb0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d00d      	beq.n	80053f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e008      	b.n	8005404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <prvInsertBlockIntoFreeList+0xb0>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e003      	b.n	8005404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d002      	beq.n	8005412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	200045e8 	.word	0x200045e8
 8005424:	200045f0 	.word	0x200045f0

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <__libc_init_array>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4d0d      	ldr	r5, [pc, #52]	@ (8005470 <__libc_init_array+0x38>)
 800543c:	4c0d      	ldr	r4, [pc, #52]	@ (8005474 <__libc_init_array+0x3c>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	2600      	movs	r6, #0
 8005444:	42a6      	cmp	r6, r4
 8005446:	d109      	bne.n	800545c <__libc_init_array+0x24>
 8005448:	4d0b      	ldr	r5, [pc, #44]	@ (8005478 <__libc_init_array+0x40>)
 800544a:	4c0c      	ldr	r4, [pc, #48]	@ (800547c <__libc_init_array+0x44>)
 800544c:	f000 f826 	bl	800549c <_init>
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	2600      	movs	r6, #0
 8005456:	42a6      	cmp	r6, r4
 8005458:	d105      	bne.n	8005466 <__libc_init_array+0x2e>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005460:	4798      	blx	r3
 8005462:	3601      	adds	r6, #1
 8005464:	e7ee      	b.n	8005444 <__libc_init_array+0xc>
 8005466:	f855 3b04 	ldr.w	r3, [r5], #4
 800546a:	4798      	blx	r3
 800546c:	3601      	adds	r6, #1
 800546e:	e7f2      	b.n	8005456 <__libc_init_array+0x1e>
 8005470:	08005574 	.word	0x08005574
 8005474:	08005574 	.word	0x08005574
 8005478:	08005574 	.word	0x08005574
 800547c:	08005578 	.word	0x08005578

08005480 <memcpy>:
 8005480:	440a      	add	r2, r1
 8005482:	4291      	cmp	r1, r2
 8005484:	f100 33ff 	add.w	r3, r0, #4294967295
 8005488:	d100      	bne.n	800548c <memcpy+0xc>
 800548a:	4770      	bx	lr
 800548c:	b510      	push	{r4, lr}
 800548e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005496:	4291      	cmp	r1, r2
 8005498:	d1f9      	bne.n	800548e <memcpy+0xe>
 800549a:	bd10      	pop	{r4, pc}

0800549c <_init>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr

080054a8 <_fini>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr
