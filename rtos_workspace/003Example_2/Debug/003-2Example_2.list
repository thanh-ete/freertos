
003-2Example_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005358  08005358  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005360  08005360  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005368  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00004064  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004074  20004074  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011639  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b18  00000000  00000000  00018679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  0001b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c99  00000000  00000000  0001c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022885  00000000  00000000  0001ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001382e  00000000  00000000  0003f6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36fe  00000000  00000000  00052f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012660a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004334  00000000  00000000  00126650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005238 	.word	0x08005238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005238 	.word	0x08005238

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb0f 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f851 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8e3 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8b7 	bl	8000688 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Semaphore_Binary = xSemaphoreCreateBinary();
 800051a:	2203      	movs	r2, #3
 800051c:	2100      	movs	r1, #0
 800051e:	2001      	movs	r0, #1
 8000520:	f002 fee2 	bl	80032e8 <xQueueGenericCreate>
 8000524:	4603      	mov	r3, r0
 8000526:	4a19      	ldr	r2, [pc, #100]	@ (800058c <main+0x88>)
 8000528:	6013      	str	r3, [r2, #0]

  	if(Semaphore_Binary == NULL){
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <main+0x88>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d106      	bne.n	8000540 <main+0x3c>
  		HAL_UART_Transmit(&huart2, (uint8_t*)"Unable semaphore\n",17 , 100);
 8000532:	2364      	movs	r3, #100	@ 0x64
 8000534:	2211      	movs	r2, #17
 8000536:	4916      	ldr	r1, [pc, #88]	@ (8000590 <main+0x8c>)
 8000538:	4816      	ldr	r0, [pc, #88]	@ (8000594 <main+0x90>)
 800053a:	f001 fe05 	bl	8002148 <HAL_UART_Transmit>
 800053e:	e00c      	b.n	800055a <main+0x56>
  	}
  	else{
  		HAL_UART_Transmit(&huart2, (uint8_t*)"Semaphore success\n", 18, 100);
 8000540:	2364      	movs	r3, #100	@ 0x64
 8000542:	2212      	movs	r2, #18
 8000544:	4914      	ldr	r1, [pc, #80]	@ (8000598 <main+0x94>)
 8000546:	4813      	ldr	r0, [pc, #76]	@ (8000594 <main+0x90>)
 8000548:	f001 fdfe 	bl	8002148 <HAL_UART_Transmit>
  		xSemaphoreGive(Semaphore_Binary);
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <main+0x88>)
 800054e:	6818      	ldr	r0, [r3, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	f002 ff21 	bl	800339c <xQueueGenericSend>
  	}

  	xTaskCreate(TaskHigh, "High-Task", 128, NULL, 1, &TaskHigh_Handler);
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <main+0x98>)
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	490e      	ldr	r1, [pc, #56]	@ (80005a0 <main+0x9c>)
 8000568:	480e      	ldr	r0, [pc, #56]	@ (80005a4 <main+0xa0>)
 800056a:	f003 fa8b 	bl	8003a84 <xTaskCreate>
  	xTaskCreate(TaskLow, "Low-Task", 128, NULL, 1, &TaskLow_Handler);
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <main+0xa4>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2280      	movs	r2, #128	@ 0x80
 800057a:	490c      	ldr	r1, [pc, #48]	@ (80005ac <main+0xa8>)
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <main+0xac>)
 800057e:	f003 fa81 	bl	8003a84 <xTaskCreate>

  	vTaskStartScheduler();
 8000582:	f003 fbed 	bl	8003d60 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	bf00      	nop
 8000588:	e7fd      	b.n	8000586 <main+0x82>
 800058a:	bf00      	nop
 800058c:	200002d0 	.word	0x200002d0
 8000590:	08005250 	.word	0x08005250
 8000594:	20000280 	.word	0x20000280
 8000598:	08005264 	.word	0x08005264
 800059c:	200002c8 	.word	0x200002c8
 80005a0:	08005278 	.word	0x08005278
 80005a4:	0800072d 	.word	0x0800072d
 80005a8:	200002cc 	.word	0x200002cc
 80005ac:	08005284 	.word	0x08005284
 80005b0:	080007b9 	.word	0x080007b9

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	@ 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fdfe 	bl	80051c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	@ (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	@ 0xa8
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fdc9 	bl	80011d0 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f910 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f82a 	bl	80016c0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f8f9 	bl	8000868 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	@ 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f001 fcf2 	bl	80020a8 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f8cd 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000280 	.word	0x20000280
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <TaskHigh>:

/* USER CODE BEGIN 4 */
void TaskHigh(void* argument){
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	while(1){
		char *str = "Enter High Task\n";
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <TaskHigh+0x78>)
 8000736:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff fd49 	bl	80001d0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	6979      	ldr	r1, [r7, #20]
 8000746:	4818      	ldr	r0, [pc, #96]	@ (80007a8 <TaskHigh+0x7c>)
 8000748:	f001 fcfe 	bl	8002148 <HAL_UART_Transmit>

		xSemaphoreTake(Semaphore_Binary, portMAX_DELAY);
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <TaskHigh+0x80>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f04f 31ff 	mov.w	r1, #4294967295
 8000754:	4618      	mov	r0, r3
 8000756:	f002 ff23 	bl	80035a0 <xQueueSemaphoreTake>

		char *str2 = "Semaphore acquired by High_Task\n";
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <TaskHigh+0x84>)
 800075c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), 100);
 800075e:	6938      	ldr	r0, [r7, #16]
 8000760:	f7ff fd36 	bl	80001d0 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	6939      	ldr	r1, [r7, #16]
 800076c:	480e      	ldr	r0, [pc, #56]	@ (80007a8 <TaskHigh+0x7c>)
 800076e:	f001 fceb 	bl	8002148 <HAL_UART_Transmit>


		char *str1 = "Leave and release High Task\n\n";
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <TaskHigh+0x88>)
 8000774:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 100);
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fd2a 	bl	80001d0 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	68f9      	ldr	r1, [r7, #12]
 8000784:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <TaskHigh+0x7c>)
 8000786:	f001 fcdf 	bl	8002148 <HAL_UART_Transmit>
		xSemaphoreGive(Semaphore_Binary);
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <TaskHigh+0x80>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	f002 fe02 	bl	800339c <xQueueGenericSend>
		vTaskDelay(2000);
 8000798:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800079c:	f003 faaa 	bl	8003cf4 <vTaskDelay>
	while(1){
 80007a0:	bf00      	nop
 80007a2:	e7c7      	b.n	8000734 <TaskHigh+0x8>
 80007a4:	08005290 	.word	0x08005290
 80007a8:	20000280 	.word	0x20000280
 80007ac:	200002d0 	.word	0x200002d0
 80007b0:	080052a4 	.word	0x080052a4
 80007b4:	080052c8 	.word	0x080052c8

080007b8 <TaskLow>:
	}
}

void TaskLow(void *argument){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	while(1){
		char *str = "Enter Low Task\n";
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <TaskLow+0x78>)
 80007c2:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80007c4:	6978      	ldr	r0, [r7, #20]
 80007c6:	f7ff fd03 	bl	80001d0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	2364      	movs	r3, #100	@ 0x64
 80007d0:	6979      	ldr	r1, [r7, #20]
 80007d2:	4818      	ldr	r0, [pc, #96]	@ (8000834 <TaskLow+0x7c>)
 80007d4:	f001 fcb8 	bl	8002148 <HAL_UART_Transmit>

		char *str2 = "Semaphore acquired by Low_Task\n";
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <TaskLow+0x80>)
 80007da:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), 100);
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f7ff fcf7 	bl	80001d0 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	2364      	movs	r3, #100	@ 0x64
 80007e8:	6939      	ldr	r1, [r7, #16]
 80007ea:	4812      	ldr	r0, [pc, #72]	@ (8000834 <TaskLow+0x7c>)
 80007ec:	f001 fcac 	bl	8002148 <HAL_UART_Transmit>


		xSemaphoreTake(Semaphore_Binary, portMAX_DELAY);
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <TaskLow+0x84>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fed1 	bl	80035a0 <xQueueSemaphoreTake>

		char *str1 = "Leave and release Low Task\n\n";
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <TaskLow+0x88>)
 8000800:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 100);
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff fce4 	bl	80001d0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	68f9      	ldr	r1, [r7, #12]
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <TaskLow+0x7c>)
 8000812:	f001 fc99 	bl	8002148 <HAL_UART_Transmit>
		xSemaphoreGive(Semaphore_Binary);
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <TaskLow+0x84>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	f002 fdbc 	bl	800339c <xQueueGenericSend>
		vTaskDelay(1000);
 8000824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000828:	f003 fa64 	bl	8003cf4 <vTaskDelay>
	while(1){
 800082c:	bf00      	nop
 800082e:	e7c7      	b.n	80007c0 <TaskLow+0x8>
 8000830:	080052e8 	.word	0x080052e8
 8000834:	20000280 	.word	0x20000280
 8000838:	080052f8 	.word	0x080052f8
 800083c:	200002d0 	.word	0x200002d0
 8000840:	08005318 	.word	0x08005318

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000856:	f000 f98b 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010000 	.word	0x40010000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <HAL_MspInit+0x54>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000888:	6453      	str	r3, [r2, #68]	@ 0x44
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <HAL_MspInit+0x54>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 fa31 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000960 <HAL_UART_MspInit+0x94>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d133      	bne.n	8000956 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <HAL_UART_MspInit+0x98>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <HAL_UART_MspInit+0x98>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_UART_MspInit+0x98>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_UART_MspInit+0x98>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <HAL_UART_MspInit+0x98>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_UART_MspInit+0x98>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <HAL_UART_MspInit+0x9c>)
 8000942:	f000 faa9 	bl	8000e98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2105      	movs	r1, #5
 800094a:	2026      	movs	r0, #38	@ 0x26
 800094c:	f000 f9e8 	bl	8000d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000950:	2026      	movs	r0, #38	@ 0x26
 8000952:	f000 fa01 	bl	8000d58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	@ 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40004400 	.word	0x40004400
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <HAL_InitTick+0xd4>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000984:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <HAL_InitTick+0xd4>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6453      	str	r3, [r2, #68]	@ 0x44
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <HAL_InitTick+0xd4>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000998:	f107 020c 	add.w	r2, r7, #12
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 f8ac 	bl	8001b00 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009a8:	f001 f896 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 80009ac:	4603      	mov	r3, r0
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b4:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <HAL_InitTick+0xd8>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	0c9b      	lsrs	r3, r3, #18
 80009bc:	3b01      	subs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c0:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <HAL_InitTick+0xe0>)
 80009c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009e8:	f001 f8bc 	bl	8001b64 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11b      	bne.n	8000a32 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009fa:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <HAL_InitTick+0xdc>)
 80009fc:	f001 f90c 	bl	8001c18 <HAL_TIM_Base_Start_IT>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d111      	bne.n	8000a32 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a0e:	2019      	movs	r0, #25
 8000a10:	f000 f9a2 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d808      	bhi.n	8000a2c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	2019      	movs	r0, #25
 8000a20:	f000 f97e 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_InitTick+0xe4>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e002      	b.n	8000a32 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3730      	adds	r7, #48	@ 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	200002d4 	.word	0x200002d4
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	20000004 	.word	0x20000004

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a92:	f001 f931 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002d4 	.word	0x200002d4

08000aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <USART2_IRQHandler+0x10>)
 8000aa6:	f001 fbdb 	bl	8002260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000280 	.word	0x20000280

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 fb65 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fcfb 	bl	8000504 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b1c:	08005368 	.word	0x08005368
  ldr r2, =_sbss
 8000b20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b24:	20004074 	.word	0x20004074

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff ff06 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe88 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	2000031c 	.word	0x2000031c

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000031c 	.word	0x2000031c

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d82:	f7ff ff09 	bl	8000b98 <HAL_GetTick>
 8000d86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d008      	beq.n	8000da6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e052      	b.n	8000e4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0216 	bic.w	r2, r2, #22
 8000db4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	695a      	ldr	r2, [r3, #20]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <HAL_DMA_Abort+0x62>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0208 	bic.w	r2, r2, #8
 8000de4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df6:	e013      	b.n	8000e20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df8:	f7ff fece 	bl	8000b98 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d90c      	bls.n	8000e20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e015      	b.n	8000e4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1e4      	bne.n	8000df8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e32:	223f      	movs	r2, #63	@ 0x3f
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d004      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2280      	movs	r2, #128	@ 0x80
 8000e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00c      	b.n	8000e8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	@ (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	@ (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	@ (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	@ (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	@ (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	@ (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	@ (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	@ (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	@ (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	@ (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	@ (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	@ (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	@ (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	@ (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e267      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ee:	4b88      	ldr	r3, [pc, #544]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b85      	ldr	r3, [pc, #532]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b82      	ldr	r3, [pc, #520]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b7e      	ldr	r3, [pc, #504]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e242      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b76      	ldr	r3, [pc, #472]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b70      	ldr	r3, [pc, #448]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b69      	ldr	r3, [pc, #420]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b66      	ldr	r3, [pc, #408]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc86 	bl	8000b98 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc82 	bl	8000b98 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e207      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc72 	bl	8000b98 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc6e 	bl	8000b98 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	@ 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f3      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b51      	ldr	r3, [pc, #324]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b44      	ldr	r3, [pc, #272]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b3b      	ldr	r3, [pc, #236]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4937      	ldr	r1, [pc, #220]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	@ (8001414 <HAL_RCC_OscConfig+0x244>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc27 	bl	8000b98 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc23 	bl	8000b98 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a8      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4925      	ldr	r1, [pc, #148]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_RCC_OscConfig+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc06 	bl	8000b98 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc02 	bl	8000b98 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e187      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d036      	beq.n	8001428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_RCC_OscConfig+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbe6 	bl	8000b98 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fbe2 	bl	8000b98 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e167      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_RCC_OscConfig+0x240>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_OscConfig+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbcf 	bl	8000b98 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e00e      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbcb 	bl	8000b98 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d907      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e150      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ea      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b81      	ldr	r3, [pc, #516]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b7d      	ldr	r3, [pc, #500]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a7c      	ldr	r2, [pc, #496]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b7a      	ldr	r3, [pc, #488]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b77      	ldr	r3, [pc, #476]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b74      	ldr	r3, [pc, #464]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fb8b 	bl	8000b98 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fb87 	bl	8000b98 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e10c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6a      	ldr	r3, [pc, #424]	@ (8001644 <HAL_RCC_OscConfig+0x474>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014ac:	4b64      	ldr	r3, [pc, #400]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b0:	4a63      	ldr	r2, [pc, #396]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014dc:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e0:	4a57      	ldr	r2, [pc, #348]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e8:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ec:	4a54      	ldr	r2, [pc, #336]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb4c 	bl	8000b98 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fb48 	bl	8000b98 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0cb      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x334>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fb36 	bl	8000b98 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fb32 	bl	8000b98 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a1 	beq.w	80016b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156e:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d05c      	beq.n	8001634 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d141      	bne.n	8001606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb06 	bl	8000b98 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fb02 	bl	8000b98 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e087      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	491b      	ldr	r1, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_RCC_OscConfig+0x478>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fadb 	bl	8000b98 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fad7 	bl	8000b98 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e05c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x416>
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fac4 	bl	8000b98 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fac0 	bl	8000b98 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000
 8001648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d028      	beq.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11a      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f9f2 	bl	8000b98 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff f9ee 	bl	8000b98 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	@ (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f880 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	08005340 	.word	0x08005340
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b094      	sub	sp, #80	@ 0x50
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b79      	ldr	r3, [pc, #484]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80e1 	bhi.w	8001a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e0db      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c4:	e0db      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b73      	ldr	r3, [pc, #460]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80018c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ca:	e0d8      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	6139      	str	r1, [r7, #16]
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001930:	4659      	mov	r1, fp
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4651      	mov	r1, sl
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4651      	mov	r1, sl
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	4651      	mov	r1, sl
 8001940:	ebb2 0801 	subs.w	r8, r2, r1
 8001944:	4659      	mov	r1, fp
 8001946:	eb63 0901 	sbc.w	r9, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb18 0303 	adds.w	r3, r8, r3
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	462b      	mov	r3, r5
 800196c:	eb49 0303 	adc.w	r3, r9, r3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197e:	4629      	mov	r1, r5
 8001980:	024b      	lsls	r3, r1, #9
 8001982:	4621      	mov	r1, r4
 8001984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001988:	4621      	mov	r1, r4
 800198a:	024a      	lsls	r2, r1, #9
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001992:	2200      	movs	r2, #0
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800199c:	f7fe fc20 	bl	80001e0 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4613      	mov	r3, r2
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	2200      	movs	r2, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	4611      	mov	r1, r2
 80019b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ba:	623b      	str	r3, [r7, #32]
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c4:	4642      	mov	r2, r8
 80019c6:	464b      	mov	r3, r9
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	0159      	lsls	r1, r3, #5
 80019d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d6:	0150      	lsls	r0, r2, #5
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4641      	mov	r1, r8
 80019de:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e2:	4649      	mov	r1, r9
 80019e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019fc:	ebb2 040a 	subs.w	r4, r2, sl
 8001a00:	eb63 050b 	sbc.w	r5, r3, fp
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	18e3      	adds	r3, r4, r3
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	464b      	mov	r3, r9
 8001a20:	eb45 0303 	adc.w	r3, r5, r3
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a32:	4629      	mov	r1, r5
 8001a34:	028b      	lsls	r3, r1, #10
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	028a      	lsls	r2, r1, #10
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	61fa      	str	r2, [r7, #28]
 8001a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a50:	f7fe fbc6 	bl	80001e0 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a76:	e002      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3750      	adds	r7, #80	@ 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	007a1200 	.word	0x007a1200

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab4:	f7ff fff0 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08005350 	.word	0x08005350

08001ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001adc:	f7ff ffdc 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0b5b      	lsrs	r3, r3, #13
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	@ (8001afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08005350 	.word	0x08005350

08001b00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <HAL_RCC_GetClockConfig+0x60>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0207 	and.w	r2, r3, #7
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	601a      	str	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e041      	b.n	8001bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f839 	bl	8001c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f000 f9c0 	bl	8001f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d001      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04e      	b.n	8001cce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xc4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d022      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5a:	d01d      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d018      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d013      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00e      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <HAL_TIM_Base_Start_IT+0xd4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x80>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d111      	bne.n	8001cbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d010      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0201 	orr.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cba:	e007      	b.n	8001ccc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40000c00 	.word	0x40000c00
 8001cec:	40010400 	.word	0x40010400
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	40001800 	.word	0x40001800

08001cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d020      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0202 	mvn.w	r2, #2
 8001d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8d2 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8c4 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f8d5 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d020      	beq.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01b      	beq.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0204 	mvn.w	r2, #4
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8ac 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f89e 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8af 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d020      	beq.n	8001df4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01b      	beq.n	8001df4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0208 	mvn.w	r2, #8
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f886 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f878 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f889 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d020      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01b      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0210 	mvn.w	r2, #16
 8001e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2208      	movs	r2, #8
 8001e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f860 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f852 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f863 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0201 	mvn.w	r2, #1
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fcf0 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f906 	bl	8002094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f834 	bl	8001f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0220 	mvn.w	r2, #32
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8d8 	bl	8002080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a46      	ldr	r2, [pc, #280]	@ (8002054 <TIM_Base_SetConfig+0x12c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f46:	d00f      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a43      	ldr	r2, [pc, #268]	@ (8002058 <TIM_Base_SetConfig+0x130>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a42      	ldr	r2, [pc, #264]	@ (800205c <TIM_Base_SetConfig+0x134>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a41      	ldr	r2, [pc, #260]	@ (8002060 <TIM_Base_SetConfig+0x138>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a40      	ldr	r2, [pc, #256]	@ (8002064 <TIM_Base_SetConfig+0x13c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a35      	ldr	r2, [pc, #212]	@ (8002054 <TIM_Base_SetConfig+0x12c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f88:	d027      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a32      	ldr	r2, [pc, #200]	@ (8002058 <TIM_Base_SetConfig+0x130>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d023      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a31      	ldr	r2, [pc, #196]	@ (800205c <TIM_Base_SetConfig+0x134>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01f      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a30      	ldr	r2, [pc, #192]	@ (8002060 <TIM_Base_SetConfig+0x138>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8002064 <TIM_Base_SetConfig+0x13c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d017      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a2e      	ldr	r2, [pc, #184]	@ (8002068 <TIM_Base_SetConfig+0x140>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <TIM_Base_SetConfig+0x144>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8002070 <TIM_Base_SetConfig+0x148>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002074 <TIM_Base_SetConfig+0x14c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002078 <TIM_Base_SetConfig+0x150>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a29      	ldr	r2, [pc, #164]	@ (800207c <TIM_Base_SetConfig+0x154>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <TIM_Base_SetConfig+0x12c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_Base_SetConfig+0xf8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <TIM_Base_SetConfig+0x13c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d103      	bne.n	8002028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f023 0201 	bic.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
  }
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40010400 	.word	0x40010400
 8002068:	40014000 	.word	0x40014000
 800206c:	40014400 	.word	0x40014400
 8002070:	40014800 	.word	0x40014800
 8002074:	40001800 	.word	0x40001800
 8002078:	40001c00 	.word	0x40001c00
 800207c:	40002000 	.word	0x40002000

08002080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e042      	b.n	8002140 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fbfc 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	@ 0x24
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fd69 	bl	8002bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	d175      	bne.n	8002254 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Transmit+0x2c>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e06e      	b.n	8002256 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2221      	movs	r2, #33	@ 0x21
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002186:	f7fe fd07 	bl	8000b98 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a0:	d108      	bne.n	80021b4 <HAL_UART_Transmit+0x6c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	e003      	b.n	80021bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021bc:	e02e      	b.n	800221c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2180      	movs	r1, #128	@ 0x80
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fb05 	bl	80027d8 <UART_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e03a      	b.n	8002256 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	3302      	adds	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	e007      	b.n	800220e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1cb      	bne.n	80021be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2140      	movs	r1, #64	@ 0x40
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fad1 	bl	80027d8 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0ba      	sub	sp, #232	@ 0xe8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800229e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10f      	bne.n	80022c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_UART_IRQHandler+0x66>
 80022b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fbc2 	bl	8002a48 <UART_Receive_IT>
      return;
 80022c4:	e25b      	b.n	800277e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80de 	beq.w	800248c <HAL_UART_IRQHandler+0x22c>
 80022d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80d1 	beq.w	800248c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_UART_IRQHandler+0xae>
 80022f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800230e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_UART_IRQHandler+0xd2>
 800231a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_UART_IRQHandler+0xf6>
 800233e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f043 0204 	orr.w	r2, r3, #4
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d011      	beq.n	8002386 <HAL_UART_IRQHandler+0x126>
 8002362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800236e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f043 0208 	orr.w	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 81f2 	beq.w	8002774 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_UART_IRQHandler+0x14e>
 800239c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fb4d 	bl	8002a48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b8:	2b40      	cmp	r3, #64	@ 0x40
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <HAL_UART_IRQHandler+0x17a>
 80023d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04f      	beq.n	800247a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa55 	bl	800288a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ea:	2b40      	cmp	r3, #64	@ 0x40
 80023ec:	d141      	bne.n	8002472 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3314      	adds	r3, #20
 80023f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800240c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3314      	adds	r3, #20
 8002416:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800241a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800241e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002422:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002426:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1d9      	bne.n	80023ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d013      	beq.n	800246a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	4a7e      	ldr	r2, [pc, #504]	@ (8002640 <HAL_UART_IRQHandler+0x3e0>)
 8002448:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fd00 	bl	8000e54 <HAL_DMA_Abort_IT>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002464:	4610      	mov	r0, r2
 8002466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002468:	e00e      	b.n	8002488 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f99e 	bl	80027ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002470:	e00a      	b.n	8002488 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f99a 	bl	80027ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002478:	e006      	b.n	8002488 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f996 	bl	80027ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002486:	e175      	b.n	8002774 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002488:	bf00      	nop
    return;
 800248a:	e173      	b.n	8002774 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	2b01      	cmp	r3, #1
 8002492:	f040 814f 	bne.w	8002734 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8148 	beq.w	8002734 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8141 	beq.w	8002734 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	f040 80b6 	bne.w	8002644 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8145 	beq.w	8002778 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024f6:	429a      	cmp	r2, r3
 80024f8:	f080 813e 	bcs.w	8002778 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002502:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250e:	f000 8088 	beq.w	8002622 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002528:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800252c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800253e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002546:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800254a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800254e:	e841 2300 	strex	r3, r2, [r1]
 8002552:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1d9      	bne.n	8002512 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002568:	e853 3f00 	ldrex	r3, [r3]
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800256e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3314      	adds	r3, #20
 800257e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002582:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002586:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002588:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800258a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e1      	bne.n	800255e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3314      	adds	r3, #20
 80025a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80025aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e3      	bne.n	800259a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025ea:	e853 3f00 	ldrex	r3, [r3]
 80025ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025f2:	f023 0310 	bic.w	r3, r3, #16
 80025f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	330c      	adds	r3, #12
 8002600:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002604:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002606:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002608:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800260a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800260c:	e841 2300 	strex	r3, r2, [r1]
 8002610:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e3      	bne.n	80025e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fba9 	bl	8000d74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002630:	b29b      	uxth	r3, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f8c1 	bl	80027c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800263e:	e09b      	b.n	8002778 <HAL_UART_IRQHandler+0x518>
 8002640:	08002951 	.word	0x08002951
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800264c:	b29b      	uxth	r3, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 808e 	beq.w	800277c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8089 	beq.w	800277c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800267a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002680:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800268e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002690:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800269c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e3      	bne.n	800266a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3314      	adds	r3, #20
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	623b      	str	r3, [r7, #32]
   return(result);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3314      	adds	r3, #20
 80026c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	e853 3f00 	ldrex	r3, [r3]
 80026f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0310 	bic.w	r3, r3, #16
 80026fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800270c:	61fa      	str	r2, [r7, #28]
 800270e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	e841 2300 	strex	r3, r2, [r1]
 8002718:	617b      	str	r3, [r7, #20]
   return(result);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e3      	bne.n	80026e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002726:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f847 	bl	80027c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002732:	e023      	b.n	800277c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <HAL_UART_IRQHandler+0x4f4>
 8002740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f913 	bl	8002978 <UART_Transmit_IT>
    return;
 8002752:	e014      	b.n	800277e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <HAL_UART_IRQHandler+0x51e>
 8002760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f953 	bl	8002a18 <UART_EndTransmit_IT>
    return;
 8002772:	e004      	b.n	800277e <HAL_UART_IRQHandler+0x51e>
    return;
 8002774:	bf00      	nop
 8002776:	e002      	b.n	800277e <HAL_UART_IRQHandler+0x51e>
      return;
 8002778:	bf00      	nop
 800277a:	e000      	b.n	800277e <HAL_UART_IRQHandler+0x51e>
      return;
 800277c:	bf00      	nop
  }
}
 800277e:	37e8      	adds	r7, #232	@ 0xe8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e8:	e03b      	b.n	8002862 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d037      	beq.n	8002862 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7fe f9d1 	bl	8000b98 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <UART_WaitOnFlagUntilTimeout+0x30>
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e03a      	b.n	8002882 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d023      	beq.n	8002862 <UART_WaitOnFlagUntilTimeout+0x8a>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b80      	cmp	r3, #128	@ 0x80
 800281e:	d020      	beq.n	8002862 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b40      	cmp	r3, #64	@ 0x40
 8002824:	d01d      	beq.n	8002862 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b08      	cmp	r3, #8
 8002832:	d116      	bne.n	8002862 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f81d 	bl	800288a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2208      	movs	r2, #8
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4013      	ands	r3, r2
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	429a      	cmp	r2, r3
 800287e:	d0b4      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800288a:	b480      	push	{r7}
 800288c:	b095      	sub	sp, #84	@ 0x54
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	330c      	adds	r3, #12
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80028b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e5      	bne.n	8002892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3314      	adds	r3, #20
 80028cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	e853 3f00 	ldrex	r3, [r3]
 80028d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3314      	adds	r3, #20
 80028e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ee:	e841 2300 	strex	r3, r2, [r1]
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e5      	bne.n	80028c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d119      	bne.n	8002936 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	e853 3f00 	ldrex	r3, [r3]
 8002910:	60bb      	str	r3, [r7, #8]
   return(result);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f023 0310 	bic.w	r3, r3, #16
 8002918:	647b      	str	r3, [r7, #68]	@ 0x44
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002922:	61ba      	str	r2, [r7, #24]
 8002924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	613b      	str	r3, [r7, #16]
   return(result);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e5      	bne.n	8002902 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002944:	bf00      	nop
 8002946:	3754      	adds	r7, #84	@ 0x54
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ff1e 	bl	80027ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b21      	cmp	r3, #33	@ 0x21
 800298a:	d13e      	bne.n	8002a0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d114      	bne.n	80029c0 <UART_Transmit_IT+0x48>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d110      	bne.n	80029c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	1c9a      	adds	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]
 80029be:	e008      	b.n	80029d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	1c59      	adds	r1, r3, #1
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6211      	str	r1, [r2, #32]
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4619      	mov	r1, r3
 80029e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fea3 	bl	8002784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	@ 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b22      	cmp	r3, #34	@ 0x22
 8002a5a:	f040 80ae 	bne.w	8002bba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a66:	d117      	bne.n	8002a98 <UART_Receive_IT+0x50>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	1c9a      	adds	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a96:	e026      	b.n	8002ae6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aaa:	d007      	beq.n	8002abc <UART_Receive_IT+0x74>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <UART_Receive_IT+0x82>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e008      	b.n	8002adc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ada:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4619      	mov	r1, r3
 8002af4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d15d      	bne.n	8002bb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0220 	bic.w	r2, r2, #32
 8002b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d135      	bne.n	8002bac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	613b      	str	r3, [r7, #16]
   return(result);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f023 0310 	bic.w	r3, r3, #16
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b66:	623a      	str	r2, [r7, #32]
 8002b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e5      	bne.n	8002b46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d10a      	bne.n	8002b9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fe0b 	bl	80027c0 <HAL_UARTEx_RxEventCallback>
 8002baa:	e002      	b.n	8002bb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fdf3 	bl	8002798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e002      	b.n	8002bbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
  }
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3730      	adds	r7, #48	@ 0x30
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b0c0      	sub	sp, #256	@ 0x100
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	ea40 0301 	orr.w	r3, r0, r1
 8002bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c1c:	f021 010c 	bic.w	r1, r1, #12
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	6999      	ldr	r1, [r3, #24]
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	ea40 0301 	orr.w	r3, r0, r1
 8002c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b8f      	ldr	r3, [pc, #572]	@ (8002e90 <UART_SetConfig+0x2cc>)
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d005      	beq.n	8002c64 <UART_SetConfig+0xa0>
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e94 <UART_SetConfig+0x2d0>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d104      	bne.n	8002c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7fe ff38 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 8002c68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c6c:	e003      	b.n	8002c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f7fe ff1f 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8002c72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c80:	f040 810c 	bne.w	8002e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	eb12 0801 	adds.w	r8, r2, r1
 8002cac:	4629      	mov	r1, r5
 8002cae:	eb43 0901 	adc.w	r9, r3, r1
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc6:	4690      	mov	r8, r2
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	eb18 0303 	adds.w	r3, r8, r3
 8002cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	eb49 0303 	adc.w	r3, r9, r3
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	18db      	adds	r3, r3, r3
 8002cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	eb42 0303 	adc.w	r3, r2, r3
 8002cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d08:	f7fd fa6a 	bl	80001e0 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4b61      	ldr	r3, [pc, #388]	@ (8002e98 <UART_SetConfig+0x2d4>)
 8002d12:	fba3 2302 	umull	r2, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	011c      	lsls	r4, r3, #4
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	1891      	adds	r1, r2, r2
 8002d32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d34:	415b      	adcs	r3, r3
 8002d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d42:	4649      	mov	r1, r9
 8002d44:	eb43 0b01 	adc.w	fp, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	469b      	mov	fp, r3
 8002d60:	4643      	mov	r3, r8
 8002d62:	eb1a 0303 	adds.w	r3, sl, r3
 8002d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	18db      	adds	r3, r3, r3
 8002d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d8e:	4613      	mov	r3, r2
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d9e:	f7fd fa1f 	bl	80001e0 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	4b3b      	ldr	r3, [pc, #236]	@ (8002e98 <UART_SetConfig+0x2d4>)
 8002daa:	fba3 2301 	umull	r2, r3, r3, r1
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2264      	movs	r2, #100	@ 0x64
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	1acb      	subs	r3, r1, r3
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <UART_SetConfig+0x2d4>)
 8002dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dcc:	441c      	add	r4, r3
 8002dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	1891      	adds	r1, r2, r2
 8002de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002de8:	415b      	adcs	r3, r3
 8002dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002df0:	4641      	mov	r1, r8
 8002df2:	1851      	adds	r1, r2, r1
 8002df4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002df6:	4649      	mov	r1, r9
 8002df8:	414b      	adcs	r3, r1
 8002dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e08:	4659      	mov	r1, fp
 8002e0a:	00cb      	lsls	r3, r1, #3
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e12:	4651      	mov	r1, sl
 8002e14:	00ca      	lsls	r2, r1, #3
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e24:	464b      	mov	r3, r9
 8002e26:	460a      	mov	r2, r1
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e44:	460b      	mov	r3, r1
 8002e46:	18db      	adds	r3, r3, r3
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e5a:	f7fd f9c1 	bl	80001e0 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <UART_SetConfig+0x2d4>)
 8002e64:	fba3 1302 	umull	r1, r3, r3, r2
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	2164      	movs	r1, #100	@ 0x64
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	3332      	adds	r3, #50	@ 0x32
 8002e76:	4a08      	ldr	r2, [pc, #32]	@ (8002e98 <UART_SetConfig+0x2d4>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4422      	add	r2, r4
 8002e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e8c:	e106      	b.n	800309c <UART_SetConfig+0x4d8>
 8002e8e:	bf00      	nop
 8002e90:	40011000 	.word	0x40011000
 8002e94:	40011400 	.word	0x40011400
 8002e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	6239      	str	r1, [r7, #32]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1854      	adds	r4, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb43 0501 	adc.w	r5, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	00eb      	lsls	r3, r5, #3
 8002ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed6:	00e2      	lsls	r2, r4, #3
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	4643      	mov	r3, r8
 8002ede:	18e3      	adds	r3, r4, r3
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	eb45 0303 	adc.w	r3, r5, r3
 8002eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002efa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	008b      	lsls	r3, r1, #2
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f14:	4621      	mov	r1, r4
 8002f16:	008a      	lsls	r2, r1, #2
 8002f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f1c:	f7fd f960 	bl	80001e0 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4b60      	ldr	r3, [pc, #384]	@ (80030a8 <UART_SetConfig+0x4e4>)
 8002f26:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	011c      	lsls	r4, r3, #4
 8002f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	61b9      	str	r1, [r7, #24]
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6139      	str	r1, [r7, #16]
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f84:	464b      	mov	r3, r9
 8002f86:	460a      	mov	r2, r1
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fa8:	4649      	mov	r1, r9
 8002faa:	008b      	lsls	r3, r1, #2
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	008a      	lsls	r2, r1, #2
 8002fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fba:	f7fd f911 	bl	80001e0 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4b38      	ldr	r3, [pc, #224]	@ (80030a8 <UART_SetConfig+0x4e4>)
 8002fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2264      	movs	r2, #100	@ 0x64
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	3332      	adds	r3, #50	@ 0x32
 8002fd8:	4a33      	ldr	r2, [pc, #204]	@ (80030a8 <UART_SetConfig+0x4e4>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe4:	441c      	add	r4, r3
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003004:	4641      	mov	r1, r8
 8003006:	1851      	adds	r1, r2, r1
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	4649      	mov	r1, r9
 800300c:	414b      	adcs	r3, r1
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800301c:	4659      	mov	r1, fp
 800301e:	00cb      	lsls	r3, r1, #3
 8003020:	4651      	mov	r1, sl
 8003022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003026:	4651      	mov	r1, sl
 8003028:	00ca      	lsls	r2, r1, #3
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	4603      	mov	r3, r0
 8003030:	4642      	mov	r2, r8
 8003032:	189b      	adds	r3, r3, r2
 8003034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003036:	464b      	mov	r3, r9
 8003038:	460a      	mov	r2, r1
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	663b      	str	r3, [r7, #96]	@ 0x60
 800304a:	667a      	str	r2, [r7, #100]	@ 0x64
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003058:	4649      	mov	r1, r9
 800305a:	008b      	lsls	r3, r1, #2
 800305c:	4641      	mov	r1, r8
 800305e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003062:	4641      	mov	r1, r8
 8003064:	008a      	lsls	r2, r1, #2
 8003066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800306a:	f7fd f8b9 	bl	80001e0 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <UART_SetConfig+0x4e4>)
 8003074:	fba3 1302 	umull	r1, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2164      	movs	r1, #100	@ 0x64
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	3332      	adds	r3, #50	@ 0x32
 8003086:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <UART_SetConfig+0x4e4>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 020f 	and.w	r2, r3, #15
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4422      	add	r2, r4
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030a2:	46bd      	mov	sp, r7
 80030a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a8:	51eb851f 	.word	0x51eb851f

080030ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f103 0208 	add.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f103 0208 	add.w	r2, r3, #8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f103 0208 	add.w	r2, r3, #8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d103      	bne.n	800316e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e00c      	b.n	8003188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3308      	adds	r3, #8
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e002      	b.n	800317c <vListInsert+0x2e>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	d2f6      	bcs.n	8003176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	601a      	str	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6892      	ldr	r2, [r2, #8]
 80031d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d103      	bne.n	80031f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1e5a      	subs	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003240:	f001 fcf2 	bl	8004c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	441a      	add	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	3b01      	subs	r3, #1
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	441a      	add	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	22ff      	movs	r2, #255	@ 0xff
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	22ff      	movs	r2, #255	@ 0xff
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d114      	bne.n	80032c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01a      	beq.n	80032d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3310      	adds	r3, #16
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 ffa6 	bl	80041f4 <xTaskRemoveFromEventList>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <xQueueGenericReset+0xd0>)
 80032b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	e009      	b.n	80032d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3310      	adds	r3, #16
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fef1 	bl	80030ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3324      	adds	r3, #36	@ 0x24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff feec 	bl	80030ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032d4:	f001 fcda 	bl	8004c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032d8:	2301      	movs	r3, #1
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	@ 0x28
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <xQueueGenericCreate+0x2c>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	613b      	str	r3, [r7, #16]
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3348      	adds	r3, #72	@ 0x48
 8003322:	4618      	mov	r0, r3
 8003324:	f001 fd60 	bl	8004de8 <pvPortMalloc>
 8003328:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d011      	beq.n	8003354 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3348      	adds	r3, #72	@ 0x48
 8003338:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003342:	79fa      	ldrb	r2, [r7, #7]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f805 	bl	800335e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003354:	69bb      	ldr	r3, [r7, #24]
	}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e002      	b.n	8003380 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800338c:	2101      	movs	r1, #1
 800338e:	69b8      	ldr	r0, [r7, #24]
 8003390:	f7ff ff40 	bl	8003214 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	@ 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033aa:	2300      	movs	r3, #0
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <xQueueGenericSend+0x34>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <xQueueGenericSend+0x42>
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <xQueueGenericSend+0x46>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <xQueueGenericSend+0x48>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <xQueueGenericSend+0x64>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d103      	bne.n	800340e <xQueueGenericSend+0x72>
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <xQueueGenericSend+0x76>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueGenericSend+0x78>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <xQueueGenericSend+0x94>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	623b      	str	r3, [r7, #32]
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003430:	f001 f8a0 	bl	8004574 <xTaskGetSchedulerState>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <xQueueGenericSend+0xa4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <xQueueGenericSend+0xa8>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <xQueueGenericSend+0xaa>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <xQueueGenericSend+0xc6>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	61fb      	str	r3, [r7, #28]
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003462:	f001 fbe1 	bl	8004c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <xQueueGenericSend+0xdc>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d129      	bne.n	80034cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800347e:	f000 f9b7 	bl	80037f0 <prvCopyDataToQueue>
 8003482:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	3324      	adds	r3, #36	@ 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f000 feaf 	bl	80041f4 <xTaskRemoveFromEventList>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800349c:	4b3f      	ldr	r3, [pc, #252]	@ (800359c <xQueueGenericSend+0x200>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	e00a      	b.n	80034c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034b4:	4b39      	ldr	r3, [pc, #228]	@ (800359c <xQueueGenericSend+0x200>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034c4:	f001 fbe2 	bl	8004c8c <vPortExitCritical>
				return pdPASS;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e063      	b.n	8003594 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034d2:	f001 fbdb 	bl	8004c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e05c      	b.n	8003594 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fee9 	bl	80042bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ee:	f001 fbcd 	bl	8004c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034f2:	f000 fc97 	bl	8003e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034f6:	f001 fb97 	bl	8004c28 <vPortEnterCritical>
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003500:	b25b      	sxtb	r3, r3
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d103      	bne.n	8003510 <xQueueGenericSend+0x174>
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003516:	b25b      	sxtb	r3, r3
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d103      	bne.n	8003526 <xQueueGenericSend+0x18a>
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003526:	f001 fbb1 	bl	8004c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800352a:	1d3a      	adds	r2, r7, #4
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fed8 	bl	80042e8 <xTaskCheckForTimeOut>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d124      	bne.n	8003588 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800353e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003540:	f000 fa28 	bl	8003994 <prvIsQueueFull>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	3310      	adds	r3, #16
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fe28 	bl	80041a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800355a:	f000 f9b3 	bl	80038c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800355e:	f000 fc6f 	bl	8003e40 <xTaskResumeAll>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af7c 	bne.w	8003462 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800356a:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <xQueueGenericSend+0x200>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	e772      	b.n	8003462 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800357c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800357e:	f000 f9a1 	bl	80038c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003582:	f000 fc5d 	bl	8003e40 <xTaskResumeAll>
 8003586:	e76c      	b.n	8003462 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800358a:	f000 f99b 	bl	80038c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800358e:	f000 fc57 	bl	8003e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003594:	4618      	mov	r0, r3
 8003596:	3738      	adds	r7, #56	@ 0x38
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	@ 0x38
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	623b      	str	r3, [r7, #32]
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	61fb      	str	r3, [r7, #28]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035f4:	f000 ffbe 	bl	8004574 <xTaskGetSchedulerState>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <xQueueSemaphoreTake+0x64>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <xQueueSemaphoreTake+0x68>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <xQueueSemaphoreTake+0x6a>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	61bb      	str	r3, [r7, #24]
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003626:	f001 faff 	bl	8004c28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d024      	beq.n	8003680 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800363e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003646:	f001 f941 	bl	80048cc <pvTaskIncrementMutexHeldCount>
 800364a:	4602      	mov	r2, r0
 800364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00f      	beq.n	8003678 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	3310      	adds	r3, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fdc9 	bl	80041f4 <xTaskRemoveFromEventList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003668:	4b54      	ldr	r3, [pc, #336]	@ (80037bc <xQueueSemaphoreTake+0x21c>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003678:	f001 fb08 	bl	8004c8c <vPortExitCritical>
				return pdPASS;
 800367c:	2301      	movs	r3, #1
 800367e:	e098      	b.n	80037b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d112      	bne.n	80036ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00b      	beq.n	80036a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	617b      	str	r3, [r7, #20]
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80036a4:	f001 faf2 	bl	8004c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e082      	b.n	80037b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fe00 	bl	80042bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036c0:	f001 fae4 	bl	8004c8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036c4:	f000 fbae 	bl	8003e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036c8:	f001 faae 	bl	8004c28 <vPortEnterCritical>
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d103      	bne.n	80036e2 <xQueueSemaphoreTake+0x142>
 80036da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e8:	b25b      	sxtb	r3, r3
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d103      	bne.n	80036f8 <xQueueSemaphoreTake+0x158>
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036f8:	f001 fac8 	bl	8004c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036fc:	463a      	mov	r2, r7
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fdef 	bl	80042e8 <xTaskCheckForTimeOut>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d132      	bne.n	8003776 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003712:	f000 f929 	bl	8003968 <prvIsQueueEmpty>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d026      	beq.n	800376a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800371c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003724:	f001 fa80 	bl	8004c28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 ff3f 	bl	80045b0 <xTaskPriorityInherit>
 8003732:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003734:	f001 faaa 	bl	8004c8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373a:	3324      	adds	r3, #36	@ 0x24
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fd31 	bl	80041a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003748:	f000 f8bc 	bl	80038c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800374c:	f000 fb78 	bl	8003e40 <xTaskResumeAll>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	f47f af67 	bne.w	8003626 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003758:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <xQueueSemaphoreTake+0x21c>)
 800375a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	e75d      	b.n	8003626 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800376a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800376c:	f000 f8aa 	bl	80038c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003770:	f000 fb66 	bl	8003e40 <xTaskResumeAll>
 8003774:	e757      	b.n	8003626 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003778:	f000 f8a4 	bl	80038c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800377c:	f000 fb60 	bl	8003e40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003782:	f000 f8f1 	bl	8003968 <prvIsQueueEmpty>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	f43f af4c 	beq.w	8003626 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003794:	f001 fa48 	bl	8004c28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800379a:	f000 f811 	bl	80037c0 <prvGetDisinheritPriorityAfterTimeout>
 800379e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80037a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f800 	bl	80047ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80037ac:	f001 fa6e 	bl	8004c8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3738      	adds	r7, #56	@ 0x38
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1c3 0307 	rsb	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e001      	b.n	80037e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037e2:	68fb      	ldr	r3, [r7, #12]
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d14d      	bne.n	80038b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 ff3e 	bl	800469c <xTaskPriorityDisinherit>
 8003820:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	e043      	b.n	80038b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d119      	bne.n	8003864 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6858      	ldr	r0, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	461a      	mov	r2, r3
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	f001 fcee 	bl	800521c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d32b      	bcc.n	80038b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e026      	b.n	80038b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68d8      	ldr	r0, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	461a      	mov	r2, r3
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	f001 fcd4 	bl	800521c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	425b      	negs	r3, r3
 800387e:	441a      	add	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d207      	bcs.n	80038a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	425b      	negs	r3, r3
 800389a:	441a      	add	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d105      	bne.n	80038b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038ba:	697b      	ldr	r3, [r7, #20]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038cc:	f001 f9ac 	bl	8004c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038d8:	e011      	b.n	80038fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3324      	adds	r3, #36	@ 0x24
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fc84 	bl	80041f4 <xTaskRemoveFromEventList>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038f2:	f000 fd5d 	bl	80043b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	dce9      	bgt.n	80038da <prvUnlockQueue+0x16>
 8003906:	e000      	b.n	800390a <prvUnlockQueue+0x46>
					break;
 8003908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	22ff      	movs	r2, #255	@ 0xff
 800390e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003912:	f001 f9bb 	bl	8004c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003916:	f001 f987 	bl	8004c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003922:	e011      	b.n	8003948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3310      	adds	r3, #16
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fc5f 	bl	80041f4 <xTaskRemoveFromEventList>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800393c:	f000 fd38 	bl	80043b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003940:	7bbb      	ldrb	r3, [r7, #14]
 8003942:	3b01      	subs	r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800394c:	2b00      	cmp	r3, #0
 800394e:	dce9      	bgt.n	8003924 <prvUnlockQueue+0x60>
 8003950:	e000      	b.n	8003954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	22ff      	movs	r2, #255	@ 0xff
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800395c:	f001 f996 	bl	8004c8c <vPortExitCritical>
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003970:	f001 f95a 	bl	8004c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e001      	b.n	8003986 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003986:	f001 f981 	bl	8004c8c <vPortExitCritical>

	return xReturn;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800399c:	f001 f944 	bl	8004c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d102      	bne.n	80039b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e001      	b.n	80039b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039b6:	f001 f969 	bl	8004c8c <vPortExitCritical>

	return xReturn;
 80039ba:	68fb      	ldr	r3, [r7, #12]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08e      	sub	sp, #56	@ 0x38
 80039c8:	af04      	add	r7, sp, #16
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10b      	bne.n	80039f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	623b      	str	r3, [r7, #32]
}
 80039ea:	bf00      	nop
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <xTaskCreateStatic+0x4a>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	61fb      	str	r3, [r7, #28]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a0e:	2354      	movs	r3, #84	@ 0x54
 8003a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b54      	cmp	r3, #84	@ 0x54
 8003a16:	d00b      	beq.n	8003a30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61bb      	str	r3, [r7, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01e      	beq.n	8003a76 <xTaskCreateStatic+0xb2>
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01b      	beq.n	8003a76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a50:	2300      	movs	r3, #0
 8003a52:	9303      	str	r3, [sp, #12]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f850 	bl	8003b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a70:	f000 f8d6 	bl	8003c20 <prvAddNewTaskToReadyList>
 8003a74:	e001      	b.n	8003a7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a7a:	697b      	ldr	r3, [r7, #20]
	}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3728      	adds	r7, #40	@ 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	@ 0x30
 8003a88:	af04      	add	r7, sp, #16
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f9a5 	bl	8004de8 <pvPortMalloc>
 8003a9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aa6:	2054      	movs	r0, #84	@ 0x54
 8003aa8:	f001 f99e 	bl	8004de8 <pvPortMalloc>
 8003aac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aba:	e005      	b.n	8003ac8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003abc:	6978      	ldr	r0, [r7, #20]
 8003abe:	f001 fa61 	bl	8004f84 <vPortFree>
 8003ac2:	e001      	b.n	8003ac8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d017      	beq.n	8003afe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f80e 	bl	8003b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af2:	69f8      	ldr	r0, [r7, #28]
 8003af4:	f000 f894 	bl	8003c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e002      	b.n	8003b04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b04:	69bb      	ldr	r3, [r7, #24]
	}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b088      	sub	sp, #32
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b26:	3b01      	subs	r3, #1
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f023 0307 	bic.w	r3, r3, #7
 8003b34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	617b      	str	r3, [r7, #20]
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01f      	beq.n	8003b9e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e012      	b.n	8003b8a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	7819      	ldrb	r1, [r3, #0]
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	3334      	adds	r3, #52	@ 0x34
 8003b74:	460a      	mov	r2, r1
 8003b76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d9e9      	bls.n	8003b64 <prvInitialiseNewTask+0x56>
 8003b90:	e000      	b.n	8003b94 <prvInitialiseNewTask+0x86>
			{
				break;
 8003b92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b9c:	e003      	b.n	8003ba6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d901      	bls.n	8003bb0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bac:	2306      	movs	r3, #6
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fa90 	bl	80030ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fa8b 	bl	80030ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bde:	f1c3 0207 	rsb	r2, r3, #7
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	2200      	movs	r2, #0
 8003bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	69b8      	ldr	r0, [r7, #24]
 8003c00:	f000 fede 	bl	80049c0 <pxPortInitialiseStack>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c16:	bf00      	nop
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c28:	f000 fffe 	bl	8004c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <prvAddNewTaskToReadyList+0xb8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a29      	ldr	r2, [pc, #164]	@ (8003cd8 <prvAddNewTaskToReadyList+0xb8>)
 8003c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c36:	4b29      	ldr	r3, [pc, #164]	@ (8003cdc <prvAddNewTaskToReadyList+0xbc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c3e:	4a27      	ldr	r2, [pc, #156]	@ (8003cdc <prvAddNewTaskToReadyList+0xbc>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c44:	4b24      	ldr	r3, [pc, #144]	@ (8003cd8 <prvAddNewTaskToReadyList+0xb8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d110      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c4c:	f000 fbd4 	bl	80043f8 <prvInitialiseTaskLists>
 8003c50:	e00d      	b.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c52:	4b23      	ldr	r3, [pc, #140]	@ (8003ce0 <prvAddNewTaskToReadyList+0xc0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c5a:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <prvAddNewTaskToReadyList+0xbc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d802      	bhi.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c68:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <prvAddNewTaskToReadyList+0xbc>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc4>)
 8003c76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a15      	ldr	r2, [pc, #84]	@ (8003cec <prvAddNewTaskToReadyList+0xcc>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7ff fa30 	bl	8003106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ca6:	f000 fff1 	bl	8004c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <prvAddNewTaskToReadyList+0xc0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <prvAddNewTaskToReadyList+0xbc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d207      	bcs.n	8003cd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <prvAddNewTaskToReadyList+0xd0>)
 8003cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000420 	.word	0x20000420
 8003cdc:	20000320 	.word	0x20000320
 8003ce0:	2000042c 	.word	0x2000042c
 8003ce4:	2000043c 	.word	0x2000043c
 8003ce8:	20000428 	.word	0x20000428
 8003cec:	20000324 	.word	0x20000324
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <vTaskDelay+0x64>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <vTaskDelay+0x32>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	60bb      	str	r3, [r7, #8]
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	e7fd      	b.n	8003d22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d26:	f000 f87d 	bl	8003e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fde1 	bl	80048f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d32:	f000 f885 	bl	8003e40 <xTaskResumeAll>
 8003d36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d3e:	4b07      	ldr	r3, [pc, #28]	@ (8003d5c <vTaskDelay+0x68>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000448 	.word	0x20000448
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d6e:	463a      	mov	r2, r7
 8003d70:	1d39      	adds	r1, r7, #4
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbaa 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	9202      	str	r2, [sp, #8]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	491f      	ldr	r1, [pc, #124]	@ (8003e0c <vTaskStartScheduler+0xac>)
 8003d90:	481f      	ldr	r0, [pc, #124]	@ (8003e10 <vTaskStartScheduler+0xb0>)
 8003d92:	f7ff fe17 	bl	80039c4 <xTaskCreateStatic>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a1e      	ldr	r2, [pc, #120]	@ (8003e14 <vTaskStartScheduler+0xb4>)
 8003d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <vTaskStartScheduler+0xb4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e001      	b.n	8003dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d116      	bne.n	8003de2 <vTaskStartScheduler+0x82>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	613b      	str	r3, [r7, #16]
}
 8003dc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc8:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <vTaskStartScheduler+0xb8>)
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dd0:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <vTaskStartScheduler+0xbc>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <vTaskStartScheduler+0xc0>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ddc:	f000 fe80 	bl	8004ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003de0:	e00f      	b.n	8003e02 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d10b      	bne.n	8003e02 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60fb      	str	r3, [r7, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <vTaskStartScheduler+0x9e>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08005338 	.word	0x08005338
 8003e10:	080043c9 	.word	0x080043c9
 8003e14:	20000444 	.word	0x20000444
 8003e18:	20000440 	.word	0x20000440
 8003e1c:	2000042c 	.word	0x2000042c
 8003e20:	20000424 	.word	0x20000424

08003e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <vTaskSuspendAll+0x18>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	4a03      	ldr	r2, [pc, #12]	@ (8003e3c <vTaskSuspendAll+0x18>)
 8003e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20000448 	.word	0x20000448

08003e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e4e:	4b42      	ldr	r3, [pc, #264]	@ (8003f58 <xTaskResumeAll+0x118>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <xTaskResumeAll+0x2e>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	603b      	str	r3, [r7, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e6e:	f000 fedb 	bl	8004c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e72:	4b39      	ldr	r3, [pc, #228]	@ (8003f58 <xTaskResumeAll+0x118>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4a37      	ldr	r2, [pc, #220]	@ (8003f58 <xTaskResumeAll+0x118>)
 8003e7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7c:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <xTaskResumeAll+0x118>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d161      	bne.n	8003f48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e84:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <xTaskResumeAll+0x11c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d05d      	beq.n	8003f48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8c:	e02e      	b.n	8003eec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8e:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <xTaskResumeAll+0x120>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3318      	adds	r3, #24
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f990 	bl	80031c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff f98b 	bl	80031c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	2201      	movs	r2, #1
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f64 <xTaskResumeAll+0x124>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <xTaskResumeAll+0x124>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <xTaskResumeAll+0x128>)
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7ff f917 	bl	8003106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003edc:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <xTaskResumeAll+0x12c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ee6:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <xTaskResumeAll+0x130>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eec:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <xTaskResumeAll+0x120>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1cc      	bne.n	8003e8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003efa:	f000 fb1b 	bl	8004534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <xTaskResumeAll+0x134>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d010      	beq.n	8003f2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f0a:	f000 f837 	bl	8003f7c <xTaskIncrementTick>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f14:	4b16      	ldr	r3, [pc, #88]	@ (8003f70 <xTaskResumeAll+0x130>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f1      	bne.n	8003f0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f26:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <xTaskResumeAll+0x134>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f2c:	4b10      	ldr	r3, [pc, #64]	@ (8003f70 <xTaskResumeAll+0x130>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <xTaskResumeAll+0x138>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f48:	f000 fea0 	bl	8004c8c <vPortExitCritical>

	return xAlreadyYielded;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000448 	.word	0x20000448
 8003f5c:	20000420 	.word	0x20000420
 8003f60:	200003e0 	.word	0x200003e0
 8003f64:	20000428 	.word	0x20000428
 8003f68:	20000324 	.word	0x20000324
 8003f6c:	20000320 	.word	0x20000320
 8003f70:	20000434 	.word	0x20000434
 8003f74:	20000430 	.word	0x20000430
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f86:	4b4f      	ldr	r3, [pc, #316]	@ (80040c4 <xTaskIncrementTick+0x148>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 808f 	bne.w	80040ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f90:	4b4d      	ldr	r3, [pc, #308]	@ (80040c8 <xTaskIncrementTick+0x14c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f98:	4a4b      	ldr	r2, [pc, #300]	@ (80040c8 <xTaskIncrementTick+0x14c>)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fa4:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <xTaskIncrementTick+0x150>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	603b      	str	r3, [r7, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xTaskIncrementTick+0x46>
 8003fc6:	4b41      	ldr	r3, [pc, #260]	@ (80040cc <xTaskIncrementTick+0x150>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	4b40      	ldr	r3, [pc, #256]	@ (80040d0 <xTaskIncrementTick+0x154>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80040cc <xTaskIncrementTick+0x150>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80040d0 <xTaskIncrementTick+0x154>)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b3e      	ldr	r3, [pc, #248]	@ (80040d4 <xTaskIncrementTick+0x158>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80040d4 <xTaskIncrementTick+0x158>)
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	f000 faa6 	bl	8004534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80040d8 <xTaskIncrementTick+0x15c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d348      	bcc.n	8004084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ff2:	4b36      	ldr	r3, [pc, #216]	@ (80040cc <xTaskIncrementTick+0x150>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffc:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <xTaskIncrementTick+0x15c>)
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	601a      	str	r2, [r3, #0]
					break;
 8004004:	e03e      	b.n	8004084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004006:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <xTaskIncrementTick+0x150>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d203      	bcs.n	8004026 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800401e:	4a2e      	ldr	r2, [pc, #184]	@ (80040d8 <xTaskIncrementTick+0x15c>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004024:	e02e      	b.n	8004084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3304      	adds	r3, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff f8c8 	bl	80031c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f8bf 	bl	80031c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	2201      	movs	r2, #1
 8004048:	409a      	lsls	r2, r3
 800404a:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <xTaskIncrementTick+0x160>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	4a22      	ldr	r2, [pc, #136]	@ (80040dc <xTaskIncrementTick+0x160>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <xTaskIncrementTick+0x164>)
 8004062:	441a      	add	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7ff f84b 	bl	8003106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004074:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <xTaskIncrementTick+0x168>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	429a      	cmp	r2, r3
 800407c:	d3b9      	bcc.n	8003ff2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800407e:	2301      	movs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004082:	e7b6      	b.n	8003ff2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004084:	4b17      	ldr	r3, [pc, #92]	@ (80040e4 <xTaskIncrementTick+0x168>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408a:	4915      	ldr	r1, [pc, #84]	@ (80040e0 <xTaskIncrementTick+0x164>)
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d901      	bls.n	80040a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040a0:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <xTaskIncrementTick+0x16c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e004      	b.n	80040b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040ae:	4b0f      	ldr	r3, [pc, #60]	@ (80040ec <xTaskIncrementTick+0x170>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	4a0d      	ldr	r2, [pc, #52]	@ (80040ec <xTaskIncrementTick+0x170>)
 80040b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040b8:	697b      	ldr	r3, [r7, #20]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000448 	.word	0x20000448
 80040c8:	20000424 	.word	0x20000424
 80040cc:	200003d8 	.word	0x200003d8
 80040d0:	200003dc 	.word	0x200003dc
 80040d4:	20000438 	.word	0x20000438
 80040d8:	20000440 	.word	0x20000440
 80040dc:	20000428 	.word	0x20000428
 80040e0:	20000324 	.word	0x20000324
 80040e4:	20000320 	.word	0x20000320
 80040e8:	20000434 	.word	0x20000434
 80040ec:	20000430 	.word	0x20000430

080040f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040f6:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <vTaskSwitchContext+0xa4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040fe:	4b26      	ldr	r3, [pc, #152]	@ (8004198 <vTaskSwitchContext+0xa8>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004104:	e040      	b.n	8004188 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <vTaskSwitchContext+0xa8>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410c:	4b23      	ldr	r3, [pc, #140]	@ (800419c <vTaskSwitchContext+0xac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	f1c3 031f 	rsb	r3, r3, #31
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	491f      	ldr	r1, [pc, #124]	@ (80041a0 <vTaskSwitchContext+0xb0>)
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	607b      	str	r3, [r7, #4]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <vTaskSwitchContext+0x5a>
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <vTaskSwitchContext+0xb0>)
 800415a:	4413      	add	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3308      	adds	r3, #8
 8004170:	429a      	cmp	r2, r3
 8004172:	d104      	bne.n	800417e <vTaskSwitchContext+0x8e>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a07      	ldr	r2, [pc, #28]	@ (80041a4 <vTaskSwitchContext+0xb4>)
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20000448 	.word	0x20000448
 8004198:	20000434 	.word	0x20000434
 800419c:	20000428 	.word	0x20000428
 80041a0:	20000324 	.word	0x20000324
 80041a4:	20000320 	.word	0x20000320

080041a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60fb      	str	r3, [r7, #12]
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	e7fd      	b.n	80041cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <vTaskPlaceOnEventList+0x48>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3318      	adds	r3, #24
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fe ffb8 	bl	800314e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041de:	2101      	movs	r1, #1
 80041e0:	6838      	ldr	r0, [r7, #0]
 80041e2:	f000 fb87 	bl	80048f4 <prvAddCurrentTaskToDelayedList>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000320 	.word	0x20000320

080041f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3318      	adds	r3, #24
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe ffca 	bl	80031c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422c:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <xTaskRemoveFromEventList+0xb0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d11c      	bne.n	800426e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe ffc1 	bl	80031c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	2201      	movs	r2, #1
 8004244:	409a      	lsls	r2, r3
 8004246:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <xTaskRemoveFromEventList+0xb4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	4a16      	ldr	r2, [pc, #88]	@ (80042a8 <xTaskRemoveFromEventList+0xb4>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4a13      	ldr	r2, [pc, #76]	@ (80042ac <xTaskRemoveFromEventList+0xb8>)
 800425e:	441a      	add	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f7fe ff4d 	bl	8003106 <vListInsertEnd>
 800426c:	e005      	b.n	800427a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3318      	adds	r3, #24
 8004272:	4619      	mov	r1, r3
 8004274:	480e      	ldr	r0, [pc, #56]	@ (80042b0 <xTaskRemoveFromEventList+0xbc>)
 8004276:	f7fe ff46 	bl	8003106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <xTaskRemoveFromEventList+0xc0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	429a      	cmp	r2, r3
 8004286:	d905      	bls.n	8004294 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800428c:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <xTaskRemoveFromEventList+0xc4>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e001      	b.n	8004298 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004298:	697b      	ldr	r3, [r7, #20]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000448 	.word	0x20000448
 80042a8:	20000428 	.word	0x20000428
 80042ac:	20000324 	.word	0x20000324
 80042b0:	200003e0 	.word	0x200003e0
 80042b4:	20000320 	.word	0x20000320
 80042b8:	20000434 	.word	0x20000434

080042bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042c4:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <vTaskInternalSetTimeOutState+0x24>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042cc:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <vTaskInternalSetTimeOutState+0x28>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000438 	.word	0x20000438
 80042e4:	20000424 	.word	0x20000424

080042e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	613b      	str	r3, [r7, #16]
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60fb      	str	r3, [r7, #12]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800432e:	f000 fc7b 	bl	8004c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004332:	4b1d      	ldr	r3, [pc, #116]	@ (80043a8 <xTaskCheckForTimeOut+0xc0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d102      	bne.n	8004352 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e023      	b.n	800439a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <xTaskCheckForTimeOut+0xc4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d007      	beq.n	800436e <xTaskCheckForTimeOut+0x86>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e015      	b.n	800439a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	429a      	cmp	r2, r3
 8004376:	d20b      	bcs.n	8004390 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	1ad2      	subs	r2, r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff99 	bl	80042bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e004      	b.n	800439a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004396:	2301      	movs	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800439a:	f000 fc77 	bl	8004c8c <vPortExitCritical>

	return xReturn;
 800439e:	69fb      	ldr	r3, [r7, #28]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000424 	.word	0x20000424
 80043ac:	20000438 	.word	0x20000438

080043b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043b4:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <vTaskMissedYield+0x14>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	20000434 	.word	0x20000434

080043c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043d0:	f000 f852 	bl	8004478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <prvIdleTask+0x28>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d9f9      	bls.n	80043d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <prvIdleTask+0x2c>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043ec:	e7f0      	b.n	80043d0 <prvIdleTask+0x8>
 80043ee:	bf00      	nop
 80043f0:	20000324 	.word	0x20000324
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	e00c      	b.n	800441e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <prvInitialiseTaskLists+0x60>)
 8004410:	4413      	add	r3, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fe4a 	bl	80030ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3301      	adds	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d9ef      	bls.n	8004404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004424:	480d      	ldr	r0, [pc, #52]	@ (800445c <prvInitialiseTaskLists+0x64>)
 8004426:	f7fe fe41 	bl	80030ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800442a:	480d      	ldr	r0, [pc, #52]	@ (8004460 <prvInitialiseTaskLists+0x68>)
 800442c:	f7fe fe3e 	bl	80030ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004430:	480c      	ldr	r0, [pc, #48]	@ (8004464 <prvInitialiseTaskLists+0x6c>)
 8004432:	f7fe fe3b 	bl	80030ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004436:	480c      	ldr	r0, [pc, #48]	@ (8004468 <prvInitialiseTaskLists+0x70>)
 8004438:	f7fe fe38 	bl	80030ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800443c:	480b      	ldr	r0, [pc, #44]	@ (800446c <prvInitialiseTaskLists+0x74>)
 800443e:	f7fe fe35 	bl	80030ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <prvInitialiseTaskLists+0x78>)
 8004444:	4a05      	ldr	r2, [pc, #20]	@ (800445c <prvInitialiseTaskLists+0x64>)
 8004446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004448:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <prvInitialiseTaskLists+0x7c>)
 800444a:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <prvInitialiseTaskLists+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000324 	.word	0x20000324
 800445c:	200003b0 	.word	0x200003b0
 8004460:	200003c4 	.word	0x200003c4
 8004464:	200003e0 	.word	0x200003e0
 8004468:	200003f4 	.word	0x200003f4
 800446c:	2000040c 	.word	0x2000040c
 8004470:	200003d8 	.word	0x200003d8
 8004474:	200003dc 	.word	0x200003dc

08004478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800447e:	e019      	b.n	80044b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004480:	f000 fbd2 	bl	8004c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004484:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <prvCheckTasksWaitingTermination+0x50>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fe95 	bl	80031c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004496:	4b0d      	ldr	r3, [pc, #52]	@ (80044cc <prvCheckTasksWaitingTermination+0x54>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a0b      	ldr	r2, [pc, #44]	@ (80044cc <prvCheckTasksWaitingTermination+0x54>)
 800449e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <prvCheckTasksWaitingTermination+0x58>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <prvCheckTasksWaitingTermination+0x58>)
 80044a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044aa:	f000 fbef 	bl	8004c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f810 	bl	80044d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044b4:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <prvCheckTasksWaitingTermination+0x58>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e1      	bne.n	8004480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200003f4 	.word	0x200003f4
 80044cc:	20000420 	.word	0x20000420
 80044d0:	20000408 	.word	0x20000408

080044d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fd4a 	bl	8004f84 <vPortFree>
				vPortFree( pxTCB );
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fd47 	bl	8004f84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f6:	e019      	b.n	800452c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d103      	bne.n	800450a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fd3e 	bl	8004f84 <vPortFree>
	}
 8004508:	e010      	b.n	800452c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004510:	2b02      	cmp	r3, #2
 8004512:	d00b      	beq.n	800452c <prvDeleteTCB+0x58>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60fb      	str	r3, [r7, #12]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <prvDeleteTCB+0x54>
	}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453a:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <prvResetNextTaskUnblockTime+0x38>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <prvResetNextTaskUnblockTime+0x3c>)
 8004546:	f04f 32ff 	mov.w	r2, #4294967295
 800454a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800454c:	e008      	b.n	8004560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <prvResetNextTaskUnblockTime+0x38>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <prvResetNextTaskUnblockTime+0x3c>)
 800455e:	6013      	str	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	200003d8 	.word	0x200003d8
 8004570:	20000440 	.word	0x20000440

08004574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <xTaskGetSchedulerState+0x34>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004582:	2301      	movs	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	e008      	b.n	800459a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004588:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <xTaskGetSchedulerState+0x38>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004590:	2302      	movs	r3, #2
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	e001      	b.n	800459a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800459a:	687b      	ldr	r3, [r7, #4]
	}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	2000042c 	.word	0x2000042c
 80045ac:	20000448 	.word	0x20000448

080045b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d05e      	beq.n	8004684 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	4b31      	ldr	r3, [pc, #196]	@ (8004690 <xTaskPriorityInherit+0xe0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d24e      	bcs.n	8004672 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	db06      	blt.n	80045ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004690 <xTaskPriorityInherit+0xe0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	f1c3 0207 	rsb	r2, r3, #7
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	6959      	ldr	r1, [r3, #20]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a26      	ldr	r2, [pc, #152]	@ (8004694 <xTaskPriorityInherit+0xe4>)
 80045fc:	4413      	add	r3, r2
 80045fe:	4299      	cmp	r1, r3
 8004600:	d12f      	bne.n	8004662 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3304      	adds	r3, #4
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fdda 	bl	80031c0 <uxListRemove>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	4b1e      	ldr	r3, [pc, #120]	@ (8004698 <xTaskPriorityInherit+0xe8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4013      	ands	r3, r2
 8004624:	4a1c      	ldr	r2, [pc, #112]	@ (8004698 <xTaskPriorityInherit+0xe8>)
 8004626:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004628:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <xTaskPriorityInherit+0xe0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	2201      	movs	r2, #1
 8004638:	409a      	lsls	r2, r3
 800463a:	4b17      	ldr	r3, [pc, #92]	@ (8004698 <xTaskPriorityInherit+0xe8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <xTaskPriorityInherit+0xe8>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a10      	ldr	r2, [pc, #64]	@ (8004694 <xTaskPriorityInherit+0xe4>)
 8004652:	441a      	add	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe fd53 	bl	8003106 <vListInsertEnd>
 8004660:	e004      	b.n	800466c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004662:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <xTaskPriorityInherit+0xe0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e008      	b.n	8004684 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004676:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <xTaskPriorityInherit+0xe0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d201      	bcs.n	8004684 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004684:	68fb      	ldr	r3, [r7, #12]
	}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000320 	.word	0x20000320
 8004694:	20000324 	.word	0x20000324
 8004698:	20000428 	.word	0x20000428

0800469c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d070      	beq.n	8004794 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046b2:	4b3b      	ldr	r3, [pc, #236]	@ (80047a0 <xTaskPriorityDisinherit+0x104>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d00b      	beq.n	80046d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	60fb      	str	r3, [r7, #12]
}
 80046ce:	bf00      	nop
 80046d0:	bf00      	nop
 80046d2:	e7fd      	b.n	80046d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f8:	1e5a      	subs	r2, r3, #1
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	429a      	cmp	r2, r3
 8004708:	d044      	beq.n	8004794 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d140      	bne.n	8004794 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	3304      	adds	r3, #4
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fd52 	bl	80031c0 <uxListRemove>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d115      	bne.n	800474e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004726:	491f      	ldr	r1, [pc, #124]	@ (80047a4 <xTaskPriorityDisinherit+0x108>)
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xTaskPriorityDisinherit+0xb2>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	2201      	movs	r2, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	4b18      	ldr	r3, [pc, #96]	@ (80047a8 <xTaskPriorityDisinherit+0x10c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4013      	ands	r3, r2
 800474a:	4a17      	ldr	r2, [pc, #92]	@ (80047a8 <xTaskPriorityDisinherit+0x10c>)
 800474c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f1c3 0207 	rsb	r2, r3, #7
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	2201      	movs	r2, #1
 8004768:	409a      	lsls	r2, r3
 800476a:	4b0f      	ldr	r3, [pc, #60]	@ (80047a8 <xTaskPriorityDisinherit+0x10c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	4a0d      	ldr	r2, [pc, #52]	@ (80047a8 <xTaskPriorityDisinherit+0x10c>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4a08      	ldr	r2, [pc, #32]	@ (80047a4 <xTaskPriorityDisinherit+0x108>)
 8004782:	441a      	add	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe fcbb 	bl	8003106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004794:	697b      	ldr	r3, [r7, #20]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000320 	.word	0x20000320
 80047a4:	20000324 	.word	0x20000324
 80047a8:	20000428 	.word	0x20000428

080047ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d079      	beq.n	80048b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d902      	bls.n	80047f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e002      	b.n	80047fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	429a      	cmp	r2, r3
 8004802:	d059      	beq.n	80048b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	429a      	cmp	r2, r3
 800480c:	d154      	bne.n	80048b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800480e:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	429a      	cmp	r2, r3
 8004816:	d10b      	bne.n	8004830 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60bb      	str	r3, [r7, #8]
}
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	e7fd      	b.n	800482c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	db04      	blt.n	800484e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f1c3 0207 	rsb	r2, r3, #7
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	6959      	ldr	r1, [r3, #20]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800485e:	4413      	add	r3, r2
 8004860:	4299      	cmp	r1, r3
 8004862:	d129      	bne.n	80048b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	3304      	adds	r3, #4
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe fca9 	bl	80031c0 <uxListRemove>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	2201      	movs	r2, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4013      	ands	r3, r2
 8004886:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004888:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	2201      	movs	r2, #1
 8004890:	409a      	lsls	r2, r3
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	4a0b      	ldr	r2, [pc, #44]	@ (80048c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a06      	ldr	r2, [pc, #24]	@ (80048c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048aa:	441a      	add	r2, r3
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fe fc27 	bl	8003106 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048b8:	bf00      	nop
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000320 	.word	0x20000320
 80048c4:	20000324 	.word	0x20000324
 80048c8:	20000428 	.word	0x20000428

080048cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048d8:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048de:	3201      	adds	r2, #1
 80048e0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80048e2:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80048e4:	681b      	ldr	r3, [r3, #0]
	}
 80048e6:	4618      	mov	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000320 	.word	0x20000320

080048f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048fe:	4b29      	ldr	r3, [pc, #164]	@ (80049a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004904:	4b28      	ldr	r3, [pc, #160]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fc58 	bl	80031c0 <uxListRemove>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004916:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	2201      	movs	r2, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	4b21      	ldr	r3, [pc, #132]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4013      	ands	r3, r2
 800492a:	4a20      	ldr	r2, [pc, #128]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800492c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d10a      	bne.n	800494c <prvAddCurrentTaskToDelayedList+0x58>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493c:	4b1a      	ldr	r3, [pc, #104]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3304      	adds	r3, #4
 8004942:	4619      	mov	r1, r3
 8004944:	481a      	ldr	r0, [pc, #104]	@ (80049b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004946:	f7fe fbde 	bl	8003106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800494a:	e026      	b.n	800499a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004954:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d209      	bcs.n	8004978 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f7fe fbec 	bl	800314e <vListInsert>
}
 8004976:	e010      	b.n	800499a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004978:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fe fbe2 	bl	800314e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800498a:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d202      	bcs.n	800499a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004994:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6013      	str	r3, [r2, #0]
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000424 	.word	0x20000424
 80049a8:	20000320 	.word	0x20000320
 80049ac:	20000428 	.word	0x20000428
 80049b0:	2000040c 	.word	0x2000040c
 80049b4:	200003dc 	.word	0x200003dc
 80049b8:	200003d8 	.word	0x200003d8
 80049bc:	20000440 	.word	0x20000440

080049c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3b04      	subs	r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b04      	subs	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004a24 <pxPortInitialiseStack+0x64>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3b14      	subs	r3, #20
 80049fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3b04      	subs	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f06f 0202 	mvn.w	r2, #2
 8004a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3b20      	subs	r3, #32
 8004a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	08004a29 	.word	0x08004a29

08004a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a32:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <prvTaskExitError+0x58>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d00b      	beq.n	8004a54 <prvTaskExitError+0x2c>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60fb      	str	r3, [r7, #12]
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <prvTaskExitError+0x28>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	60bb      	str	r3, [r7, #8]
}
 8004a66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a68:	bf00      	nop
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0fc      	beq.n	8004a6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c
	...

08004a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a90:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <pxCurrentTCBConst2>)
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	6808      	ldr	r0, [r1, #0]
 8004a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9a:	f380 8809 	msr	PSP, r0
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8811 	msr	BASEPRI, r0
 8004aaa:	4770      	bx	lr
 8004aac:	f3af 8000 	nop.w

08004ab0 <pxCurrentTCBConst2>:
 8004ab0:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop

08004ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ab8:	4808      	ldr	r0, [pc, #32]	@ (8004adc <prvPortStartFirstTask+0x24>)
 8004aba:	6800      	ldr	r0, [r0, #0]
 8004abc:	6800      	ldr	r0, [r0, #0]
 8004abe:	f380 8808 	msr	MSP, r0
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8814 	msr	CONTROL, r0
 8004aca:	b662      	cpsie	i
 8004acc:	b661      	cpsie	f
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	df00      	svc	0
 8004ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ada:	bf00      	nop
 8004adc:	e000ed08 	.word	0xe000ed08

08004ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ae6:	4b47      	ldr	r3, [pc, #284]	@ (8004c04 <xPortStartScheduler+0x124>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a47      	ldr	r2, [pc, #284]	@ (8004c08 <xPortStartScheduler+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10b      	bne.n	8004b08 <xPortStartScheduler+0x28>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b08:	4b3e      	ldr	r3, [pc, #248]	@ (8004c04 <xPortStartScheduler+0x124>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c0c <xPortStartScheduler+0x12c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10b      	bne.n	8004b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60fb      	str	r3, [r7, #12]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b2a:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <xPortStartScheduler+0x130>)
 8004b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	22ff      	movs	r2, #255	@ 0xff
 8004b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4b31      	ldr	r3, [pc, #196]	@ (8004c14 <xPortStartScheduler+0x134>)
 8004b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b52:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b54:	2207      	movs	r2, #7
 8004b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b58:	e009      	b.n	8004b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a2d      	ldr	r2, [pc, #180]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d0ef      	beq.n	8004b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b7a:	4b27      	ldr	r3, [pc, #156]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d00b      	beq.n	8004b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60bb      	str	r3, [r7, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bb0:	4a19      	ldr	r2, [pc, #100]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bbc:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a16      	ldr	r2, [pc, #88]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bc8:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bd4:	f000 f8da 	bl	8004d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <xPortStartScheduler+0x140>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bde:	f000 f8f9 	bl	8004dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <xPortStartScheduler+0x144>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c24 <xPortStartScheduler+0x144>)
 8004be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bee:	f7ff ff63 	bl	8004ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bf2:	f7ff fa7d 	bl	80040f0 <vTaskSwitchContext>
	prvTaskExitError();
 8004bf6:	f7ff ff17 	bl	8004a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	e000ed00 	.word	0xe000ed00
 8004c08:	410fc271 	.word	0x410fc271
 8004c0c:	410fc270 	.word	0x410fc270
 8004c10:	e000e400 	.word	0xe000e400
 8004c14:	2000044c 	.word	0x2000044c
 8004c18:	20000450 	.word	0x20000450
 8004c1c:	e000ed20 	.word	0xe000ed20
 8004c20:	2000000c 	.word	0x2000000c
 8004c24:	e000ef34 	.word	0xe000ef34

08004c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	607b      	str	r3, [r7, #4]
}
 8004c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c42:	4b10      	ldr	r3, [pc, #64]	@ (8004c84 <vPortEnterCritical+0x5c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <vPortEnterCritical+0x5c>)
 8004c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <vPortEnterCritical+0x5c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d110      	bne.n	8004c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c54:	4b0c      	ldr	r3, [pc, #48]	@ (8004c88 <vPortEnterCritical+0x60>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	603b      	str	r3, [r7, #0]
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	e7fd      	b.n	8004c72 <vPortEnterCritical+0x4a>
	}
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2000000c 	.word	0x2000000c
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <vPortExitCritical+0x50>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <vPortExitCritical+0x26>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	607b      	str	r3, [r7, #4]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <vPortExitCritical+0x50>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <vPortExitCritical+0x50>)
 8004cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <vPortExitCritical+0x50>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <vPortExitCritical+0x44>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	2000000c 	.word	0x2000000c

08004ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ce0:	f3ef 8009 	mrs	r0, PSP
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <pxCurrentTCBConst>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	f01e 0f10 	tst.w	lr, #16
 8004cf0:	bf08      	it	eq
 8004cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	6010      	str	r0, [r2, #0]
 8004cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d04:	f380 8811 	msr	BASEPRI, r0
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f7ff f9ee 	bl	80040f0 <vTaskSwitchContext>
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f380 8811 	msr	BASEPRI, r0
 8004d1c:	bc09      	pop	{r0, r3}
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d26:	f01e 0f10 	tst.w	lr, #16
 8004d2a:	bf08      	it	eq
 8004d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d30:	f380 8809 	msr	PSP, r0
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst>:
 8004d40:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	607b      	str	r3, [r7, #4]
}
 8004d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d62:	f7ff f90b 	bl	8003f7c <xTaskIncrementTick>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <SysTick_Handler+0x40>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f383 8811 	msr	BASEPRI, r3
}
 8004d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <vPortSetupTimerInterrupt+0x34>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <vPortSetupTimerInterrupt+0x38>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <vPortSetupTimerInterrupt+0x3c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0a      	ldr	r2, [pc, #40]	@ (8004dcc <vPortSetupTimerInterrupt+0x40>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <vPortSetupTimerInterrupt+0x44>)
 8004daa:	3b01      	subs	r3, #1
 8004dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dae:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <vPortSetupTimerInterrupt+0x34>)
 8004db0:	2207      	movs	r2, #7
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000e010 	.word	0xe000e010
 8004dc4:	e000e018 	.word	0xe000e018
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	10624dd3 	.word	0x10624dd3
 8004dd0:	e000e014 	.word	0xe000e014

08004dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004de4 <vPortEnableVFP+0x10>
 8004dd8:	6801      	ldr	r1, [r0, #0]
 8004dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dde:	6001      	str	r1, [r0, #0]
 8004de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004de2:	bf00      	nop
 8004de4:	e000ed88 	.word	0xe000ed88

08004de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	@ 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004df4:	f7ff f816 	bl	8003e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004df8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f6c <pvPortMalloc+0x184>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e00:	f000 f924 	bl	800504c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e04:	4b5a      	ldr	r3, [pc, #360]	@ (8004f70 <pvPortMalloc+0x188>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f040 8095 	bne.w	8004f3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01e      	beq.n	8004e56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e18:	2208      	movs	r2, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f023 0307 	bic.w	r3, r3, #7
 8004e30:	3308      	adds	r3, #8
 8004e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <pvPortMalloc+0x6e>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	617b      	str	r3, [r7, #20]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d06f      	beq.n	8004f3c <pvPortMalloc+0x154>
 8004e5c:	4b45      	ldr	r3, [pc, #276]	@ (8004f74 <pvPortMalloc+0x18c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d86a      	bhi.n	8004f3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e66:	4b44      	ldr	r3, [pc, #272]	@ (8004f78 <pvPortMalloc+0x190>)
 8004e68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e6a:	4b43      	ldr	r3, [pc, #268]	@ (8004f78 <pvPortMalloc+0x190>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e70:	e004      	b.n	8004e7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d903      	bls.n	8004e8e <pvPortMalloc+0xa6>
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f1      	bne.n	8004e72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e8e:	4b37      	ldr	r3, [pc, #220]	@ (8004f6c <pvPortMalloc+0x184>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d051      	beq.n	8004f3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	4413      	add	r3, r2
 8004ea0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad2      	subs	r2, r2, r3
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d920      	bls.n	8004efc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <pvPortMalloc+0xfc>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	613b      	str	r3, [r7, #16]
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ef6:	69b8      	ldr	r0, [r7, #24]
 8004ef8:	f000 f90a 	bl	8005110 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <pvPortMalloc+0x18c>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <pvPortMalloc+0x18c>)
 8004f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f74 <pvPortMalloc+0x18c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <pvPortMalloc+0x194>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d203      	bcs.n	8004f1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f16:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <pvPortMalloc+0x18c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	@ (8004f7c <pvPortMalloc+0x194>)
 8004f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	4b13      	ldr	r3, [pc, #76]	@ (8004f70 <pvPortMalloc+0x188>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f32:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <pvPortMalloc+0x198>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	4a11      	ldr	r2, [pc, #68]	@ (8004f80 <pvPortMalloc+0x198>)
 8004f3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f3c:	f7fe ff80 	bl	8003e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <pvPortMalloc+0x17a>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60fb      	str	r3, [r7, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <pvPortMalloc+0x176>
	return pvReturn;
 8004f62:	69fb      	ldr	r3, [r7, #28]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3728      	adds	r7, #40	@ 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	2000405c 	.word	0x2000405c
 8004f70:	20004070 	.word	0x20004070
 8004f74:	20004060 	.word	0x20004060
 8004f78:	20004054 	.word	0x20004054
 8004f7c:	20004064 	.word	0x20004064
 8004f80:	20004068 	.word	0x20004068

08004f84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d04f      	beq.n	8005036 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f96:	2308      	movs	r3, #8
 8004f98:	425b      	negs	r3, r3
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4b25      	ldr	r3, [pc, #148]	@ (8005040 <vPortFree+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <vPortFree+0x46>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60fb      	str	r3, [r7, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <vPortFree+0x66>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	60bb      	str	r3, [r7, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <vPortFree+0xbc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01e      	beq.n	8005036 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11a      	bne.n	8005036 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <vPortFree+0xbc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	43db      	mvns	r3, r3
 800500a:	401a      	ands	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005010:	f7fe ff08 	bl	8003e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <vPortFree+0xc0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4413      	add	r3, r2
 800501e:	4a09      	ldr	r2, [pc, #36]	@ (8005044 <vPortFree+0xc0>)
 8005020:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005022:	6938      	ldr	r0, [r7, #16]
 8005024:	f000 f874 	bl	8005110 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005028:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <vPortFree+0xc4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	4a06      	ldr	r2, [pc, #24]	@ (8005048 <vPortFree+0xc4>)
 8005030:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005032:	f7fe ff05 	bl	8003e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20004070 	.word	0x20004070
 8005044:	20004060 	.word	0x20004060
 8005048:	2000406c 	.word	0x2000406c

0800504c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005052:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005056:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005058:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <prvHeapInit+0xac>)
 800505a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00c      	beq.n	8005080 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3307      	adds	r3, #7
 800506a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a1f      	ldr	r2, [pc, #124]	@ (80050f8 <prvHeapInit+0xac>)
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005084:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <prvHeapInit+0xb0>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800508a:	4b1c      	ldr	r3, [pc, #112]	@ (80050fc <prvHeapInit+0xb0>)
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4413      	add	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005098:	2208      	movs	r2, #8
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <prvHeapInit+0xb4>)
 80050ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050ae:	4b14      	ldr	r3, [pc, #80]	@ (8005100 <prvHeapInit+0xb4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <prvHeapInit+0xb4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	1ad2      	subs	r2, r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <prvHeapInit+0xb4>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <prvHeapInit+0xb8>)
 80050da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <prvHeapInit+0xbc>)
 80050e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <prvHeapInit+0xc0>)
 80050e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	20000454 	.word	0x20000454
 80050fc:	20004054 	.word	0x20004054
 8005100:	2000405c 	.word	0x2000405c
 8005104:	20004064 	.word	0x20004064
 8005108:	20004060 	.word	0x20004060
 800510c:	20004070 	.word	0x20004070

08005110 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005118:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <prvInsertBlockIntoFreeList+0xac>)
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e002      	b.n	8005124 <prvInsertBlockIntoFreeList+0x14>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d8f7      	bhi.n	800511e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d108      	bne.n	8005152 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	441a      	add	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d118      	bne.n	8005198 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <prvInsertBlockIntoFreeList+0xb0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d00d      	beq.n	800518e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e008      	b.n	80051a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800518e:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <prvInsertBlockIntoFreeList+0xb0>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e003      	b.n	80051a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d002      	beq.n	80051ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20004054 	.word	0x20004054
 80051c0:	2000405c 	.word	0x2000405c

080051c4 <memset>:
 80051c4:	4402      	add	r2, r0
 80051c6:	4603      	mov	r3, r0
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d100      	bne.n	80051ce <memset+0xa>
 80051cc:	4770      	bx	lr
 80051ce:	f803 1b01 	strb.w	r1, [r3], #1
 80051d2:	e7f9      	b.n	80051c8 <memset+0x4>

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	@ (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 f826 	bl	8005238 <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	08005360 	.word	0x08005360
 8005210:	08005360 	.word	0x08005360
 8005214:	08005360 	.word	0x08005360
 8005218:	08005364 	.word	0x08005364

0800521c <memcpy>:
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	f100 33ff 	add.w	r3, r0, #4294967295
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	4770      	bx	lr
 8005228:	b510      	push	{r4, lr}
 800522a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005232:	4291      	cmp	r1, r2
 8005234:	d1f9      	bne.n	800522a <memcpy+0xe>
 8005236:	bd10      	pop	{r4, pc}

08005238 <_init>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr

08005244 <_fini>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr
