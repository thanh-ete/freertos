
freertos_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003664  08003664  00004664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  00005050  2**0
                  CONTENTS
  4 .ARM          00000008  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036fc  080036fc  00005050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08003704  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005050  2**0
                  CONTENTS
 10 .bss          0000401c  20000050  20000050  00005050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000406c  2000406c  00005050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be25  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002090  00000000  00000000  00010ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  00012f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000854  00000000  00000000  00013a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215fe  00000000  00000000  00014274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca50  00000000  00000000  00035872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8c3  00000000  00000000  000422c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010cb85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b80  00000000  00000000  0010cbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0010f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800364c 	.word	0x0800364c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	0800364c 	.word	0x0800364c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000006c 	.word	0x2000006c
 8000500:	200000c0 	.word	0x200000c0

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b096      	sub	sp, #88	@ 0x58
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa45 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f84b 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8d1 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8a5 	bl	8000664 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800051a:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <main+0x8c>)
 800051c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000520:	461d      	mov	r5, r3
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800052e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f001 fe00 	bl	800213a <osThreadCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a15      	ldr	r2, [pc, #84]	@ (8000594 <main+0x90>)
 800053e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <main+0x94>)
 8000542:	f107 0420 	add.w	r4, r7, #32
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000554:	f107 0320 	add.w	r3, r7, #32
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fded 	bl	800213a <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <main+0x98>)
 8000564:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Task3, Task3_init, osPriorityHigh, 0, 128);
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <main+0x9c>)
 8000568:	1d3c      	adds	r4, r7, #4
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fddc 	bl	800213a <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a07      	ldr	r2, [pc, #28]	@ (80005a4 <main+0xa0>)
 8000586:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f001 fdd0 	bl	800212c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <main+0x88>
 8000590:	08003670 	.word	0x08003670
 8000594:	20000308 	.word	0x20000308
 8000598:	08003694 	.word	0x08003694
 800059c:	2000030c 	.word	0x2000030c
 80005a0:	080036b8 	.word	0x080036b8
 80005a4:	20000310 	.word	0x20000310

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f81c 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b22      	ldr	r3, [pc, #136]	@ (800065c <SystemClock_Config+0xb4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <SystemClock_Config+0xb4>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <SystemClock_Config+0xb4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <SystemClock_Config+0xb8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xb8>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xb8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fccb 	bl	8000fb4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000624:	f000 f8da 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ff2e 	bl	80014a4 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800064e:	f000 f8c5 	bl	80007dc <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 f922 	bl	80018e4 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f899 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200002c0 	.word	0x200002c0
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <MX_GPIO_Init+0x80>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <MX_GPIO_Init+0x80>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_GPIO_Init+0x80>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_GPIO_Init+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <MX_GPIO_Init+0x80>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_GPIO_Init+0x80>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <MX_GPIO_Init+0x84>)
 800070e:	f000 fc37 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000712:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_GPIO_Init+0x84>)
 800072c:	f000 fa8c 	bl	8000c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020c00 	.word	0x40020c00

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart2, (uint8_t*)taskdef_data,strlen(taskdef_data), 1000);
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <StartDefaultTask+0x2c>)
 800074a:	f7ff fd41 	bl	80001d0 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	b29a      	uxth	r2, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	4905      	ldr	r1, [pc, #20]	@ (800076c <StartDefaultTask+0x2c>)
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <StartDefaultTask+0x30>)
 800075a:	f001 f913 	bl	8001984 <HAL_UART_Transmit>
    osDelay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000762:	f001 fd36 	bl	80021d2 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)taskdef_data,strlen(taskdef_data), 1000);
 8000766:	bf00      	nop
 8000768:	e7ee      	b.n	8000748 <StartDefaultTask+0x8>
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	200002c0 	.word	0x200002c0

08000774 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  	HAL_UART_Transmit(&huart2, (uint8_t*)task2_data,strlen(task2_data), 1000);
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <Task2_init+0x2c>)
 800077e:	f7ff fd27 	bl	80001d0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	4905      	ldr	r1, [pc, #20]	@ (80007a0 <Task2_init+0x2c>)
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <Task2_init+0x30>)
 800078e:	f001 f8f9 	bl	8001984 <HAL_UART_Transmit>
	    osDelay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000796:	f001 fd1c 	bl	80021d2 <osDelay>
	  	HAL_UART_Transmit(&huart2, (uint8_t*)task2_data,strlen(task2_data), 1000);
 800079a:	bf00      	nop
 800079c:	e7ee      	b.n	800077c <Task2_init+0x8>
 800079e:	bf00      	nop
 80007a0:	20000018 	.word	0x20000018
 80007a4:	200002c0 	.word	0x200002c0

080007a8 <Task3_init>:
  }
  /* USER CODE END Task2_init */
}

void Task3_init(void const * argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)task3_data,strlen(task3_data), 1000);
 80007b0:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <Task3_init+0x2c>)
 80007b2:	f7ff fd0d 	bl	80001d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	4905      	ldr	r1, [pc, #20]	@ (80007d4 <Task3_init+0x2c>)
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <Task3_init+0x30>)
 80007c2:	f001 f8df 	bl	8001984 <HAL_UART_Transmit>
	    osDelay(5000);
 80007c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007ca:	f001 fd02 	bl	80021d2 <osDelay>
		HAL_UART_Transmit(&huart2, (uint8_t*)task3_data,strlen(task3_data), 1000);
 80007ce:	bf00      	nop
 80007d0:	e7ee      	b.n	80007b0 <Task3_init+0x8>
 80007d2:	bf00      	nop
 80007d4:	2000002c 	.word	0x2000002c
 80007d8:	200002c0 	.word	0x200002c0

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <HAL_MspInit+0x54>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_MspInit+0x54>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	@ 0x40
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 f9e2 	bl	8000bf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0x84>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12b      	bne.n	80008ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 80008b6:	f000 f9c7 	bl	8000c48 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f897 	bl	8000a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800090e:	f002 f9ef 	bl	8002cf0 <xTaskGetSchedulerState>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d001      	beq.n	800091c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000918:	f002 fc2e 	bl	8003178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800097c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 fe47 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdc5 	bl	8000504 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000988:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 800098c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000990:	2000406c 	.word	0x2000406c

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f90d 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f808 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff ff0c 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f917 	bl	8000c2e <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 f8ed 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000040 	.word	0x20000040
 8000a34:	20000048 	.word	0x20000048
 8000a38:	20000044 	.word	0x20000044

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000048 	.word	0x20000048
 8000a60:	20000314 	.word	0x20000314

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000314 	.word	0x20000314

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff47 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5c 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb0 	bl	8000b9c <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e16b      	b.n	8000f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 815a 	bne.w	8000f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d005      	beq.n	8000c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d130      	bne.n	8000cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 0201 	and.w	r2, r3, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d017      	beq.n	8000d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d123      	bne.n	8000d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0203 	and.w	r2, r3, #3
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80b4 	beq.w	8000f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b60      	ldr	r3, [pc, #384]	@ (8000f54 <HAL_GPIO_Init+0x30c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f54 <HAL_GPIO_Init+0x30c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dde:	4b5d      	ldr	r3, [pc, #372]	@ (8000f54 <HAL_GPIO_Init+0x30c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a5b      	ldr	r2, [pc, #364]	@ (8000f58 <HAL_GPIO_Init+0x310>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a52      	ldr	r2, [pc, #328]	@ (8000f5c <HAL_GPIO_Init+0x314>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d02b      	beq.n	8000e6e <HAL_GPIO_Init+0x226>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a51      	ldr	r2, [pc, #324]	@ (8000f60 <HAL_GPIO_Init+0x318>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d025      	beq.n	8000e6a <HAL_GPIO_Init+0x222>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a50      	ldr	r2, [pc, #320]	@ (8000f64 <HAL_GPIO_Init+0x31c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01f      	beq.n	8000e66 <HAL_GPIO_Init+0x21e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4f      	ldr	r2, [pc, #316]	@ (8000f68 <HAL_GPIO_Init+0x320>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x21a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4e      	ldr	r2, [pc, #312]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x216>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4d      	ldr	r2, [pc, #308]	@ (8000f70 <HAL_GPIO_Init+0x328>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	@ (8000f74 <HAL_GPIO_Init+0x32c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x20e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4b      	ldr	r2, [pc, #300]	@ (8000f78 <HAL_GPIO_Init+0x330>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x20a>
 8000e4e:	2307      	movs	r3, #7
 8000e50:	e00e      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e52:	2308      	movs	r3, #8
 8000e54:	e00c      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e56:	2306      	movs	r3, #6
 8000e58:	e00a      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e008      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	f002 0203 	and.w	r2, r2, #3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e80:	4935      	ldr	r1, [pc, #212]	@ (8000f58 <HAL_GPIO_Init+0x310>)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb2:	4a32      	ldr	r2, [pc, #200]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000edc:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f06:	4a1d      	ldr	r2, [pc, #116]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f30:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	f67f ae90 	bls.w	8000c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40021800 	.word	0x40021800
 8000f78:	40021c00 	.word	0x40021c00
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f9c:	e003      	b.n	8000fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	041a      	lsls	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e267      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d075      	beq.n	80010be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fd2:	4b88      	ldr	r3, [pc, #544]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fde:	4b85      	ldr	r3, [pc, #532]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d112      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fea:	4b82      	ldr	r3, [pc, #520]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ff6:	d10b      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d05b      	beq.n	80010bc <HAL_RCC_OscConfig+0x108>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d157      	bne.n	80010bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e242      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001018:	d106      	bne.n	8001028 <HAL_RCC_OscConfig+0x74>
 800101a:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a75      	ldr	r2, [pc, #468]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xb0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x98>
 8001032:	4b70      	ldr	r3, [pc, #448]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6f      	ldr	r2, [pc, #444]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6d      	ldr	r3, [pc, #436]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6c      	ldr	r2, [pc, #432]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xb0>
 800104c:	4b69      	ldr	r3, [pc, #420]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a68      	ldr	r2, [pc, #416]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b66      	ldr	r3, [pc, #408]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a65      	ldr	r2, [pc, #404]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcfa 	bl	8000a64 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fcf6 	bl	8000a64 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	@ 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e207      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5b      	ldr	r3, [pc, #364]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xc0>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fce6 	bl	8000a64 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fce2 	bl	8000a64 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	@ 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1f3      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0xe8>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ca:	4b4a      	ldr	r3, [pc, #296]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d6:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e2:	4b44      	ldr	r3, [pc, #272]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b41      	ldr	r3, [pc, #260]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x152>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1c7      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3b      	ldr	r3, [pc, #236]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4937      	ldr	r1, [pc, #220]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_RCC_OscConfig+0x244>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff fc9b 	bl	8000a64 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc97 	bl	8000a64 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e1a8      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4925      	ldr	r1, [pc, #148]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <HAL_RCC_OscConfig+0x244>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fc7a 	bl	8000a64 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fc76 	bl	8000a64 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e187      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d036      	beq.n	800120c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d016      	beq.n	80011d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_RCC_OscConfig+0x248>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fc5a 	bl	8000a64 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc56 	bl	8000a64 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e167      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x200>
 80011d2:	e01b      	b.n	800120c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_RCC_OscConfig+0x248>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fc43 	bl	8000a64 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	e00e      	b.n	8001200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc3f 	bl	8000a64 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d907      	bls.n	8001200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e150      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
 80011f4:	40023800 	.word	0x40023800
 80011f8:	42470000 	.word	0x42470000
 80011fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ea      	bne.n	80011e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8097 	beq.w	8001348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121e:	4b81      	ldr	r3, [pc, #516]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b7d      	ldr	r3, [pc, #500]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a7c      	ldr	r2, [pc, #496]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b7a      	ldr	r3, [pc, #488]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b77      	ldr	r3, [pc, #476]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b74      	ldr	r3, [pc, #464]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a73      	ldr	r2, [pc, #460]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fbff 	bl	8000a64 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fbfb 	bl	8000a64 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e10c      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b6a      	ldr	r3, [pc, #424]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x2ea>
 8001290:	4b64      	ldr	r3, [pc, #400]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001294:	4a63      	ldr	r2, [pc, #396]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6713      	str	r3, [r2, #112]	@ 0x70
 800129c:	e01c      	b.n	80012d8 <HAL_RCC_OscConfig+0x324>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x30c>
 80012a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0x324>
 80012c0:	4b58      	ldr	r3, [pc, #352]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c4:	4a57      	ldr	r2, [pc, #348]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80012cc:	4b55      	ldr	r3, [pc, #340]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d0:	4a54      	ldr	r2, [pc, #336]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f023 0304 	bic.w	r3, r3, #4
 80012d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d015      	beq.n	800130c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbc0 	bl	8000a64 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fbbc 	bl	8000a64 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0cb      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fe:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ee      	beq.n	80012e8 <HAL_RCC_OscConfig+0x334>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fbaa 	bl	8000a64 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fba6 	bl	8000a64 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0b5      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132a:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ee      	bne.n	8001314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133c:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	4a38      	ldr	r2, [pc, #224]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a1 	beq.w	8001494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001352:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d05c      	beq.n	8001418 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d141      	bne.n	80013ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b31      	ldr	r3, [pc, #196]	@ (800142c <HAL_RCC_OscConfig+0x478>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb7a 	bl	8000a64 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb76 	bl	8000a64 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e087      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	019b      	lsls	r3, r3, #6
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	3b01      	subs	r3, #1
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	491b      	ldr	r1, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_RCC_OscConfig+0x478>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb4f 	bl	8000a64 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb4b 	bl	8000a64 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e05c      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x416>
 80013e8:	e054      	b.n	8001494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_RCC_OscConfig+0x478>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb38 	bl	8000a64 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb34 	bl	8000a64 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e045      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x444>
 8001416:	e03d      	b.n	8001494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e038      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000
 800142c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d028      	beq.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d121      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d11a      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001468:	4293      	cmp	r3, r2
 800146a:	d111      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	3b01      	subs	r3, #1
 800147a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d107      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0cc      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b68      	ldr	r3, [pc, #416]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d90c      	bls.n	80014e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b65      	ldr	r3, [pc, #404]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b63      	ldr	r3, [pc, #396]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0b8      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f8:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a58      	ldr	r2, [pc, #352]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a52      	ldr	r2, [pc, #328]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800151a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	494d      	ldr	r1, [pc, #308]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d044      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d119      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e07f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d003      	beq.n	8001562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155e:	2b03      	cmp	r3, #3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e06f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e067      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4934      	ldr	r1, [pc, #208]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff fa66 	bl	8000a64 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff fa62 	bl	8000a64 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e04f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d20c      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e032      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4916      	ldr	r1, [pc, #88]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	490e      	ldr	r1, [pc, #56]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800162a:	f000 f821 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 800162e:	4602      	mov	r2, r0
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	490a      	ldr	r1, [pc, #40]	@ (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	5ccb      	ldrb	r3, [r1, r3]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_RCC_ClockConfig+0x1c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f9c6 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00
 8001660:	40023800 	.word	0x40023800
 8001664:	080036dc 	.word	0x080036dc
 8001668:	20000040 	.word	0x20000040
 800166c:	20000044 	.word	0x20000044

08001670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001674:	b094      	sub	sp, #80	@ 0x50
 8001676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	647b      	str	r3, [r7, #68]	@ 0x44
 800167c:	2300      	movs	r3, #0
 800167e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001680:	2300      	movs	r3, #0
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001688:	4b79      	ldr	r3, [pc, #484]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x200>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d00d      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001694:	2b08      	cmp	r3, #8
 8001696:	f200 80e1 	bhi.w	800185c <HAL_RCC_GetSysClockFreq+0x1ec>
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x34>
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x3a>
 80016a2:	e0db      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b73      	ldr	r3, [pc, #460]	@ (8001874 <HAL_RCC_GetSysClockFreq+0x204>)
 80016a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80016a8:	e0db      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016aa:	4b73      	ldr	r3, [pc, #460]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x208>)
 80016ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016ae:	e0d8      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x200>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x200>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	099b      	lsrs	r3, r3, #6
 80016cc:	2200      	movs	r2, #0
 80016ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80016de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016e2:	4622      	mov	r2, r4
 80016e4:	462b      	mov	r3, r5
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	0159      	lsls	r1, r3, #5
 80016f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f4:	0150      	lsls	r0, r2, #5
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4621      	mov	r1, r4
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	6139      	str	r1, [r7, #16]
 8001700:	4629      	mov	r1, r5
 8001702:	eb63 0301 	sbc.w	r3, r3, r1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001714:	4659      	mov	r1, fp
 8001716:	018b      	lsls	r3, r1, #6
 8001718:	4651      	mov	r1, sl
 800171a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800171e:	4651      	mov	r1, sl
 8001720:	018a      	lsls	r2, r1, #6
 8001722:	4651      	mov	r1, sl
 8001724:	ebb2 0801 	subs.w	r8, r2, r1
 8001728:	4659      	mov	r1, fp
 800172a:	eb63 0901 	sbc.w	r9, r3, r1
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800173a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800173e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001742:	4690      	mov	r8, r2
 8001744:	4699      	mov	r9, r3
 8001746:	4623      	mov	r3, r4
 8001748:	eb18 0303 	adds.w	r3, r8, r3
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	462b      	mov	r3, r5
 8001750:	eb49 0303 	adc.w	r3, r9, r3
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001762:	4629      	mov	r1, r5
 8001764:	024b      	lsls	r3, r1, #9
 8001766:	4621      	mov	r1, r4
 8001768:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800176c:	4621      	mov	r1, r4
 800176e:	024a      	lsls	r2, r1, #9
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001776:	2200      	movs	r2, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800177a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800177c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001780:	f7fe fd2e 	bl	80001e0 <__aeabi_uldivmod>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4613      	mov	r3, r2
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800178c:	e058      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x200>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	2200      	movs	r2, #0
 8001796:	4618      	mov	r0, r3
 8001798:	4611      	mov	r1, r2
 800179a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017a8:	4642      	mov	r2, r8
 80017aa:	464b      	mov	r3, r9
 80017ac:	f04f 0000 	mov.w	r0, #0
 80017b0:	f04f 0100 	mov.w	r1, #0
 80017b4:	0159      	lsls	r1, r3, #5
 80017b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ba:	0150      	lsls	r0, r2, #5
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4641      	mov	r1, r8
 80017c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80017c6:	4649      	mov	r1, r9
 80017c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017e0:	ebb2 040a 	subs.w	r4, r2, sl
 80017e4:	eb63 050b 	sbc.w	r5, r3, fp
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	00eb      	lsls	r3, r5, #3
 80017f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f6:	00e2      	lsls	r2, r4, #3
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	4643      	mov	r3, r8
 80017fe:	18e3      	adds	r3, r4, r3
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	464b      	mov	r3, r9
 8001804:	eb45 0303 	adc.w	r3, r5, r3
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001816:	4629      	mov	r1, r5
 8001818:	028b      	lsls	r3, r1, #10
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001820:	4621      	mov	r1, r4
 8001822:	028a      	lsls	r2, r1, #10
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182a:	2200      	movs	r2, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001834:	f7fe fcd4 	bl	80001e0 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x200>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	3301      	adds	r3, #1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800185a:	e002      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_RCC_GetSysClockFreq+0x204>)
 800185e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001864:	4618      	mov	r0, r3
 8001866:	3750      	adds	r7, #80	@ 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	00f42400 	.word	0x00f42400
 8001878:	007a1200 	.word	0x007a1200

0800187c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_RCC_GetHCLKFreq+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000040 	.word	0x20000040

08001894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001898:	f7ff fff0 	bl	800187c <HAL_RCC_GetHCLKFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	0a9b      	lsrs	r3, r3, #10
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	4903      	ldr	r1, [pc, #12]	@ (80018b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	080036ec 	.word	0x080036ec

080018bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018c0:	f7ff ffdc 	bl	800187c <HAL_RCC_GetHCLKFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	0b5b      	lsrs	r3, r3, #13
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4903      	ldr	r1, [pc, #12]	@ (80018e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	080036ec 	.word	0x080036ec

080018e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e042      	b.n	800197c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe ff98 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2224      	movs	r2, #36	@ 0x24
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f973 	bl	8001c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800193c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800194c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800195c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d175      	bne.n	8001a90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_UART_Transmit+0x2c>
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e06e      	b.n	8001a92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2221      	movs	r2, #33	@ 0x21
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019c2:	f7ff f84f 	bl	8000a64 <HAL_GetTick>
 80019c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	88fa      	ldrh	r2, [r7, #6]
 80019cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019dc:	d108      	bne.n	80019f0 <HAL_UART_Transmit+0x6c>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d104      	bne.n	80019f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	e003      	b.n	80019f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019f8:	e02e      	b.n	8001a58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2200      	movs	r2, #0
 8001a02:	2180      	movs	r1, #128	@ 0x80
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f848 	bl	8001a9a <UART_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e03a      	b.n	8001a92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	3302      	adds	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	e007      	b.n	8001a4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1cb      	bne.n	80019fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2140      	movs	r1, #64	@ 0x40
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f814 	bl	8001a9a <UART_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aaa:	e03b      	b.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab2:	d037      	beq.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab4:	f7fe ffd6 	bl	8000a64 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	6a3a      	ldr	r2, [r7, #32]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d302      	bcc.n	8001aca <UART_WaitOnFlagUntilTimeout+0x30>
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e03a      	b.n	8001b44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d023      	beq.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b80      	cmp	r3, #128	@ 0x80
 8001ae0:	d020      	beq.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b40      	cmp	r3, #64	@ 0x40
 8001ae6:	d01d      	beq.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d116      	bne.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f81d 	bl	8001b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2208      	movs	r2, #8
 8001b16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e00f      	b.n	8001b44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d0b4      	beq.n	8001aac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b095      	sub	sp, #84	@ 0x54
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5e:	e853 3f00 	ldrex	r3, [r3]
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	330c      	adds	r3, #12
 8001b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b74:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b7c:	e841 2300 	strex	r3, r2, [r1]
 8001b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e5      	bne.n	8001b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3314      	adds	r3, #20
 8001b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	e853 3f00 	ldrex	r3, [r3]
 8001b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3314      	adds	r3, #20
 8001ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bb0:	e841 2300 	strex	r3, r2, [r1]
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e5      	bne.n	8001b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d119      	bne.n	8001bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	e853 3f00 	ldrex	r3, [r3]
 8001bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f023 0310 	bic.w	r3, r3, #16
 8001bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	330c      	adds	r3, #12
 8001be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001be4:	61ba      	str	r2, [r7, #24]
 8001be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	e841 2300 	strex	r3, r2, [r1]
 8001bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e5      	bne.n	8001bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c06:	bf00      	nop
 8001c08:	3754      	adds	r7, #84	@ 0x54
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c18:	b0c0      	sub	sp, #256	@ 0x100
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c30:	68d9      	ldr	r1, [r3, #12]
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	ea40 0301 	orr.w	r3, r0, r1
 8001c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c6c:	f021 010c 	bic.w	r1, r1, #12
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c8e:	6999      	ldr	r1, [r3, #24]
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	ea40 0301 	orr.w	r3, r0, r1
 8001c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8001ee0 <UART_SetConfig+0x2cc>)
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d005      	beq.n	8001cb4 <UART_SetConfig+0xa0>
 8001ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b8d      	ldr	r3, [pc, #564]	@ (8001ee4 <UART_SetConfig+0x2d0>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d104      	bne.n	8001cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cb4:	f7ff fe02 	bl	80018bc <HAL_RCC_GetPCLK2Freq>
 8001cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001cbc:	e003      	b.n	8001cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cbe:	f7ff fde9 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cd0:	f040 810c 	bne.w	8001eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001cde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	462b      	mov	r3, r5
 8001cea:	1891      	adds	r1, r2, r2
 8001cec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001cee:	415b      	adcs	r3, r3
 8001cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	eb12 0801 	adds.w	r8, r2, r1
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb43 0901 	adc.w	r9, r3, r1
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d16:	4690      	mov	r8, r2
 8001d18:	4699      	mov	r9, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	eb18 0303 	adds.w	r3, r8, r3
 8001d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d24:	462b      	mov	r3, r5
 8001d26:	eb49 0303 	adc.w	r3, r9, r3
 8001d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d42:	460b      	mov	r3, r1
 8001d44:	18db      	adds	r3, r3, r3
 8001d46:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d48:	4613      	mov	r3, r2
 8001d4a:	eb42 0303 	adc.w	r3, r2, r3
 8001d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d58:	f7fe fa42 	bl	80001e0 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4b61      	ldr	r3, [pc, #388]	@ (8001ee8 <UART_SetConfig+0x2d4>)
 8001d62:	fba3 2302 	umull	r2, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	011c      	lsls	r4, r3, #4
 8001d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d7c:	4642      	mov	r2, r8
 8001d7e:	464b      	mov	r3, r9
 8001d80:	1891      	adds	r1, r2, r2
 8001d82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d84:	415b      	adcs	r3, r3
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d92:	4649      	mov	r1, r9
 8001d94:	eb43 0b01 	adc.w	fp, r3, r1
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dac:	4692      	mov	sl, r2
 8001dae:	469b      	mov	fp, r3
 8001db0:	4643      	mov	r3, r8
 8001db2:	eb1a 0303 	adds.w	r3, sl, r3
 8001db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001dba:	464b      	mov	r3, r9
 8001dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8001dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	18db      	adds	r3, r3, r3
 8001ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001dde:	4613      	mov	r3, r2
 8001de0:	eb42 0303 	adc.w	r3, r2, r3
 8001de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001dee:	f7fe f9f7 	bl	80001e0 <__aeabi_uldivmod>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <UART_SetConfig+0x2d4>)
 8001dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2264      	movs	r2, #100	@ 0x64
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	1acb      	subs	r3, r1, r3
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <UART_SetConfig+0x2d4>)
 8001e10:	fba3 2302 	umull	r2, r3, r3, r2
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e1c:	441c      	add	r4, r3
 8001e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e30:	4642      	mov	r2, r8
 8001e32:	464b      	mov	r3, r9
 8001e34:	1891      	adds	r1, r2, r2
 8001e36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e38:	415b      	adcs	r3, r3
 8001e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e40:	4641      	mov	r1, r8
 8001e42:	1851      	adds	r1, r2, r1
 8001e44:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e46:	4649      	mov	r1, r9
 8001e48:	414b      	adcs	r3, r1
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e58:	4659      	mov	r1, fp
 8001e5a:	00cb      	lsls	r3, r1, #3
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e62:	4651      	mov	r1, sl
 8001e64:	00ca      	lsls	r2, r1, #3
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e74:	464b      	mov	r3, r9
 8001e76:	460a      	mov	r2, r1
 8001e78:	eb42 0303 	adc.w	r3, r2, r3
 8001e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e94:	460b      	mov	r3, r1
 8001e96:	18db      	adds	r3, r3, r3
 8001e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	eb42 0303 	adc.w	r3, r2, r3
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001eaa:	f7fe f999 	bl	80001e0 <__aeabi_uldivmod>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <UART_SetConfig+0x2d4>)
 8001eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	2164      	movs	r1, #100	@ 0x64
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	3332      	adds	r3, #50	@ 0x32
 8001ec6:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <UART_SetConfig+0x2d4>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	f003 0207 	and.w	r2, r3, #7
 8001ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4422      	add	r2, r4
 8001eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001edc:	e106      	b.n	80020ec <UART_SetConfig+0x4d8>
 8001ede:	bf00      	nop
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001efe:	4642      	mov	r2, r8
 8001f00:	464b      	mov	r3, r9
 8001f02:	1891      	adds	r1, r2, r2
 8001f04:	6239      	str	r1, [r7, #32]
 8001f06:	415b      	adcs	r3, r3
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f0e:	4641      	mov	r1, r8
 8001f10:	1854      	adds	r4, r2, r1
 8001f12:	4649      	mov	r1, r9
 8001f14:	eb43 0501 	adc.w	r5, r3, r1
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	00eb      	lsls	r3, r5, #3
 8001f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f26:	00e2      	lsls	r2, r4, #3
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	18e3      	adds	r3, r4, r3
 8001f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f34:	464b      	mov	r3, r9
 8001f36:	eb45 0303 	adc.w	r3, r5, r3
 8001f3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	008b      	lsls	r3, r1, #2
 8001f5e:	4621      	mov	r1, r4
 8001f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f64:	4621      	mov	r1, r4
 8001f66:	008a      	lsls	r2, r1, #2
 8001f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f6c:	f7fe f938 	bl	80001e0 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4b60      	ldr	r3, [pc, #384]	@ (80020f8 <UART_SetConfig+0x4e4>)
 8001f76:	fba3 2302 	umull	r2, r3, r3, r2
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	011c      	lsls	r4, r3, #4
 8001f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f82:	2200      	movs	r2, #0
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f90:	4642      	mov	r2, r8
 8001f92:	464b      	mov	r3, r9
 8001f94:	1891      	adds	r1, r2, r2
 8001f96:	61b9      	str	r1, [r7, #24]
 8001f98:	415b      	adcs	r3, r3
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	1851      	adds	r1, r2, r1
 8001fa4:	6139      	str	r1, [r7, #16]
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	414b      	adcs	r3, r1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fb8:	4659      	mov	r1, fp
 8001fba:	00cb      	lsls	r3, r1, #3
 8001fbc:	4651      	mov	r1, sl
 8001fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fc2:	4651      	mov	r1, sl
 8001fc4:	00ca      	lsls	r2, r1, #3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4642      	mov	r2, r8
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fd4:	464b      	mov	r3, r9
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	eb42 0303 	adc.w	r3, r2, r3
 8001fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	008b      	lsls	r3, r1, #2
 8001ffc:	4641      	mov	r1, r8
 8001ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002002:	4641      	mov	r1, r8
 8002004:	008a      	lsls	r2, r1, #2
 8002006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800200a:	f7fe f8e9 	bl	80001e0 <__aeabi_uldivmod>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4611      	mov	r1, r2
 8002014:	4b38      	ldr	r3, [pc, #224]	@ (80020f8 <UART_SetConfig+0x4e4>)
 8002016:	fba3 2301 	umull	r2, r3, r3, r1
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2264      	movs	r2, #100	@ 0x64
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	1acb      	subs	r3, r1, r3
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	3332      	adds	r3, #50	@ 0x32
 8002028:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <UART_SetConfig+0x4e4>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002034:	441c      	add	r4, r3
 8002036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800203a:	2200      	movs	r2, #0
 800203c:	673b      	str	r3, [r7, #112]	@ 0x70
 800203e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002040:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002044:	4642      	mov	r2, r8
 8002046:	464b      	mov	r3, r9
 8002048:	1891      	adds	r1, r2, r2
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	415b      	adcs	r3, r3
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002054:	4641      	mov	r1, r8
 8002056:	1851      	adds	r1, r2, r1
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	4649      	mov	r1, r9
 800205c:	414b      	adcs	r3, r1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800206c:	4659      	mov	r1, fp
 800206e:	00cb      	lsls	r3, r1, #3
 8002070:	4651      	mov	r1, sl
 8002072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002076:	4651      	mov	r1, sl
 8002078:	00ca      	lsls	r2, r1, #3
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	4603      	mov	r3, r0
 8002080:	4642      	mov	r2, r8
 8002082:	189b      	adds	r3, r3, r2
 8002084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002086:	464b      	mov	r3, r9
 8002088:	460a      	mov	r2, r1
 800208a:	eb42 0303 	adc.w	r3, r2, r3
 800208e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	663b      	str	r3, [r7, #96]	@ 0x60
 800209a:	667a      	str	r2, [r7, #100]	@ 0x64
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80020a8:	4649      	mov	r1, r9
 80020aa:	008b      	lsls	r3, r1, #2
 80020ac:	4641      	mov	r1, r8
 80020ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020b2:	4641      	mov	r1, r8
 80020b4:	008a      	lsls	r2, r1, #2
 80020b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020ba:	f7fe f891 	bl	80001e0 <__aeabi_uldivmod>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <UART_SetConfig+0x4e4>)
 80020c4:	fba3 1302 	umull	r1, r3, r3, r2
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	2164      	movs	r1, #100	@ 0x64
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	3332      	adds	r3, #50	@ 0x32
 80020d6:	4a08      	ldr	r2, [pc, #32]	@ (80020f8 <UART_SetConfig+0x4e4>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4422      	add	r2, r4
 80020ea:	609a      	str	r2, [r3, #8]
}
 80020ec:	bf00      	nop
 80020ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020f2:	46bd      	mov	sp, r7
 80020f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f8:	51eb851f 	.word	0x51eb851f

080020fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800210a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210e:	2b84      	cmp	r3, #132	@ 0x84
 8002110:	d005      	beq.n	800211e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002112:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	3303      	adds	r3, #3
 800211c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002130:	f000 fae4 	bl	80026fc <vTaskStartScheduler>
  
  return osOK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}

0800213a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800213a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213c:	b089      	sub	sp, #36	@ 0x24
 800213e:	af04      	add	r7, sp, #16
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <osThreadCreate+0x54>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01c      	beq.n	800218e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685c      	ldr	r4, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691e      	ldr	r6, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffc8 	bl	80020fc <makeFreeRtosPriority>
 800216c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002176:	9202      	str	r2, [sp, #8]
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	9100      	str	r1, [sp, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4632      	mov	r2, r6
 8002180:	4629      	mov	r1, r5
 8002182:	4620      	mov	r0, r4
 8002184:	f000 f8ed 	bl	8002362 <xTaskCreateStatic>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e01c      	b.n	80021c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685c      	ldr	r4, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800219a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ffaa 	bl	80020fc <makeFreeRtosPriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	9200      	str	r2, [sp, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	4632      	mov	r2, r6
 80021b6:	4629      	mov	r1, r5
 80021b8:	4620      	mov	r0, r4
 80021ba:	f000 f932 	bl	8002422 <xTaskCreate>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d001      	beq.n	80021c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <osDelay+0x16>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	e000      	b.n	80021ea <osDelay+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fa50 	bl	8002690 <vTaskDelay>
  
  return osOK;
 80021f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0208 	add.w	r2, r3, #8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f04f 32ff 	mov.w	r2, #4294967295
 8002212:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0208 	add.w	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f103 0208 	add.w	r2, r3, #8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b2:	d103      	bne.n	80022bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e00c      	b.n	80022d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3308      	adds	r3, #8
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e002      	b.n	80022ca <vListInsert+0x2e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d2f6      	bcs.n	80022c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6892      	ldr	r2, [r2, #8]
 8002324:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6852      	ldr	r2, [r2, #4]
 800232e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d103      	bne.n	8002342 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002362:	b580      	push	{r7, lr}
 8002364:	b08e      	sub	sp, #56	@ 0x38
 8002366:	af04      	add	r7, sp, #16
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	e7fd      	b.n	800238a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <xTaskCreateStatic+0x4a>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61fb      	str	r3, [r7, #28]
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023ac:	2354      	movs	r3, #84	@ 0x54
 80023ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b54      	cmp	r3, #84	@ 0x54
 80023b4:	d00b      	beq.n	80023ce <xTaskCreateStatic+0x6c>
	__asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	61bb      	str	r3, [r7, #24]
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	e7fd      	b.n	80023ca <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80023ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01e      	beq.n	8002414 <xTaskCreateStatic+0xb2>
 80023d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023ee:	2300      	movs	r3, #0
 80023f0:	9303      	str	r3, [sp, #12]
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f850 	bl	80024ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800240c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800240e:	f000 f8d5 	bl	80025bc <prvAddNewTaskToReadyList>
 8002412:	e001      	b.n	8002418 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002418:	697b      	ldr	r3, [r7, #20]
	}
 800241a:	4618      	mov	r0, r3
 800241c:	3728      	adds	r7, #40	@ 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002422:	b580      	push	{r7, lr}
 8002424:	b08c      	sub	sp, #48	@ 0x30
 8002426:	af04      	add	r7, sp, #16
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4618      	mov	r0, r3
 8002438:	f000 feee 	bl	8003218 <pvPortMalloc>
 800243c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00e      	beq.n	8002462 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002444:	2054      	movs	r0, #84	@ 0x54
 8002446:	f000 fee7 	bl	8003218 <pvPortMalloc>
 800244a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
 8002458:	e005      	b.n	8002466 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f000 ffaa 	bl	80033b4 <vPortFree>
 8002460:	e001      	b.n	8002466 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002474:	88fa      	ldrh	r2, [r7, #6]
 8002476:	2300      	movs	r3, #0
 8002478:	9303      	str	r3, [sp, #12]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f80e 	bl	80024ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002490:	69f8      	ldr	r0, [r7, #28]
 8002492:	f000 f893 	bl	80025bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	e002      	b.n	80024a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024a2:	69bb      	ldr	r3, [r7, #24]
	}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024c4:	3b01      	subs	r3, #1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f023 0307 	bic.w	r3, r3, #7
 80024d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80024de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	617b      	str	r3, [r7, #20]
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	e7fd      	b.n	80024f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01f      	beq.n	800253c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	e012      	b.n	8002528 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	7819      	ldrb	r1, [r3, #0]
 800250a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	3334      	adds	r3, #52	@ 0x34
 8002512:	460a      	mov	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	d9e9      	bls.n	8002502 <prvInitialiseNewTask+0x56>
 800252e:	e000      	b.n	8002532 <prvInitialiseNewTask+0x86>
			{
				break;
 8002530:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800253a:	e003      	b.n	8002544 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	2b06      	cmp	r3, #6
 8002548:	d901      	bls.n	800254e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800254a:	2306      	movs	r3, #6
 800254c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255c:	2200      	movs	r2, #0
 800255e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	3304      	adds	r3, #4
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fe68 	bl	800223a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	3318      	adds	r3, #24
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe63 	bl	800223a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002578:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	f1c3 0207 	rsb	r2, r3, #7
 8002580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002582:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	2200      	movs	r2, #0
 800258e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	69b8      	ldr	r0, [r7, #24]
 800259e:	f000 fc2b 	bl	8002df8 <pxPortInitialiseStack>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025c4:	f000 fd48 	bl	8003058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <prvAddNewTaskToReadyList+0xb8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <prvAddNewTaskToReadyList+0xb8>)
 80025d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <prvAddNewTaskToReadyList+0xbc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025da:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <prvAddNewTaskToReadyList+0xbc>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025e0:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <prvAddNewTaskToReadyList+0xb8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d110      	bne.n	800260a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025e8:	f000 fac4 	bl	8002b74 <prvInitialiseTaskLists>
 80025ec:	e00d      	b.n	800260a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025ee:	4b23      	ldr	r3, [pc, #140]	@ (800267c <prvAddNewTaskToReadyList+0xc0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <prvAddNewTaskToReadyList+0xbc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	429a      	cmp	r2, r3
 8002602:	d802      	bhi.n	800260a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <prvAddNewTaskToReadyList+0xbc>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <prvAddNewTaskToReadyList+0xc4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <prvAddNewTaskToReadyList+0xc4>)
 8002612:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	2201      	movs	r2, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	4b19      	ldr	r3, [pc, #100]	@ (8002684 <prvAddNewTaskToReadyList+0xc8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <prvAddNewTaskToReadyList+0xc8>)
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <prvAddNewTaskToReadyList+0xcc>)
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff fe09 	bl	8002254 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002642:	f000 fd3b 	bl	80030bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <prvAddNewTaskToReadyList+0xc0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00e      	beq.n	800266c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <prvAddNewTaskToReadyList+0xbc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <prvAddNewTaskToReadyList+0xd0>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000418 	.word	0x20000418
 8002678:	20000318 	.word	0x20000318
 800267c:	20000424 	.word	0x20000424
 8002680:	20000434 	.word	0x20000434
 8002684:	20000420 	.word	0x20000420
 8002688:	2000031c 	.word	0x2000031c
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80026a2:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <vTaskDelay+0x64>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <vTaskDelay+0x32>
	__asm volatile
 80026aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	60bb      	str	r3, [r7, #8]
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	e7fd      	b.n	80026be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80026c2:	f000 f87d 	bl	80027c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026c6:	2100      	movs	r1, #0
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fb2f 	bl	8002d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026ce:	f000 f885 	bl	80027dc <xTaskResumeAll>
 80026d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <vTaskDelay+0x68>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000440 	.word	0x20000440
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800270a:	463a      	mov	r2, r7
 800270c:	1d39      	adds	r1, r7, #4
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fedc 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	9202      	str	r2, [sp, #8]
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	460a      	mov	r2, r1
 800272a:	491f      	ldr	r1, [pc, #124]	@ (80027a8 <vTaskStartScheduler+0xac>)
 800272c:	481f      	ldr	r0, [pc, #124]	@ (80027ac <vTaskStartScheduler+0xb0>)
 800272e:	f7ff fe18 	bl	8002362 <xTaskCreateStatic>
 8002732:	4603      	mov	r3, r0
 8002734:	4a1e      	ldr	r2, [pc, #120]	@ (80027b0 <vTaskStartScheduler+0xb4>)
 8002736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <vTaskStartScheduler+0xb4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e001      	b.n	800274a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d116      	bne.n	800277e <vTaskStartScheduler+0x82>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	613b      	str	r3, [r7, #16]
}
 8002762:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <vTaskStartScheduler+0xb8>)
 8002766:	f04f 32ff 	mov.w	r2, #4294967295
 800276a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800276c:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <vTaskStartScheduler+0xbc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <vTaskStartScheduler+0xc0>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002778:	f000 fbca 	bl	8002f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800277c:	e00f      	b.n	800279e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d10b      	bne.n	800279e <vTaskStartScheduler+0xa2>
	__asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	60fb      	str	r3, [r7, #12]
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	e7fd      	b.n	800279a <vTaskStartScheduler+0x9e>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	080036d4 	.word	0x080036d4
 80027ac:	08002b45 	.word	0x08002b45
 80027b0:	2000043c 	.word	0x2000043c
 80027b4:	20000438 	.word	0x20000438
 80027b8:	20000424 	.word	0x20000424
 80027bc:	2000041c 	.word	0x2000041c

080027c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80027c4:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <vTaskSuspendAll+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	4a03      	ldr	r2, [pc, #12]	@ (80027d8 <vTaskSuspendAll+0x18>)
 80027cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	20000440 	.word	0x20000440

080027dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027ea:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <xTaskResumeAll+0x118>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10b      	bne.n	800280a <xTaskResumeAll+0x2e>
	__asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	603b      	str	r3, [r7, #0]
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	e7fd      	b.n	8002806 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800280a:	f000 fc25 	bl	8003058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800280e:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <xTaskResumeAll+0x118>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	4a37      	ldr	r2, [pc, #220]	@ (80028f4 <xTaskResumeAll+0x118>)
 8002816:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002818:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <xTaskResumeAll+0x118>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d161      	bne.n	80028e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002820:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <xTaskResumeAll+0x11c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05d      	beq.n	80028e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002828:	e02e      	b.n	8002888 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282a:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <xTaskResumeAll+0x120>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3318      	adds	r3, #24
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fd69 	bl	800230e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3304      	adds	r3, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fd64 	bl	800230e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	2201      	movs	r2, #1
 800284c:	409a      	lsls	r2, r3
 800284e:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <xTaskResumeAll+0x124>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	4a2a      	ldr	r2, [pc, #168]	@ (8002900 <xTaskResumeAll+0x124>)
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <xTaskResumeAll+0x128>)
 8002866:	441a      	add	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f7ff fcf0 	bl	8002254 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	4b23      	ldr	r3, [pc, #140]	@ (8002908 <xTaskResumeAll+0x12c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002882:	4b22      	ldr	r3, [pc, #136]	@ (800290c <xTaskResumeAll+0x130>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002888:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <xTaskResumeAll+0x120>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1cc      	bne.n	800282a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002896:	f000 fa0b 	bl	8002cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800289a:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <xTaskResumeAll+0x134>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028a6:	f000 f837 	bl	8002918 <xTaskIncrementTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <xTaskResumeAll+0x130>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f1      	bne.n	80028a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80028c2:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <xTaskResumeAll+0x134>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <xTaskResumeAll+0x130>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <xTaskResumeAll+0x138>)
 80028d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028e4:	f000 fbea 	bl	80030bc <vPortExitCritical>

	return xAlreadyYielded;
 80028e8:	68bb      	ldr	r3, [r7, #8]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000440 	.word	0x20000440
 80028f8:	20000418 	.word	0x20000418
 80028fc:	200003d8 	.word	0x200003d8
 8002900:	20000420 	.word	0x20000420
 8002904:	2000031c 	.word	0x2000031c
 8002908:	20000318 	.word	0x20000318
 800290c:	2000042c 	.word	0x2000042c
 8002910:	20000428 	.word	0x20000428
 8002914:	e000ed04 	.word	0xe000ed04

08002918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002922:	4b4f      	ldr	r3, [pc, #316]	@ (8002a60 <xTaskIncrementTick+0x148>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 808f 	bne.w	8002a4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800292c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a64 <xTaskIncrementTick+0x14c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002934:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <xTaskIncrementTick+0x14c>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d121      	bne.n	8002984 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002940:	4b49      	ldr	r3, [pc, #292]	@ (8002a68 <xTaskIncrementTick+0x150>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <xTaskIncrementTick+0x4a>
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	603b      	str	r3, [r7, #0]
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	e7fd      	b.n	800295e <xTaskIncrementTick+0x46>
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <xTaskIncrementTick+0x150>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <xTaskIncrementTick+0x154>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a68 <xTaskIncrementTick+0x150>)
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4a3e      	ldr	r2, [pc, #248]	@ (8002a6c <xTaskIncrementTick+0x154>)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b3e      	ldr	r3, [pc, #248]	@ (8002a70 <xTaskIncrementTick+0x158>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a70 <xTaskIncrementTick+0x158>)
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	f000 f996 	bl	8002cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002984:	4b3b      	ldr	r3, [pc, #236]	@ (8002a74 <xTaskIncrementTick+0x15c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	429a      	cmp	r2, r3
 800298c:	d348      	bcc.n	8002a20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800298e:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <xTaskIncrementTick+0x150>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002998:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <xTaskIncrementTick+0x15c>)
 800299a:	f04f 32ff 	mov.w	r2, #4294967295
 800299e:	601a      	str	r2, [r3, #0]
					break;
 80029a0:	e03e      	b.n	8002a20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a2:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <xTaskIncrementTick+0x150>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d203      	bcs.n	80029c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002a74 <xTaskIncrementTick+0x15c>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029c0:	e02e      	b.n	8002a20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3304      	adds	r3, #4
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fca1 	bl	800230e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3318      	adds	r3, #24
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fc98 	bl	800230e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <xTaskIncrementTick+0x160>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <xTaskIncrementTick+0x160>)
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a7c <xTaskIncrementTick+0x164>)
 80029fe:	441a      	add	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f7ff fc24 	bl	8002254 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <xTaskIncrementTick+0x168>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d3b9      	bcc.n	800298e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a1e:	e7b6      	b.n	800298e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <xTaskIncrementTick+0x168>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a26:	4915      	ldr	r1, [pc, #84]	@ (8002a7c <xTaskIncrementTick+0x164>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d901      	bls.n	8002a3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <xTaskIncrementTick+0x16c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e004      	b.n	8002a54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <xTaskIncrementTick+0x170>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <xTaskIncrementTick+0x170>)
 8002a52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002a54:	697b      	ldr	r3, [r7, #20]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000440 	.word	0x20000440
 8002a64:	2000041c 	.word	0x2000041c
 8002a68:	200003d0 	.word	0x200003d0
 8002a6c:	200003d4 	.word	0x200003d4
 8002a70:	20000430 	.word	0x20000430
 8002a74:	20000438 	.word	0x20000438
 8002a78:	20000420 	.word	0x20000420
 8002a7c:	2000031c 	.word	0x2000031c
 8002a80:	20000318 	.word	0x20000318
 8002a84:	2000042c 	.word	0x2000042c
 8002a88:	20000428 	.word	0x20000428

08002a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a92:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <vTaskSwitchContext+0xa4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <vTaskSwitchContext+0xa8>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002aa0:	e040      	b.n	8002b24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <vTaskSwitchContext+0xa8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <vTaskSwitchContext+0xac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f1c3 031f 	rsb	r3, r3, #31
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	491f      	ldr	r1, [pc, #124]	@ (8002b3c <vTaskSwitchContext+0xb0>)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <vTaskSwitchContext+0x5e>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	607b      	str	r3, [r7, #4]
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <vTaskSwitchContext+0x5a>
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <vTaskSwitchContext+0xb0>)
 8002af6:	4413      	add	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d104      	bne.n	8002b1a <vTaskSwitchContext+0x8e>
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <vTaskSwitchContext+0xb4>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	20000440 	.word	0x20000440
 8002b34:	2000042c 	.word	0x2000042c
 8002b38:	20000420 	.word	0x20000420
 8002b3c:	2000031c 	.word	0x2000031c
 8002b40:	20000318 	.word	0x20000318

08002b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b4c:	f000 f852 	bl	8002bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b50:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <prvIdleTask+0x28>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d9f9      	bls.n	8002b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <prvIdleTask+0x2c>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b68:	e7f0      	b.n	8002b4c <prvIdleTask+0x8>
 8002b6a:	bf00      	nop
 8002b6c:	2000031c 	.word	0x2000031c
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e00c      	b.n	8002b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <prvInitialiseTaskLists+0x60>)
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fb33 	bl	80021fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3301      	adds	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	d9ef      	bls.n	8002b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ba0:	480d      	ldr	r0, [pc, #52]	@ (8002bd8 <prvInitialiseTaskLists+0x64>)
 8002ba2:	f7ff fb2a 	bl	80021fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ba6:	480d      	ldr	r0, [pc, #52]	@ (8002bdc <prvInitialiseTaskLists+0x68>)
 8002ba8:	f7ff fb27 	bl	80021fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bac:	480c      	ldr	r0, [pc, #48]	@ (8002be0 <prvInitialiseTaskLists+0x6c>)
 8002bae:	f7ff fb24 	bl	80021fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bb2:	480c      	ldr	r0, [pc, #48]	@ (8002be4 <prvInitialiseTaskLists+0x70>)
 8002bb4:	f7ff fb21 	bl	80021fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bb8:	480b      	ldr	r0, [pc, #44]	@ (8002be8 <prvInitialiseTaskLists+0x74>)
 8002bba:	f7ff fb1e 	bl	80021fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <prvInitialiseTaskLists+0x78>)
 8002bc0:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <prvInitialiseTaskLists+0x64>)
 8002bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <prvInitialiseTaskLists+0x7c>)
 8002bc6:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <prvInitialiseTaskLists+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000031c 	.word	0x2000031c
 8002bd8:	200003a8 	.word	0x200003a8
 8002bdc:	200003bc 	.word	0x200003bc
 8002be0:	200003d8 	.word	0x200003d8
 8002be4:	200003ec 	.word	0x200003ec
 8002be8:	20000404 	.word	0x20000404
 8002bec:	200003d0 	.word	0x200003d0
 8002bf0:	200003d4 	.word	0x200003d4

08002bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bfa:	e019      	b.n	8002c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002bfc:	f000 fa2c 	bl	8003058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c00:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <prvCheckTasksWaitingTermination+0x50>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb7e 	bl	800230e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <prvCheckTasksWaitingTermination+0x54>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	4a0b      	ldr	r2, [pc, #44]	@ (8002c48 <prvCheckTasksWaitingTermination+0x54>)
 8002c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <prvCheckTasksWaitingTermination+0x58>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <prvCheckTasksWaitingTermination+0x58>)
 8002c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c26:	f000 fa49 	bl	80030bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f810 	bl	8002c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <prvCheckTasksWaitingTermination+0x58>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e1      	bne.n	8002bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200003ec 	.word	0x200003ec
 8002c48:	20000418 	.word	0x20000418
 8002c4c:	20000400 	.word	0x20000400

08002c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fba4 	bl	80033b4 <vPortFree>
				vPortFree( pxTCB );
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fba1 	bl	80033b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c72:	e019      	b.n	8002ca8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d103      	bne.n	8002c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fb98 	bl	80033b4 <vPortFree>
	}
 8002c84:	e010      	b.n	8002ca8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d00b      	beq.n	8002ca8 <prvDeleteTCB+0x58>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	60fb      	str	r3, [r7, #12]
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <prvDeleteTCB+0x54>
	}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <prvResetNextTaskUnblockTime+0x38>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <prvResetNextTaskUnblockTime+0x3c>)
 8002cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cc8:	e008      	b.n	8002cdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <prvResetNextTaskUnblockTime+0x38>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <prvResetNextTaskUnblockTime+0x3c>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	200003d0 	.word	0x200003d0
 8002cec:	20000438 	.word	0x20000438

08002cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <xTaskGetSchedulerState+0x34>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	e008      	b.n	8002d16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d04:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <xTaskGetSchedulerState+0x38>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	e001      	b.n	8002d16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d16:	687b      	ldr	r3, [r7, #4]
	}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	20000424 	.word	0x20000424
 8002d28:	20000440 	.word	0x20000440

08002d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d36:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d3c:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3304      	adds	r3, #4
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fae3 	bl	800230e <uxListRemove>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d4e:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	2201      	movs	r2, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4013      	ands	r3, r2
 8002d62:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d10a      	bne.n	8002d84 <prvAddCurrentTaskToDelayedList+0x58>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d74:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	481a      	ldr	r0, [pc, #104]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d7e:	f7ff fa69 	bl	8002254 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d82:	e026      	b.n	8002dd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d8c:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d209      	bcs.n	8002db0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3304      	adds	r3, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f7ff fa77 	bl	800229c <vListInsert>
}
 8002dae:	e010      	b.n	8002dd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7ff fa6d 	bl	800229c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d202      	bcs.n	8002dd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002dcc:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6013      	str	r3, [r2, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000041c 	.word	0x2000041c
 8002de0:	20000318 	.word	0x20000318
 8002de4:	20000420 	.word	0x20000420
 8002de8:	20000404 	.word	0x20000404
 8002dec:	200003d4 	.word	0x200003d4
 8002df0:	200003d0 	.word	0x200003d0
 8002df4:	20000438 	.word	0x20000438

08002df8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3b04      	subs	r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3b04      	subs	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3b04      	subs	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e28:	4a0c      	ldr	r2, [pc, #48]	@ (8002e5c <pxPortInitialiseStack+0x64>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3b14      	subs	r3, #20
 8002e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3b04      	subs	r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f06f 0202 	mvn.w	r2, #2
 8002e46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3b20      	subs	r3, #32
 8002e4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	08002e61 	.word	0x08002e61

08002e60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e6a:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <prvTaskExitError+0x58>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d00b      	beq.n	8002e8c <prvTaskExitError+0x2c>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60fb      	str	r3, [r7, #12]
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <prvTaskExitError+0x28>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	60bb      	str	r3, [r7, #8]
}
 8002e9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ea0:	bf00      	nop
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0fc      	beq.n	8002ea2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000004c 	.word	0x2000004c
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ec0:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <pxCurrentTCBConst2>)
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6808      	ldr	r0, [r1, #0]
 8002ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	f380 8809 	msr	PSP, r0
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f380 8811 	msr	BASEPRI, r0
 8002eda:	4770      	bx	lr
 8002edc:	f3af 8000 	nop.w

08002ee0 <pxCurrentTCBConst2>:
 8002ee0:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop

08002ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ee8:	4808      	ldr	r0, [pc, #32]	@ (8002f0c <prvPortStartFirstTask+0x24>)
 8002eea:	6800      	ldr	r0, [r0, #0]
 8002eec:	6800      	ldr	r0, [r0, #0]
 8002eee:	f380 8808 	msr	MSP, r0
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f380 8814 	msr	CONTROL, r0
 8002efa:	b662      	cpsie	i
 8002efc:	b661      	cpsie	f
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	df00      	svc	0
 8002f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f0a:	bf00      	nop
 8002f0c:	e000ed08 	.word	0xe000ed08

08002f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f16:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <xPortStartScheduler+0x124>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a47      	ldr	r2, [pc, #284]	@ (8003038 <xPortStartScheduler+0x128>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10b      	bne.n	8002f38 <xPortStartScheduler+0x28>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f38:	4b3e      	ldr	r3, [pc, #248]	@ (8003034 <xPortStartScheduler+0x124>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800303c <xPortStartScheduler+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10b      	bne.n	8002f5a <xPortStartScheduler+0x4a>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60fb      	str	r3, [r7, #12]
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f5a:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <xPortStartScheduler+0x130>)
 8002f5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	22ff      	movs	r2, #255	@ 0xff
 8002f6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <xPortStartScheduler+0x134>)
 8002f80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <xPortStartScheduler+0x138>)
 8002f84:	2207      	movs	r2, #7
 8002f86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f88:	e009      	b.n	8002f9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003048 <xPortStartScheduler+0x138>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	4a2d      	ldr	r2, [pc, #180]	@ (8003048 <xPortStartScheduler+0x138>)
 8002f92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa6:	2b80      	cmp	r3, #128	@ 0x80
 8002fa8:	d0ef      	beq.n	8002f8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002faa:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00b      	beq.n	8002fce <xPortStartScheduler+0xbe>
	__asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60bb      	str	r3, [r7, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	e7fd      	b.n	8002fca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fe0:	4a19      	ldr	r2, [pc, #100]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002fec:	4b17      	ldr	r3, [pc, #92]	@ (800304c <xPortStartScheduler+0x13c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a16      	ldr	r2, [pc, #88]	@ (800304c <xPortStartScheduler+0x13c>)
 8002ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <xPortStartScheduler+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	@ (800304c <xPortStartScheduler+0x13c>)
 8002ffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003004:	f000 f8da 	bl	80031bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <xPortStartScheduler+0x140>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800300e:	f000 f8f9 	bl	8003204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <xPortStartScheduler+0x144>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <xPortStartScheduler+0x144>)
 8003018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800301c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800301e:	f7ff ff63 	bl	8002ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003022:	f7ff fd33 	bl	8002a8c <vTaskSwitchContext>
	prvTaskExitError();
 8003026:	f7ff ff1b 	bl	8002e60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed00 	.word	0xe000ed00
 8003038:	410fc271 	.word	0x410fc271
 800303c:	410fc270 	.word	0x410fc270
 8003040:	e000e400 	.word	0xe000e400
 8003044:	20000444 	.word	0x20000444
 8003048:	20000448 	.word	0x20000448
 800304c:	e000ed20 	.word	0xe000ed20
 8003050:	2000004c 	.word	0x2000004c
 8003054:	e000ef34 	.word	0xe000ef34

08003058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	607b      	str	r3, [r7, #4]
}
 8003070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <vPortEnterCritical+0x5c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a0e      	ldr	r2, [pc, #56]	@ (80030b4 <vPortEnterCritical+0x5c>)
 800307a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800307c:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <vPortEnterCritical+0x5c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d110      	bne.n	80030a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <vPortEnterCritical+0x60>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	603b      	str	r3, [r7, #0]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <vPortEnterCritical+0x4a>
	}
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000004c 	.word	0x2000004c
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <vPortExitCritical+0x50>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <vPortExitCritical+0x26>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	607b      	str	r3, [r7, #4]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <vPortExitCritical+0x50>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <vPortExitCritical+0x50>)
 80030ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <vPortExitCritical+0x50>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <vPortExitCritical+0x44>
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	2000004c 	.word	0x2000004c

08003110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003110:	f3ef 8009 	mrs	r0, PSP
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <pxCurrentTCBConst>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f01e 0f10 	tst.w	lr, #16
 8003120:	bf08      	it	eq
 8003122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003134:	f380 8811 	msr	BASEPRI, r0
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f7ff fca4 	bl	8002a8c <vTaskSwitchContext>
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f380 8811 	msr	BASEPRI, r0
 800314c:	bc09      	pop	{r0, r3}
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	6808      	ldr	r0, [r1, #0]
 8003152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003156:	f01e 0f10 	tst.w	lr, #16
 800315a:	bf08      	it	eq
 800315c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003160:	f380 8809 	msr	PSP, r0
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w

08003170 <pxCurrentTCBConst>:
 8003170:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
}
 8003190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003192:	f7ff fbc1 	bl	8002918 <xTaskIncrementTick>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800319c:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <xPortSysTickHandler+0x40>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f383 8811 	msr	BASEPRI, r3
}
 80031ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <vPortSetupTimerInterrupt+0x38>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <vPortSetupTimerInterrupt+0x3c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <vPortSetupTimerInterrupt+0x40>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <vPortSetupTimerInterrupt+0x44>)
 80031da:	3b01      	subs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031de:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010
 80031f4:	e000e018 	.word	0xe000e018
 80031f8:	20000040 	.word	0x20000040
 80031fc:	10624dd3 	.word	0x10624dd3
 8003200:	e000e014 	.word	0xe000e014

08003204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003214 <vPortEnableVFP+0x10>
 8003208:	6801      	ldr	r1, [r0, #0]
 800320a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800320e:	6001      	str	r1, [r0, #0]
 8003210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003212:	bf00      	nop
 8003214:	e000ed88 	.word	0xe000ed88

08003218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003224:	f7ff facc 	bl	80027c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003228:	4b5c      	ldr	r3, [pc, #368]	@ (800339c <pvPortMalloc+0x184>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003230:	f000 f924 	bl	800347c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003234:	4b5a      	ldr	r3, [pc, #360]	@ (80033a0 <pvPortMalloc+0x188>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8095 	bne.w	800336c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01e      	beq.n	8003286 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003248:	2208      	movs	r2, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	2b00      	cmp	r3, #0
 8003258:	d015      	beq.n	8003286 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f023 0307 	bic.w	r3, r3, #7
 8003260:	3308      	adds	r3, #8
 8003262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <pvPortMalloc+0x6e>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	617b      	str	r3, [r7, #20]
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	e7fd      	b.n	8003282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d06f      	beq.n	800336c <pvPortMalloc+0x154>
 800328c:	4b45      	ldr	r3, [pc, #276]	@ (80033a4 <pvPortMalloc+0x18c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d86a      	bhi.n	800336c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003296:	4b44      	ldr	r3, [pc, #272]	@ (80033a8 <pvPortMalloc+0x190>)
 8003298:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800329a:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <pvPortMalloc+0x190>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032a0:	e004      	b.n	80032ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d903      	bls.n	80032be <pvPortMalloc+0xa6>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f1      	bne.n	80032a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032be:	4b37      	ldr	r3, [pc, #220]	@ (800339c <pvPortMalloc+0x184>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d051      	beq.n	800336c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2208      	movs	r2, #8
 80032ce:	4413      	add	r3, r2
 80032d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad2      	subs	r2, r2, r3
 80032e2:	2308      	movs	r3, #8
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d920      	bls.n	800332c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <pvPortMalloc+0xfc>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	613b      	str	r3, [r7, #16]
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003326:	69b8      	ldr	r0, [r7, #24]
 8003328:	f000 f90a 	bl	8003540 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800332c:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <pvPortMalloc+0x18c>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	4a1b      	ldr	r2, [pc, #108]	@ (80033a4 <pvPortMalloc+0x18c>)
 8003338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800333a:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <pvPortMalloc+0x18c>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <pvPortMalloc+0x194>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d203      	bcs.n	800334e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003346:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <pvPortMalloc+0x18c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <pvPortMalloc+0x194>)
 800334c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <pvPortMalloc+0x188>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	431a      	orrs	r2, r3
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <pvPortMalloc+0x198>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <pvPortMalloc+0x198>)
 800336a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800336c:	f7ff fa36 	bl	80027dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <pvPortMalloc+0x17a>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	60fb      	str	r3, [r7, #12]
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	e7fd      	b.n	800338e <pvPortMalloc+0x176>
	return pvReturn;
 8003392:	69fb      	ldr	r3, [r7, #28]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	@ 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20004054 	.word	0x20004054
 80033a0:	20004068 	.word	0x20004068
 80033a4:	20004058 	.word	0x20004058
 80033a8:	2000404c 	.word	0x2000404c
 80033ac:	2000405c 	.word	0x2000405c
 80033b0:	20004060 	.word	0x20004060

080033b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04f      	beq.n	8003466 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033c6:	2308      	movs	r3, #8
 80033c8:	425b      	negs	r3, r3
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4413      	add	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4b25      	ldr	r3, [pc, #148]	@ (8003470 <vPortFree+0xbc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <vPortFree+0x46>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	60fb      	str	r3, [r7, #12]
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <vPortFree+0x66>
	__asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	60bb      	str	r3, [r7, #8]
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	e7fd      	b.n	8003416 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <vPortFree+0xbc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01e      	beq.n	8003466 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11a      	bne.n	8003466 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <vPortFree+0xbc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003440:	f7ff f9be 	bl	80027c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <vPortFree+0xc0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4413      	add	r3, r2
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <vPortFree+0xc0>)
 8003450:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003452:	6938      	ldr	r0, [r7, #16]
 8003454:	f000 f874 	bl	8003540 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003458:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <vPortFree+0xc4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a06      	ldr	r2, [pc, #24]	@ (8003478 <vPortFree+0xc4>)
 8003460:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003462:	f7ff f9bb 	bl	80027dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20004068 	.word	0x20004068
 8003474:	20004058 	.word	0x20004058
 8003478:	20004064 	.word	0x20004064

0800347c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003482:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003486:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003488:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <prvHeapInit+0xac>)
 800348a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3307      	adds	r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003528 <prvHeapInit+0xac>)
 80034ac:	4413      	add	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034b4:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <prvHeapInit+0xb0>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	@ (800352c <prvHeapInit+0xb0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034c8:	2208      	movs	r2, #8
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a15      	ldr	r2, [pc, #84]	@ (8003530 <prvHeapInit+0xb4>)
 80034dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034de:	4b14      	ldr	r3, [pc, #80]	@ (8003530 <prvHeapInit+0xb4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034e6:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <prvHeapInit+0xb4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <prvHeapInit+0xb4>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <prvHeapInit+0xb8>)
 800350a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a09      	ldr	r2, [pc, #36]	@ (8003538 <prvHeapInit+0xbc>)
 8003512:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003514:	4b09      	ldr	r3, [pc, #36]	@ (800353c <prvHeapInit+0xc0>)
 8003516:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800351a:	601a      	str	r2, [r3, #0]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	2000044c 	.word	0x2000044c
 800352c:	2000404c 	.word	0x2000404c
 8003530:	20004054 	.word	0x20004054
 8003534:	2000405c 	.word	0x2000405c
 8003538:	20004058 	.word	0x20004058
 800353c:	20004068 	.word	0x20004068

08003540 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003548:	4b28      	ldr	r3, [pc, #160]	@ (80035ec <prvInsertBlockIntoFreeList+0xac>)
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e002      	b.n	8003554 <prvInsertBlockIntoFreeList+0x14>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d8f7      	bhi.n	800354e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d108      	bne.n	8003582 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	441a      	add	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d118      	bne.n	80035c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <prvInsertBlockIntoFreeList+0xb0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d00d      	beq.n	80035be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e008      	b.n	80035d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <prvInsertBlockIntoFreeList+0xb0>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e003      	b.n	80035d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d002      	beq.n	80035de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	2000404c 	.word	0x2000404c
 80035f0:	20004054 	.word	0x20004054

080035f4 <memset>:
 80035f4:	4402      	add	r2, r0
 80035f6:	4603      	mov	r3, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4d0d      	ldr	r5, [pc, #52]	@ (800363c <__libc_init_array+0x38>)
 8003608:	4c0d      	ldr	r4, [pc, #52]	@ (8003640 <__libc_init_array+0x3c>)
 800360a:	1b64      	subs	r4, r4, r5
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	2600      	movs	r6, #0
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	4d0b      	ldr	r5, [pc, #44]	@ (8003644 <__libc_init_array+0x40>)
 8003616:	4c0c      	ldr	r4, [pc, #48]	@ (8003648 <__libc_init_array+0x44>)
 8003618:	f000 f818 	bl	800364c <_init>
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	2600      	movs	r6, #0
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	080036fc 	.word	0x080036fc
 8003640:	080036fc 	.word	0x080036fc
 8003644:	080036fc 	.word	0x080036fc
 8003648:	08003700 	.word	0x08003700

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
