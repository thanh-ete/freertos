
006Queue_Structured.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000536c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080056d4  080056d4  000066d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056dc  080056dc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056dc  080056dc  000066dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080056e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004174  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200041d4  200041d4  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c839  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c9  00000000  00000000  000138c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  00015d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084e  00000000  00000000  00016878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bb0  00000000  00000000  000170c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2b7  00000000  00000000  00038c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab3f  00000000  00000000  00046f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111a6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003008  00000000  00000000  00111ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00114ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054e4 	.word	0x080054e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080054e4 	.word	0x080054e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	200000d0 	.word	0x200000d0

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fb5f 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f867 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f8f9 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 f8cd 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /*--------------Create Queue--------------*/
  St_Queue_Handler = xQueueCreate(2, sizeof(my_struct));
 80005ba:	2200      	movs	r2, #0
 80005bc:	210c      	movs	r1, #12
 80005be:	2002      	movs	r0, #2
 80005c0:	f002 fcbe 	bl	8002f40 <xQueueGenericCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a21      	ldr	r2, [pc, #132]	@ (800064c <main+0xa8>)
 80005c8:	6013      	str	r3, [r2, #0]

  if(St_Queue_Handler == 0 )
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <main+0xa8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10d      	bne.n	80005ee <main+0x4a>
  {
	char *str = "Unable to create STRUCTURE Queue\n\n" ;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <main+0xac>)
 80005d4:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f7ff fdfa 	bl	80001d0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	6839      	ldr	r1, [r7, #0]
 80005e6:	481b      	ldr	r0, [pc, #108]	@ (8000654 <main+0xb0>)
 80005e8:	f001 fbda 	bl	8001da0 <HAL_UART_Transmit>
 80005ec:	e00c      	b.n	8000608 <main+0x64>
  }
  else
  {
	  char *str = "STRUCTURE Queue Created successfully\n\n";
 80005ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <main+0xb4>)
 80005f0:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff fdec 	bl	80001d0 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4814      	ldr	r0, [pc, #80]	@ (8000654 <main+0xb0>)
 8000604:	f001 fbcc 	bl	8001da0 <HAL_UART_Transmit>
  }
  /*--------------Create Task --------------*/
  xTaskCreate(Sender1_Task, "SENDER1", 128, NULL, 2, &Sender1_Task_Handler);
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <main+0xb8>)
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	4912      	ldr	r1, [pc, #72]	@ (8000660 <main+0xbc>)
 8000616:	4813      	ldr	r0, [pc, #76]	@ (8000664 <main+0xc0>)
 8000618:	f003 f840 	bl	800369c <xTaskCreate>
  xTaskCreate(Sender2_Task, "SENDER2", 128, NULL, 2, &Sender2_Task_Handler);
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <main+0xc4>)
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	4910      	ldr	r1, [pc, #64]	@ (800066c <main+0xc8>)
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <main+0xcc>)
 800062c:	f003 f836 	bl	800369c <xTaskCreate>
  xTaskCreate(Receiver_Task, "RECEIVER", 128, NULL, 1, &Receive_Task_Handler);
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <main+0xd0>)
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2301      	movs	r3, #1
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	490e      	ldr	r1, [pc, #56]	@ (8000678 <main+0xd4>)
 800063e:	480f      	ldr	r0, [pc, #60]	@ (800067c <main+0xd8>)
 8000640:	f003 f82c 	bl	800369c <xTaskCreate>

  /*--------------Start Schedule --------------*/
  vTaskStartScheduler();
 8000644:	f003 f998 	bl	8003978 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <main+0xa4>
 800064c:	20000318 	.word	0x20000318
 8000650:	080054fc 	.word	0x080054fc
 8000654:	200002d0 	.word	0x200002d0
 8000658:	08005520 	.word	0x08005520
 800065c:	2000031c 	.word	0x2000031c
 8000660:	08005548 	.word	0x08005548
 8000664:	080007f9 	.word	0x080007f9
 8000668:	20000320 	.word	0x20000320
 800066c:	08005550 	.word	0x08005550
 8000670:	080008bd 	.word	0x080008bd
 8000674:	20000324 	.word	0x20000324
 8000678:	08005558 	.word	0x08005558
 800067c:	08000981 	.word	0x08000981

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 faa8 	bl	8004be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f4:	23a8      	movs	r3, #168	@ 0xa8
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fe63 	bl	80013d0 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f986 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f8c4 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073e:	f000 f96f 	bl	8000a20 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fab8 	bl	8001d00 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f943 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200002d0 	.word	0x200002d0
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_GPIO_Init+0x4c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <MX_GPIO_Init+0x4c>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_GPIO_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_GPIO_Init+0x4c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <MX_GPIO_Init+0x4c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_GPIO_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <Sender1_Task>:

/* USER CODE BEGIN 4 */
/*--------------Sender Task 1--------------*/
void Sender1_Task(void *argument)
  {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	  my_struct *ptrtostruct;
	  uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000800:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000804:	617b      	str	r3, [r7, #20]
	  while(1)
	  {
			  char *str = "Entered SENDER1_Task\n about to SEND to the queue\n\n";
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <Sender1_Task+0xac>)
 8000808:	613b      	str	r3, [r7, #16]
			  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800080a:	6938      	ldr	r0, [r7, #16]
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	4823      	ldr	r0, [pc, #140]	@ (80008a8 <Sender1_Task+0xb0>)
 800081c:	f001 fac0 	bl	8001da0 <HAL_UART_Transmit>

			  /*--------------Allocate Memory to the prt--------------*/
			  ptrtostruct = pvPortMalloc(sizeof(my_struct));
 8000820:	200c      	movs	r0, #12
 8000822:	f003 ffd1 	bl	80047c8 <pvPortMalloc>
 8000826:	4603      	mov	r3, r0
 8000828:	60bb      	str	r3, [r7, #8]

			  /*--------------Load the data--------------*/
			  ptrtostruct->counter =  1 + indx1;
 800082a:	4b20      	ldr	r3, [pc, #128]	@ (80008ac <Sender1_Task+0xb4>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3201      	adds	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
			  ptrtostruct->large_value = 1000 + indx1*100;
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <Sender1_Task+0xb4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	4413      	add	r3, r2
 8000840:	461a      	mov	r2, r3
 8000842:	0091      	lsls	r1, r2, #2
 8000844:	461a      	mov	r2, r3
 8000846:	460b      	mov	r3, r1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b29a      	uxth	r2, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8000854:	b292      	uxth	r2, r2
 8000856:	811a      	strh	r2, [r3, #8]
			  ptrtostruct->str = "HELLO FROM SENDER 1";
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4a15      	ldr	r2, [pc, #84]	@ (80008b0 <Sender1_Task+0xb8>)
 800085c:	601a      	str	r2, [r3, #0]

		  /*--------------Send to the Queue--------------*/
		  if(xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <Sender1_Task+0xbc>)
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	f107 0108 	add.w	r1, r7, #8
 8000866:	2300      	movs	r3, #0
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	f002 fbc2 	bl	8002ff4 <xQueueGenericSend>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10c      	bne.n	8000890 <Sender1_Task+0x98>
		  {
			  char *str2 = " Successfully sent the to the queue\nLeaving SENDER1_Task\n\n\n";
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <Sender1_Task+0xc0>)
 8000878:	60fb      	str	r3, [r7, #12]
			  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff fca8 	bl	80001d0 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <Sender1_Task+0xb0>)
 800088c:	f001 fa88 	bl	8001da0 <HAL_UART_Transmit>
		  }
		  indx1 = indx1 + 1;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <Sender1_Task+0xb4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <Sender1_Task+0xb4>)
 8000898:	6013      	str	r3, [r2, #0]
		  vTaskDelay(TickDelay);
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f003 f836 	bl	800390c <vTaskDelay>
	  {
 80008a0:	e7b1      	b.n	8000806 <Sender1_Task+0xe>
 80008a2:	bf00      	nop
 80008a4:	08005564 	.word	0x08005564
 80008a8:	200002d0 	.word	0x200002d0
 80008ac:	20000328 	.word	0x20000328
 80008b0:	08005598 	.word	0x08005598
 80008b4:	20000318 	.word	0x20000318
 80008b8:	080055ac 	.word	0x080055ac

080008bc <Sender2_Task>:
  }

  /*--------------Sender Task 2--------------*/

    void Sender2_Task(void *argument)
    {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  	  my_struct *ptrtostruct;
  	  uint32_t TickDelay = pdMS_TO_TICKS(2000);
 80008c4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008c8:	617b      	str	r3, [r7, #20]
  	  while(1)
  	  {
  			  char *str = "Entered SENDER1_Task\n about to SEND to the queue\n\n";
 80008ca:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <Sender2_Task+0xac>)
 80008cc:	613b      	str	r3, [r7, #16]
  			  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008ce:	6938      	ldr	r0, [r7, #16]
 80008d0:	f7ff fc7e 	bl	80001d0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	4823      	ldr	r0, [pc, #140]	@ (800096c <Sender2_Task+0xb0>)
 80008e0:	f001 fa5e 	bl	8001da0 <HAL_UART_Transmit>

  			  /*--------------Allocate Memory to the prt--------------*/
  			  ptrtostruct = pvPortMalloc(sizeof(my_struct));
 80008e4:	200c      	movs	r0, #12
 80008e6:	f003 ff6f 	bl	80047c8 <pvPortMalloc>
 80008ea:	4603      	mov	r3, r0
 80008ec:	60bb      	str	r3, [r7, #8]

  			  /*--------------Load the data--------------*/
  			  ptrtostruct->counter =  1 + indx2;
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <Sender2_Task+0xb4>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	3201      	adds	r2, #1
 80008f6:	605a      	str	r2, [r3, #4]
  			  ptrtostruct->large_value = 1000 + indx2*100;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <Sender2_Task+0xb4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	4413      	add	r3, r2
 8000904:	461a      	mov	r2, r3
 8000906:	0091      	lsls	r1, r2, #2
 8000908:	461a      	mov	r2, r3
 800090a:	460b      	mov	r3, r1
 800090c:	4413      	add	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	b29a      	uxth	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8000918:	b292      	uxth	r2, r2
 800091a:	811a      	strh	r2, [r3, #8]
  			  ptrtostruct->str = "HELLO FROM SENDER 2";
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <Sender2_Task+0xb8>)
 8000920:	601a      	str	r2, [r3, #0]

  		  /*--------------Send to the Queue--------------*/
  		  if(xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <Sender2_Task+0xbc>)
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	f107 0108 	add.w	r1, r7, #8
 800092a:	2300      	movs	r3, #0
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	f002 fb60 	bl	8002ff4 <xQueueGenericSend>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10c      	bne.n	8000954 <Sender2_Task+0x98>
  		  {
  			  char *str2 = " Successfully sent the to the queue\nLeaving SENDER1_Task\n\n\n";
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <Sender2_Task+0xc0>)
 800093c:	60fb      	str	r3, [r7, #12]
  			  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff fc46 	bl	80001d0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	68f9      	ldr	r1, [r7, #12]
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <Sender2_Task+0xb0>)
 8000950:	f001 fa26 	bl	8001da0 <HAL_UART_Transmit>
  		  }
  		  indx2 = indx2 + 1;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <Sender2_Task+0xb4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <Sender2_Task+0xb4>)
 800095c:	6013      	str	r3, [r2, #0]
  		  vTaskDelay(TickDelay);
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f002 ffd4 	bl	800390c <vTaskDelay>
  	  {
 8000964:	e7b1      	b.n	80008ca <Sender2_Task+0xe>
 8000966:	bf00      	nop
 8000968:	08005564 	.word	0x08005564
 800096c:	200002d0 	.word	0x200002d0
 8000970:	2000032c 	.word	0x2000032c
 8000974:	080055e8 	.word	0x080055e8
 8000978:	20000318 	.word	0x20000318
 800097c:	080055ac 	.word	0x080055ac

08000980 <Receiver_Task>:
  	  }
    }

    /*--------------Receive Task--------------*/
    void Receiver_Task (void *argument)
    {
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
    	my_struct *Rptrtostruct;
    	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 8000988:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800098c:	617b      	str	r3, [r7, #20]
    	char *ptr;

    	while (1)
    	{
    		char *str = "Entered RECEIVER Task\n about to RECEIVE FROM the queue\n\n";
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <Receiver_Task+0x90>)
 8000990:	613b      	str	r3, [r7, #16]
    		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000992:	6938      	ldr	r0, [r7, #16]
 8000994:	f7ff fc1c 	bl	80001d0 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	6939      	ldr	r1, [r7, #16]
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <Receiver_Task+0x94>)
 80009a4:	f001 f9fc 	bl	8001da0 <HAL_UART_Transmit>

    		/**** RECEIVE FROM QUEUE *****/
    		if (xQueueReceive(St_Queue_Handler, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <Receiver_Task+0x98>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f107 0108 	add.w	r1, r7, #8
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fc1f 	bl	80031f8 <xQueueReceive>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d11e      	bne.n	80009fe <Receiver_Task+0x7e>
    		{
    			ptr = pvPortMalloc(100 * sizeof (char)); // allocate memory for the string
 80009c0:	2064      	movs	r0, #100	@ 0x64
 80009c2:	f003 ff01 	bl	80047c8 <pvPortMalloc>
 80009c6:	60f8      	str	r0, [r7, #12]

    			sprintf (ptr, "Received from QUEUE:\n COUNTER = %d\n LARGE VALUE = %u\n STRING = %s\n\n\n",Rptrtostruct->counter,Rptrtostruct->large_value, Rptrtostruct->str);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	891b      	ldrh	r3, [r3, #8]
 80009d0:	4619      	mov	r1, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	460b      	mov	r3, r1
 80009da:	4910      	ldr	r1, [pc, #64]	@ (8000a1c <Receiver_Task+0x9c>)
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f004 f8e1 	bl	8004ba4 <siprintf>
    			HAL_UART_Transmit(&huart2, (uint8_t *)ptr, strlen(ptr), HAL_MAX_DELAY);
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff fbf4 	bl	80001d0 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <Receiver_Task+0x94>)
 80009f4:	f001 f9d4 	bl	8001da0 <HAL_UART_Transmit>

    			vPortFree(ptr);  // free the string memory
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f003 ffb3 	bl	8004964 <vPortFree>
    		}

    		vPortFree(Rptrtostruct);  // free the structure memory
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 ffaf 	bl	8004964 <vPortFree>

    		vTaskDelay(TickDelay);
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f002 ff80 	bl	800390c <vTaskDelay>
    	{
 8000a0c:	e7bf      	b.n	800098e <Receiver_Task+0xe>
 8000a0e:	bf00      	nop
 8000a10:	080055fc 	.word	0x080055fc
 8000a14:	200002d0 	.word	0x200002d0
 8000a18:	20000318 	.word	0x20000318
 8000a1c:	08005638 	.word	0x08005638

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <Error_Handler+0x8>

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_MspInit+0x54>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_MspInit+0x54>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_MspInit+0x54>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_MspInit+0x54>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <HAL_MspInit+0x54>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_MspInit+0x54>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	f06f 0001 	mvn.w	r0, #1
 8000a72:	f000 fa48 	bl	8000f06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <HAL_UART_MspInit+0x94>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d133      	bne.n	8000b0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <HAL_UART_MspInit+0x98>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <HAL_UART_MspInit+0x98>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_UART_MspInit+0x98>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_UART_MspInit+0x98>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <HAL_UART_MspInit+0x98>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_UART_MspInit+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aee:	2307      	movs	r3, #7
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <HAL_UART_MspInit+0x9c>)
 8000afa:	f000 facd 	bl	8001098 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	2026      	movs	r0, #38	@ 0x26
 8000b04:	f000 f9ff 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b08:	2026      	movs	r0, #38	@ 0x26
 8000b0a:	f000 fa18 	bl	8000f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f8d7 	bl	8000d10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b62:	f003 fb13 	bl	800418c <xTaskGetSchedulerState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d001      	beq.n	8000b70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b6c:	f003 fddc 	bl	8004728 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <USART2_IRQHandler+0x10>)
 8000b7a:	f001 f99d 	bl	8001eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200002d0 	.word	0x200002d0

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f004 f81c 	bl	8004bf4 <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20020000 	.word	0x20020000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	20000330 	.word	0x20000330
 8000bf0:	200041d8 	.word	0x200041d8

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 ffdb 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fcab 	bl	80005a4 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c5c:	080056e4 	.word	0x080056e4
  ldr r2, =_sbss
 8000c60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c64:	200041d4 	.word	0x200041d4

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f92b 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fec4 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f943 	bl	8000f5a <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f90b 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000334 	.word	0x20000334

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000334 	.word	0x20000334

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	@ (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff feda 	bl	8000d38 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d008      	beq.n	8000fa4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e052      	b.n	800104a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0216 	bic.w	r2, r2, #22
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <HAL_DMA_Abort+0x62>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0208 	bic.w	r2, r2, #8
 8000fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff4:	e013      	b.n	800101e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ff6:	f7ff fe9f 	bl	8000d38 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b05      	cmp	r3, #5
 8001002:	d90c      	bls.n	800101e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2220      	movs	r2, #32
 8001008:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e015      	b.n	800104a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e4      	bne.n	8000ff6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001030:	223f      	movs	r2, #63	@ 0x3f
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d004      	beq.n	8001070 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e00c      	b.n	800108a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2205      	movs	r2, #5
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e16b      	b.n	800138c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 815a 	bne.w	8001386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d005      	beq.n	80010ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b03      	cmp	r3, #3
 8001156:	d017      	beq.n	8001188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b60      	ldr	r3, [pc, #384]	@ (80013a4 <HAL_GPIO_Init+0x30c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	4a5f      	ldr	r2, [pc, #380]	@ (80013a4 <HAL_GPIO_Init+0x30c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122c:	6453      	str	r3, [r2, #68]	@ 0x44
 800122e:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <HAL_GPIO_Init+0x30c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123a:	4a5b      	ldr	r2, [pc, #364]	@ (80013a8 <HAL_GPIO_Init+0x310>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	@ (80013b0 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	@ (80013b4 <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	@ (80013b8 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	@ (80013bc <HAL_GPIO_Init+0x324>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	@ (80013c0 <HAL_GPIO_Init+0x328>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <HAL_GPIO_Init+0x32c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	@ (80013c8 <HAL_GPIO_Init+0x330>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x20a>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x310>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <HAL_GPIO_Init+0x334>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a32      	ldr	r2, [pc, #200]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b30      	ldr	r3, [pc, #192]	@ (80013cc <HAL_GPIO_Init+0x334>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_GPIO_Init+0x334>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae90 	bls.w	80010b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e267      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d075      	beq.n	80014da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ee:	4b88      	ldr	r3, [pc, #544]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b85      	ldr	r3, [pc, #532]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001402:	2b08      	cmp	r3, #8
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b82      	ldr	r3, [pc, #520]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b7e      	ldr	r3, [pc, #504]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e242      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x74>
 8001436:	4b76      	ldr	r3, [pc, #472]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a75      	ldr	r2, [pc, #468]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b70      	ldr	r3, [pc, #448]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6f      	ldr	r2, [pc, #444]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6d      	ldr	r3, [pc, #436]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6c      	ldr	r2, [pc, #432]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001468:	4b69      	ldr	r3, [pc, #420]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a68      	ldr	r2, [pc, #416]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b66      	ldr	r3, [pc, #408]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc56 	bl	8000d38 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc52 	bl	8000d38 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e207      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xc0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc42 	bl	8000d38 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc3e 	bl	8000d38 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1f3      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b51      	ldr	r3, [pc, #324]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b44      	ldr	r3, [pc, #272]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b41      	ldr	r3, [pc, #260]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4937      	ldr	r1, [pc, #220]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_RCC_OscConfig+0x244>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fbf7 	bl	8000d38 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fbf3 	bl	8000d38 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a8      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4925      	ldr	r1, [pc, #148]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <HAL_RCC_OscConfig+0x244>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fbd6 	bl	8000d38 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fbd2 	bl	8000d38 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e187      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d036      	beq.n	8001628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d016      	beq.n	80015f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_RCC_OscConfig+0x248>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fbb6 	bl	8000d38 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fbb2 	bl	8000d38 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e167      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_RCC_OscConfig+0x240>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x200>
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_RCC_OscConfig+0x248>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb9f 	bl	8000d38 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e00e      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb9b 	bl	8000d38 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d907      	bls.n	800161c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e150      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	42470000 	.word	0x42470000
 8001618:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b88      	ldr	r3, [pc, #544]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ea      	bne.n	80015fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8097 	beq.w	8001764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b81      	ldr	r3, [pc, #516]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b7d      	ldr	r3, [pc, #500]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a7c      	ldr	r2, [pc, #496]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b7a      	ldr	r3, [pc, #488]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b77      	ldr	r3, [pc, #476]	@ (8001844 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b74      	ldr	r3, [pc, #464]	@ (8001844 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a73      	ldr	r2, [pc, #460]	@ (8001844 <HAL_RCC_OscConfig+0x474>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb5b 	bl	8000d38 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001686:	f7ff fb57 	bl	8000d38 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e10c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b6a      	ldr	r3, [pc, #424]	@ (8001844 <HAL_RCC_OscConfig+0x474>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x2ea>
 80016ac:	4b64      	ldr	r3, [pc, #400]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b0:	4a63      	ldr	r2, [pc, #396]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x30c>
 80016c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016dc:	4b58      	ldr	r3, [pc, #352]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a57      	ldr	r2, [pc, #348]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e8:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	4a54      	ldr	r2, [pc, #336]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d015      	beq.n	8001728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb1c 	bl	8000d38 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fb18 	bl	8000d38 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0cb      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ee      	beq.n	8001704 <HAL_RCC_OscConfig+0x334>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fb06 	bl	8000d38 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb02 	bl	8000d38 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0b5      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a38      	ldr	r2, [pc, #224]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a1 	beq.w	80018b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d05c      	beq.n	8001834 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fad6 	bl	8000d38 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fad2 	bl	8000d38 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e087      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	491b      	ldr	r1, [pc, #108]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_RCC_OscConfig+0x478>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff faab 	bl	8000d38 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff faa7 	bl	8000d38 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x416>
 8001804:	e054      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fa94 	bl	8000d38 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fa90 	bl	8000d38 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x444>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e038      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_RCC_OscConfig+0x4ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d028      	beq.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d121      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11a      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f9c2 	bl	8000d38 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff f9be 	bl	8000d38 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f922 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08005688 	.word	0x08005688
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	@ 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b73      	ldr	r3, [pc, #460]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	024b      	lsls	r3, r1, #9
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b88:	4621      	mov	r1, r4
 8001b8a:	024a      	lsls	r2, r1, #9
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b9c:	f7fe fb70 	bl	8000280 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe fb16 	bl	8000280 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	@ 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08005698 	.word	0x08005698

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08005698 	.word	0x08005698

08001d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e042      	b.n	8001d98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe feac 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2224      	movs	r2, #36	@ 0x24
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fd69 	bl	800281c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d175      	bne.n	8001eac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_UART_Transmit+0x2c>
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e06e      	b.n	8001eae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2221      	movs	r2, #33	@ 0x21
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dde:	f7fe ffab 	bl	8000d38 <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df8:	d108      	bne.n	8001e0c <HAL_UART_Transmit+0x6c>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d104      	bne.n	8001e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	e003      	b.n	8001e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e14:	e02e      	b.n	8001e74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2180      	movs	r1, #128	@ 0x80
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fb05 	bl	8002430 <UART_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e03a      	b.n	8001eae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10b      	bne.n	8001e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	3302      	adds	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e007      	b.n	8001e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1cb      	bne.n	8001e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2200      	movs	r2, #0
 8001e86:	2140      	movs	r1, #64	@ 0x40
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fad1 	bl	8002430 <UART_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e006      	b.n	8001eae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
  }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0ba      	sub	sp, #232	@ 0xe8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_UART_IRQHandler+0x66>
 8001f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fbc2 	bl	80026a0 <UART_Receive_IT>
      return;
 8001f1c:	e25b      	b.n	80023d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80de 	beq.w	80020e4 <HAL_UART_IRQHandler+0x22c>
 8001f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80d1 	beq.w	80020e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_UART_IRQHandler+0xae>
 8001f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_UART_IRQHandler+0xd2>
 8001f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_UART_IRQHandler+0xf6>
 8001f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f043 0204 	orr.w	r2, r3, #4
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d011      	beq.n	8001fde <HAL_UART_IRQHandler+0x126>
 8001fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f043 0208 	orr.w	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 81f2 	beq.w	80023cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_UART_IRQHandler+0x14e>
 8001ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fb4d 	bl	80026a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_UART_IRQHandler+0x17a>
 800202a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d04f      	beq.n	80020d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa55 	bl	80024e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002042:	2b40      	cmp	r3, #64	@ 0x40
 8002044:	d141      	bne.n	80020ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3314      	adds	r3, #20
 800204c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002054:	e853 3f00 	ldrex	r3, [r3]
 8002058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800205c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3314      	adds	r3, #20
 800206e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800207e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002082:	e841 2300 	strex	r3, r2, [r1]
 8002086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800208a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1d9      	bne.n	8002046 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d013      	beq.n	80020c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209e:	4a7e      	ldr	r2, [pc, #504]	@ (8002298 <HAL_UART_IRQHandler+0x3e0>)
 80020a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe ffd3 	bl	8001052 <HAL_DMA_Abort_IT>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020bc:	4610      	mov	r0, r2
 80020be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c0:	e00e      	b.n	80020e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f99e 	bl	8002404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c8:	e00a      	b.n	80020e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f99a 	bl	8002404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d0:	e006      	b.n	80020e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f996 	bl	8002404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80020de:	e175      	b.n	80023cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e0:	bf00      	nop
    return;
 80020e2:	e173      	b.n	80023cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 814f 	bne.w	800238c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8148 	beq.w	800238c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8141 	beq.w	800238c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212a:	2b40      	cmp	r3, #64	@ 0x40
 800212c:	f040 80b6 	bne.w	800229c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800213c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8145 	beq.w	80023d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800214a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800214e:	429a      	cmp	r2, r3
 8002150:	f080 813e 	bcs.w	80023d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800215a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002166:	f000 8088 	beq.w	800227a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	330c      	adds	r3, #12
 8002170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002174:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002178:	e853 3f00 	ldrex	r3, [r3]
 800217c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002180:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	330c      	adds	r3, #12
 8002192:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002196:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800219a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80021a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021a6:	e841 2300 	strex	r3, r2, [r1]
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80021ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1d9      	bne.n	800216a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3314      	adds	r3, #20
 80021bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80021c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3314      	adds	r3, #20
 80021d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80021de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80021e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021e6:	e841 2300 	strex	r3, r2, [r1]
 80021ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80021ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1e1      	bne.n	80021b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021fc:	e853 3f00 	ldrex	r3, [r3]
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3314      	adds	r3, #20
 8002212:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002216:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002218:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800221c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800221e:	e841 2300 	strex	r3, r2, [r1]
 8002222:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e3      	bne.n	80021f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002242:	e853 3f00 	ldrex	r3, [r3]
 8002246:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800224a:	f023 0310 	bic.w	r3, r3, #16
 800224e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	330c      	adds	r3, #12
 8002258:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800225c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800225e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002264:	e841 2300 	strex	r3, r2, [r1]
 8002268:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800226a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e3      	bne.n	8002238 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fe7c 	bl	8000f72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002288:	b29b      	uxth	r3, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	b29b      	uxth	r3, r3
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f8c1 	bl	8002418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002296:	e09b      	b.n	80023d0 <HAL_UART_IRQHandler+0x518>
 8002298:	080025a9 	.word	0x080025a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 808e 	beq.w	80023d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8089 	beq.w	80023d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80022e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80022e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e3      	bne.n	80022c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	623b      	str	r3, [r7, #32]
   return(result);
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800231e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e3      	bne.n	80022fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0310 	bic.w	r3, r3, #16
 8002356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002364:	61fa      	str	r2, [r7, #28]
 8002366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	617b      	str	r3, [r7, #20]
   return(result);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e3      	bne.n	8002340 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800237e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f847 	bl	8002418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800238a:	e023      	b.n	80023d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800238c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_UART_IRQHandler+0x4f4>
 8002398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800239c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f913 	bl	80025d0 <UART_Transmit_IT>
    return;
 80023aa:	e014      	b.n	80023d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <HAL_UART_IRQHandler+0x51e>
 80023b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f953 	bl	8002670 <UART_EndTransmit_IT>
    return;
 80023ca:	e004      	b.n	80023d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80023cc:	bf00      	nop
 80023ce:	e002      	b.n	80023d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80023d0:	bf00      	nop
 80023d2:	e000      	b.n	80023d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80023d4:	bf00      	nop
  }
}
 80023d6:	37e8      	adds	r7, #232	@ 0xe8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002440:	e03b      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d037      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7fe fc75 	bl	8000d38 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <UART_WaitOnFlagUntilTimeout+0x30>
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e03a      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d023      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b80      	cmp	r3, #128	@ 0x80
 8002476:	d020      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b40      	cmp	r3, #64	@ 0x40
 800247c:	d01d      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b08      	cmp	r3, #8
 800248a:	d116      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f81d 	bl	80024e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2208      	movs	r2, #8
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4013      	ands	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d0b4      	beq.n	8002442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b095      	sub	sp, #84	@ 0x54
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800250a:	643a      	str	r2, [r7, #64]	@ 0x40
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e5      	bne.n	80024ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3314      	adds	r3, #20
 8002524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	61fb      	str	r3, [r7, #28]
   return(result);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3314      	adds	r3, #20
 800253c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800253e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002540:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e5      	bne.n	800251e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	2b01      	cmp	r3, #1
 8002558:	d119      	bne.n	800258e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	e853 3f00 	ldrex	r3, [r3]
 8002568:	60bb      	str	r3, [r7, #8]
   return(result);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f023 0310 	bic.w	r3, r3, #16
 8002570:	647b      	str	r3, [r7, #68]	@ 0x44
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800257a:	61ba      	str	r2, [r7, #24]
 800257c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6979      	ldr	r1, [r7, #20]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	613b      	str	r3, [r7, #16]
   return(result);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e5      	bne.n	800255a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800259c:	bf00      	nop
 800259e:	3754      	adds	r7, #84	@ 0x54
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7ff ff1e 	bl	8002404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b21      	cmp	r3, #33	@ 0x21
 80025e2:	d13e      	bne.n	8002662 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ec:	d114      	bne.n	8002618 <UART_Transmit_IT+0x48>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d110      	bne.n	8002618 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800260a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	1c9a      	adds	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	621a      	str	r2, [r3, #32]
 8002616:	e008      	b.n	800262a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	1c59      	adds	r1, r3, #1
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6211      	str	r1, [r2, #32]
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4619      	mov	r1, r3
 8002638:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800264c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800265c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002686:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fea3 	bl	80023dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	@ 0x30
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b22      	cmp	r3, #34	@ 0x22
 80026b2:	f040 80ae 	bne.w	8002812 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026be:	d117      	bne.n	80026f0 <UART_Receive_IT+0x50>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d113      	bne.n	80026f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	b29a      	uxth	r2, r3
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	1c9a      	adds	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80026ee:	e026      	b.n	800273e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d007      	beq.n	8002714 <UART_Receive_IT+0x74>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <UART_Receive_IT+0x82>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e008      	b.n	8002734 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800272e:	b2da      	uxtb	r2, r3
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002732:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29b      	uxth	r3, r3
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4619      	mov	r1, r3
 800274c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800274e:	2b00      	cmp	r3, #0
 8002750:	d15d      	bne.n	800280e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0220 	bic.w	r2, r2, #32
 8002760:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002770:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	2b01      	cmp	r3, #1
 8002796:	d135      	bne.n	8002804 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	613b      	str	r3, [r7, #16]
   return(result);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f023 0310 	bic.w	r3, r3, #16
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	623a      	str	r2, [r7, #32]
 80027c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e5      	bne.n	800279e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d10a      	bne.n	80027f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fe0b 	bl	8002418 <HAL_UARTEx_RxEventCallback>
 8002802:	e002      	b.n	800280a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fdf3 	bl	80023f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e002      	b.n	8002814 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3730      	adds	r7, #48	@ 0x30
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b0c0      	sub	sp, #256	@ 0x100
 8002822:	af00      	add	r7, sp, #0
 8002824:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	ea40 0301 	orr.w	r3, r0, r1
 8002844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	431a      	orrs	r2, r3
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	431a      	orrs	r2, r3
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002874:	f021 010c 	bic.w	r1, r1, #12
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002882:	430b      	orrs	r3, r1
 8002884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	6999      	ldr	r1, [r3, #24]
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	ea40 0301 	orr.w	r3, r0, r1
 80028a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b8f      	ldr	r3, [pc, #572]	@ (8002ae8 <UART_SetConfig+0x2cc>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d005      	beq.n	80028bc <UART_SetConfig+0xa0>
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b8d      	ldr	r3, [pc, #564]	@ (8002aec <UART_SetConfig+0x2d0>)
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d104      	bne.n	80028c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028bc:	f7ff fa0c 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 80028c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028c4:	e003      	b.n	80028ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff f9f3 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 80028ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d8:	f040 810c 	bne.w	8002af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028ee:	4622      	mov	r2, r4
 80028f0:	462b      	mov	r3, r5
 80028f2:	1891      	adds	r1, r2, r2
 80028f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028f6:	415b      	adcs	r3, r3
 80028f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028fe:	4621      	mov	r1, r4
 8002900:	eb12 0801 	adds.w	r8, r2, r1
 8002904:	4629      	mov	r1, r5
 8002906:	eb43 0901 	adc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800292c:	462b      	mov	r3, r5
 800292e:	eb49 0303 	adc.w	r3, r9, r3
 8002932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002942:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800294a:	460b      	mov	r3, r1
 800294c:	18db      	adds	r3, r3, r3
 800294e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002950:	4613      	mov	r3, r2
 8002952:	eb42 0303 	adc.w	r3, r2, r3
 8002956:	657b      	str	r3, [r7, #84]	@ 0x54
 8002958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800295c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002960:	f7fd fc8e 	bl	8000280 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4b61      	ldr	r3, [pc, #388]	@ (8002af0 <UART_SetConfig+0x2d4>)
 800296a:	fba3 2302 	umull	r2, r3, r3, r2
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	011c      	lsls	r4, r3, #4
 8002972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002976:	2200      	movs	r2, #0
 8002978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800297c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	1891      	adds	r1, r2, r2
 800298a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800298c:	415b      	adcs	r3, r3
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002994:	4641      	mov	r1, r8
 8002996:	eb12 0a01 	adds.w	sl, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb43 0b01 	adc.w	fp, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029b4:	4692      	mov	sl, r2
 80029b6:	469b      	mov	fp, r3
 80029b8:	4643      	mov	r3, r8
 80029ba:	eb1a 0303 	adds.w	r3, sl, r3
 80029be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029c2:	464b      	mov	r3, r9
 80029c4:	eb4b 0303 	adc.w	r3, fp, r3
 80029c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029e0:	460b      	mov	r3, r1
 80029e2:	18db      	adds	r3, r3, r3
 80029e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e6:	4613      	mov	r3, r2
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029f6:	f7fd fc43 	bl	8000280 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4611      	mov	r1, r2
 8002a00:	4b3b      	ldr	r3, [pc, #236]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002a02:	fba3 2301 	umull	r2, r3, r3, r1
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2264      	movs	r2, #100	@ 0x64
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	1acb      	subs	r3, r1, r3
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a16:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002a18:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a24:	441c      	add	r4, r3
 8002a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	1891      	adds	r1, r2, r2
 8002a3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a40:	415b      	adcs	r3, r3
 8002a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a48:	4641      	mov	r1, r8
 8002a4a:	1851      	adds	r1, r2, r1
 8002a4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a4e:	4649      	mov	r1, r9
 8002a50:	414b      	adcs	r3, r1
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a60:	4659      	mov	r1, fp
 8002a62:	00cb      	lsls	r3, r1, #3
 8002a64:	4651      	mov	r1, sl
 8002a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	00ca      	lsls	r2, r1, #3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	4642      	mov	r2, r8
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	460a      	mov	r2, r1
 8002a80:	eb42 0303 	adc.w	r3, r2, r3
 8002a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	18db      	adds	r3, r3, r3
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	eb42 0303 	adc.w	r3, r2, r3
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ab2:	f7fd fbe5 	bl	8000280 <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	2164      	movs	r1, #100	@ 0x64
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	3332      	adds	r3, #50	@ 0x32
 8002ace:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4422      	add	r2, r4
 8002ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ae4:	e106      	b.n	8002cf4 <UART_SetConfig+0x4d8>
 8002ae6:	bf00      	nop
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40011400 	.word	0x40011400
 8002af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002afe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b06:	4642      	mov	r2, r8
 8002b08:	464b      	mov	r3, r9
 8002b0a:	1891      	adds	r1, r2, r2
 8002b0c:	6239      	str	r1, [r7, #32]
 8002b0e:	415b      	adcs	r3, r3
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b16:	4641      	mov	r1, r8
 8002b18:	1854      	adds	r4, r2, r1
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	eb43 0501 	adc.w	r5, r3, r1
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	00eb      	lsls	r3, r5, #3
 8002b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	eb45 0303 	adc.w	r3, r5, r3
 8002b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b62:	4629      	mov	r1, r5
 8002b64:	008b      	lsls	r3, r1, #2
 8002b66:	4621      	mov	r1, r4
 8002b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	008a      	lsls	r2, r1, #2
 8002b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b74:	f7fd fb84 	bl	8000280 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	011c      	lsls	r4, r3, #4
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	61b9      	str	r1, [r7, #24]
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba8:	4641      	mov	r1, r8
 8002baa:	1851      	adds	r1, r2, r1
 8002bac:	6139      	str	r1, [r7, #16]
 8002bae:	4649      	mov	r1, r9
 8002bb0:	414b      	adcs	r3, r1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	00cb      	lsls	r3, r1, #3
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bca:	4651      	mov	r1, sl
 8002bcc:	00ca      	lsls	r2, r1, #3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bdc:	464b      	mov	r3, r9
 8002bde:	460a      	mov	r2, r1
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c00:	4649      	mov	r1, r9
 8002c02:	008b      	lsls	r3, r1, #2
 8002c04:	4641      	mov	r1, r8
 8002c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	008a      	lsls	r2, r1, #2
 8002c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c12:	f7fd fb35 	bl	8000280 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	@ 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	3332      	adds	r3, #50	@ 0x32
 8002c30:	4a33      	ldr	r2, [pc, #204]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c3c:	441c      	add	r4, r3
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c42:	2200      	movs	r2, #0
 8002c44:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c46:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	415b      	adcs	r3, r3
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	4649      	mov	r1, r9
 8002c64:	414b      	adcs	r3, r1
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c74:	4659      	mov	r1, fp
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4651      	mov	r1, sl
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c8e:	464b      	mov	r3, r9
 8002c90:	460a      	mov	r2, r1
 8002c92:	eb42 0303 	adc.w	r3, r2, r3
 8002c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ca2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	008b      	lsls	r3, r1, #2
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cba:	4641      	mov	r1, r8
 8002cbc:	008a      	lsls	r2, r1, #2
 8002cbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cc2:	f7fd fadd 	bl	8000280 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	@ 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	3332      	adds	r3, #50	@ 0x32
 8002cde:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4422      	add	r2, r4
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d00:	51eb851f 	.word	0x51eb851f

08002d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f103 0208 	add.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f103 0208 	add.w	r2, r3, #8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0208 	add.w	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d103      	bne.n	8002dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e00c      	b.n	8002de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e002      	b.n	8002dd4 <vListInsert+0x2e>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d2f6      	bcs.n	8002dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	601a      	str	r2, [r3, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6892      	ldr	r2, [r2, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6852      	ldr	r2, [r2, #4]
 8002e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d103      	bne.n	8002e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e98:	f001 fbb6 	bl	8004608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	68f9      	ldr	r1, [r7, #12]
 8002ea6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	441a      	add	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	22ff      	movs	r2, #255	@ 0xff
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d114      	bne.n	8002f18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01a      	beq.n	8002f2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3310      	adds	r3, #16
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 ff86 	bl	8003e0c <xTaskRemoveFromEventList>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <xQueueGenericReset+0xd0>)
 8002f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	e009      	b.n	8002f2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3310      	adds	r3, #16
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fef1 	bl	8002d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3324      	adds	r3, #36	@ 0x24
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff feec 	bl	8002d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f2c:	f001 fb9e 	bl	800466c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f30:	2301      	movs	r3, #1
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	613b      	str	r3, [r7, #16]
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3348      	adds	r3, #72	@ 0x48
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fc24 	bl	80047c8 <pvPortMalloc>
 8002f80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3348      	adds	r3, #72	@ 0x48
 8002f90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f805 	bl	8002fb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fac:	69bb      	ldr	r3, [r7, #24]
	}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e002      	b.n	8002fd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	69b8      	ldr	r0, [r7, #24]
 8002fe8:	f7ff ff40 	bl	8002e6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	@ 0x38
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <xQueueGenericSend+0x34>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <xQueueGenericSend+0x42>
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <xQueueGenericSend+0x46>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <xQueueGenericSend+0x48>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <xQueueGenericSend+0x64>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d103      	bne.n	8003066 <xQueueGenericSend+0x72>
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <xQueueGenericSend+0x76>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueGenericSend+0x78>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <xQueueGenericSend+0x94>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	623b      	str	r3, [r7, #32]
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003088:	f001 f880 	bl	800418c <xTaskGetSchedulerState>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <xQueueGenericSend+0xa4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <xQueueGenericSend+0xa8>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <xQueueGenericSend+0xaa>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <xQueueGenericSend+0xc6>
	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	61fb      	str	r3, [r7, #28]
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	e7fd      	b.n	80030b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ba:	f001 faa5 	bl	8004608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <xQueueGenericSend+0xdc>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d129      	bne.n	8003124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030d6:	f000 f971 	bl	80033bc <prvCopyDataToQueue>
 80030da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	3324      	adds	r3, #36	@ 0x24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe8f 	bl	8003e0c <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030f4:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <xQueueGenericSend+0x200>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	e00a      	b.n	800311c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800310c:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <xQueueGenericSend+0x200>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800311c:	f001 faa6 	bl	800466c <vPortExitCritical>
				return pdPASS;
 8003120:	2301      	movs	r3, #1
 8003122:	e063      	b.n	80031ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312a:	f001 fa9f 	bl	800466c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800312e:	2300      	movs	r3, #0
 8003130:	e05c      	b.n	80031ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fec9 	bl	8003ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003146:	f001 fa91 	bl	800466c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314a:	f000 fc77 	bl	8003a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800314e:	f001 fa5b 	bl	8004608 <vPortEnterCritical>
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003158:	b25b      	sxtb	r3, r3
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d103      	bne.n	8003168 <xQueueGenericSend+0x174>
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800316e:	b25b      	sxtb	r3, r3
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d103      	bne.n	800317e <xQueueGenericSend+0x18a>
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800317e:	f001 fa75 	bl	800466c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003182:	1d3a      	adds	r2, r7, #4
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 feb8 	bl	8003f00 <xTaskCheckForTimeOut>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d124      	bne.n	80031e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003198:	f000 fa08 	bl	80035ac <prvIsQueueFull>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	3310      	adds	r3, #16
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fe08 	bl	8003dc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031b2:	f000 f993 	bl	80034dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031b6:	f000 fc4f 	bl	8003a58 <xTaskResumeAll>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af7c 	bne.w	80030ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031c2:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <xQueueGenericSend+0x200>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e772      	b.n	80030ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031d6:	f000 f981 	bl	80034dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031da:	f000 fc3d 	bl	8003a58 <xTaskResumeAll>
 80031de:	e76c      	b.n	80030ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031e2:	f000 f97b 	bl	80034dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e6:	f000 fc37 	bl	8003a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3738      	adds	r7, #56	@ 0x38
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	@ 0x30
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <xQueueReceive+0x32>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	623b      	str	r3, [r7, #32]
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <xQueueReceive+0x40>
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <xQueueReceive+0x44>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <xQueueReceive+0x46>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <xQueueReceive+0x62>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	61fb      	str	r3, [r7, #28]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800325a:	f000 ff97 	bl	800418c <xTaskGetSchedulerState>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <xQueueReceive+0x72>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueReceive+0x76>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueReceive+0x78>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <xQueueReceive+0x94>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61bb      	str	r3, [r7, #24]
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800328c:	f001 f9bc 	bl	8004608 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01f      	beq.n	80032dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032a0:	f000 f8f6 	bl	8003490 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00f      	beq.n	80032d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	3310      	adds	r3, #16
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fda7 	bl	8003e0c <xTaskRemoveFromEventList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032c4:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <xQueueReceive+0x1c0>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032d4:	f001 f9ca 	bl	800466c <vPortExitCritical>
				return pdPASS;
 80032d8:	2301      	movs	r3, #1
 80032da:	e069      	b.n	80033b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e2:	f001 f9c3 	bl	800466c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e062      	b.n	80033b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032f0:	f107 0310 	add.w	r3, r7, #16
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fded 	bl	8003ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032fe:	f001 f9b5 	bl	800466c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003302:	f000 fb9b 	bl	8003a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003306:	f001 f97f 	bl	8004608 <vPortEnterCritical>
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003310:	b25b      	sxtb	r3, r3
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d103      	bne.n	8003320 <xQueueReceive+0x128>
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003326:	b25b      	sxtb	r3, r3
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d103      	bne.n	8003336 <xQueueReceive+0x13e>
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003336:	f001 f999 	bl	800466c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800333a:	1d3a      	adds	r2, r7, #4
 800333c:	f107 0310 	add.w	r3, r7, #16
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fddc 	bl	8003f00 <xTaskCheckForTimeOut>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d123      	bne.n	8003396 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800334e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003350:	f000 f916 	bl	8003580 <prvIsQueueEmpty>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	3324      	adds	r3, #36	@ 0x24
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fd2c 	bl	8003dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800336a:	f000 f8b7 	bl	80034dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800336e:	f000 fb73 	bl	8003a58 <xTaskResumeAll>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d189      	bne.n	800328c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003378:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <xQueueReceive+0x1c0>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	e780      	b.n	800328c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800338a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800338c:	f000 f8a6 	bl	80034dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003390:	f000 fb62 	bl	8003a58 <xTaskResumeAll>
 8003394:	e77a      	b.n	800328c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003398:	f000 f8a0 	bl	80034dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800339c:	f000 fb5c 	bl	8003a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a2:	f000 f8ed 	bl	8003580 <prvIsQueueEmpty>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f43f af6f 	beq.w	800328c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3730      	adds	r7, #48	@ 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d14d      	bne.n	800347e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 feee 	bl	80041c8 <xTaskPriorityDisinherit>
 80033ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e043      	b.n	800347e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d119      	bne.n	8003430 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6858      	ldr	r0, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	461a      	mov	r2, r3
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	f001 fc20 	bl	8004c4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	441a      	add	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	d32b      	bcc.n	800347e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e026      	b.n	800347e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68d8      	ldr	r0, [r3, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	461a      	mov	r2, r3
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	f001 fc06 	bl	8004c4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	425b      	negs	r3, r3
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d207      	bcs.n	800346c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	425b      	negs	r3, r3
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d105      	bne.n	800347e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	3b01      	subs	r3, #1
 800347c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003486:	697b      	ldr	r3, [r7, #20]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d303      	bcc.n	80034c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	461a      	mov	r2, r3
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f001 fbbc 	bl	8004c4c <memcpy>
	}
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034e4:	f001 f890 	bl	8004608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034f0:	e011      	b.n	8003516 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3324      	adds	r3, #36	@ 0x24
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fc84 	bl	8003e0c <xTaskRemoveFromEventList>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800350a:	f000 fd5d 	bl	8003fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3b01      	subs	r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	dce9      	bgt.n	80034f2 <prvUnlockQueue+0x16>
 800351e:	e000      	b.n	8003522 <prvUnlockQueue+0x46>
					break;
 8003520:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	22ff      	movs	r2, #255	@ 0xff
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800352a:	f001 f89f 	bl	800466c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800352e:	f001 f86b 	bl	8004608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003538:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800353a:	e011      	b.n	8003560 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3310      	adds	r3, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fc5f 	bl	8003e0c <xTaskRemoveFromEventList>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003554:	f000 fd38 	bl	8003fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	3b01      	subs	r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dce9      	bgt.n	800353c <prvUnlockQueue+0x60>
 8003568:	e000      	b.n	800356c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800356a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	22ff      	movs	r2, #255	@ 0xff
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003574:	f001 f87a 	bl	800466c <vPortExitCritical>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003588:	f001 f83e 	bl	8004608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e001      	b.n	800359e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800359e:	f001 f865 	bl	800466c <vPortExitCritical>

	return xReturn;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035b4:	f001 f828 	bl	8004608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d102      	bne.n	80035ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e001      	b.n	80035ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ce:	f001 f84d 	bl	800466c <vPortExitCritical>

	return xReturn;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08e      	sub	sp, #56	@ 0x38
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	623b      	str	r3, [r7, #32]
}
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	e7fd      	b.n	8003604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <xTaskCreateStatic+0x4a>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	61fb      	str	r3, [r7, #28]
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003626:	2354      	movs	r3, #84	@ 0x54
 8003628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b54      	cmp	r3, #84	@ 0x54
 800362e:	d00b      	beq.n	8003648 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	61bb      	str	r3, [r7, #24]
}
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003648:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01e      	beq.n	800368e <xTaskCreateStatic+0xb2>
 8003650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01b      	beq.n	800368e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003668:	2300      	movs	r3, #0
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	9302      	str	r3, [sp, #8]
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f850 	bl	8003726 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003686:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003688:	f000 f8d6 	bl	8003838 <prvAddNewTaskToReadyList>
 800368c:	e001      	b.n	8003692 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003692:	697b      	ldr	r3, [r7, #20]
	}
 8003694:	4618      	mov	r0, r3
 8003696:	3728      	adds	r7, #40	@ 0x28
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	@ 0x30
 80036a0:	af04      	add	r7, sp, #16
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 f889 	bl	80047c8 <pvPortMalloc>
 80036b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00e      	beq.n	80036dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036be:	2054      	movs	r0, #84	@ 0x54
 80036c0:	f001 f882 	bl	80047c8 <pvPortMalloc>
 80036c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80036d2:	e005      	b.n	80036e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036d4:	6978      	ldr	r0, [r7, #20]
 80036d6:	f001 f945 	bl	8004964 <vPortFree>
 80036da:	e001      	b.n	80036e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d017      	beq.n	8003716 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9303      	str	r3, [sp, #12]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f80e 	bl	8003726 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800370a:	69f8      	ldr	r0, [r7, #28]
 800370c:	f000 f894 	bl	8003838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003710:	2301      	movs	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e002      	b.n	800371c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800371c:	69bb      	ldr	r3, [r7, #24]
	}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b088      	sub	sp, #32
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800373e:	3b01      	subs	r3, #1
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f023 0307 	bic.w	r3, r3, #7
 800374c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	617b      	str	r3, [r7, #20]
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01f      	beq.n	80037b6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e012      	b.n	80037a2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	7819      	ldrb	r1, [r3, #0]
 8003784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	3334      	adds	r3, #52	@ 0x34
 800378c:	460a      	mov	r2, r1
 800378e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d9e9      	bls.n	800377c <prvInitialiseNewTask+0x56>
 80037a8:	e000      	b.n	80037ac <prvInitialiseNewTask+0x86>
			{
				break;
 80037aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037b4:	e003      	b.n	80037be <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d901      	bls.n	80037c8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c4:	2306      	movs	r3, #6
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	2200      	movs	r2, #0
 80037d8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	3304      	adds	r3, #4
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fab0 	bl	8002d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	3318      	adds	r3, #24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff faab 	bl	8002d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	f1c3 0207 	rsb	r2, r3, #7
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	68f9      	ldr	r1, [r7, #12]
 8003816:	69b8      	ldr	r0, [r7, #24]
 8003818:	f000 fdc4 	bl	80043a4 <pxPortInitialiseStack>
 800381c:	4602      	mov	r2, r0
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382e:	bf00      	nop
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003840:	f000 fee2 	bl	8004608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003844:	4b2a      	ldr	r3, [pc, #168]	@ (80038f0 <prvAddNewTaskToReadyList+0xb8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <prvAddNewTaskToReadyList+0xb8>)
 800384c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <prvAddNewTaskToReadyList+0xbc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003856:	4a27      	ldr	r2, [pc, #156]	@ (80038f4 <prvAddNewTaskToReadyList+0xbc>)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800385c:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <prvAddNewTaskToReadyList+0xb8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d110      	bne.n	8003886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003864:	f000 fbd4 	bl	8004010 <prvInitialiseTaskLists>
 8003868:	e00d      	b.n	8003886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800386a:	4b23      	ldr	r3, [pc, #140]	@ (80038f8 <prvAddNewTaskToReadyList+0xc0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003872:	4b20      	ldr	r3, [pc, #128]	@ (80038f4 <prvAddNewTaskToReadyList+0xbc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	429a      	cmp	r2, r3
 800387e:	d802      	bhi.n	8003886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003880:	4a1c      	ldr	r2, [pc, #112]	@ (80038f4 <prvAddNewTaskToReadyList+0xbc>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003886:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <prvAddNewTaskToReadyList+0xc4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3301      	adds	r3, #1
 800388c:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <prvAddNewTaskToReadyList+0xc4>)
 800388e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <prvAddNewTaskToReadyList+0xc8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <prvAddNewTaskToReadyList+0xc8>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a15      	ldr	r2, [pc, #84]	@ (8003904 <prvAddNewTaskToReadyList+0xcc>)
 80038b0:	441a      	add	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff fa50 	bl	8002d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038be:	f000 fed5 	bl	800466c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <prvAddNewTaskToReadyList+0xc0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00e      	beq.n	80038e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <prvAddNewTaskToReadyList+0xbc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d207      	bcs.n	80038e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <prvAddNewTaskToReadyList+0xd0>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000438 	.word	0x20000438
 80038f4:	20000338 	.word	0x20000338
 80038f8:	20000444 	.word	0x20000444
 80038fc:	20000454 	.word	0x20000454
 8003900:	20000440 	.word	0x20000440
 8003904:	2000033c 	.word	0x2000033c
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800391e:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <vTaskDelay+0x64>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <vTaskDelay+0x32>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	60bb      	str	r3, [r7, #8]
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	e7fd      	b.n	800393a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800393e:	f000 f87d 	bl	8003a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003942:	2100      	movs	r1, #0
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fcc7 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800394a:	f000 f885 	bl	8003a58 <xTaskResumeAll>
 800394e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003956:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <vTaskDelay+0x68>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000460 	.word	0x20000460
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003986:	463a      	mov	r2, r7
 8003988:	1d39      	adds	r1, r7, #4
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fdee 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	9202      	str	r2, [sp, #8]
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2300      	movs	r3, #0
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	460a      	mov	r2, r1
 80039a6:	491f      	ldr	r1, [pc, #124]	@ (8003a24 <vTaskStartScheduler+0xac>)
 80039a8:	481f      	ldr	r0, [pc, #124]	@ (8003a28 <vTaskStartScheduler+0xb0>)
 80039aa:	f7ff fe17 	bl	80035dc <xTaskCreateStatic>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <vTaskStartScheduler+0xb4>)
 80039b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039b4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <vTaskStartScheduler+0xb4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e001      	b.n	80039c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d116      	bne.n	80039fa <vTaskStartScheduler+0x82>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	613b      	str	r3, [r7, #16]
}
 80039de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039e0:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <vTaskStartScheduler+0xb8>)
 80039e2:	f04f 32ff 	mov.w	r2, #4294967295
 80039e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <vTaskStartScheduler+0xbc>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <vTaskStartScheduler+0xc0>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039f4:	f000 fd64 	bl	80044c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039f8:	e00f      	b.n	8003a1a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d10b      	bne.n	8003a1a <vTaskStartScheduler+0xa2>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60fb      	str	r3, [r7, #12]
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	e7fd      	b.n	8003a16 <vTaskStartScheduler+0x9e>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	08005680 	.word	0x08005680
 8003a28:	08003fe1 	.word	0x08003fe1
 8003a2c:	2000045c 	.word	0x2000045c
 8003a30:	20000458 	.word	0x20000458
 8003a34:	20000444 	.word	0x20000444
 8003a38:	2000043c 	.word	0x2000043c

08003a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a40:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <vTaskSuspendAll+0x18>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	4a03      	ldr	r2, [pc, #12]	@ (8003a54 <vTaskSuspendAll+0x18>)
 8003a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	20000460 	.word	0x20000460

08003a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a66:	4b42      	ldr	r3, [pc, #264]	@ (8003b70 <xTaskResumeAll+0x118>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <xTaskResumeAll+0x2e>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	603b      	str	r3, [r7, #0]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a86:	f000 fdbf 	bl	8004608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a8a:	4b39      	ldr	r3, [pc, #228]	@ (8003b70 <xTaskResumeAll+0x118>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a37      	ldr	r2, [pc, #220]	@ (8003b70 <xTaskResumeAll+0x118>)
 8003a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a94:	4b36      	ldr	r3, [pc, #216]	@ (8003b70 <xTaskResumeAll+0x118>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d161      	bne.n	8003b60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a9c:	4b35      	ldr	r3, [pc, #212]	@ (8003b74 <xTaskResumeAll+0x11c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05d      	beq.n	8003b60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa4:	e02e      	b.n	8003b04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa6:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <xTaskResumeAll+0x120>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff f9b0 	bl	8002e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f9ab 	bl	8002e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	4b2c      	ldr	r3, [pc, #176]	@ (8003b7c <xTaskResumeAll+0x124>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b7c <xTaskResumeAll+0x124>)
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <xTaskResumeAll+0x128>)
 8003ae2:	441a      	add	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f7ff f937 	bl	8002d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af4:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <xTaskResumeAll+0x12c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003afe:	4b22      	ldr	r3, [pc, #136]	@ (8003b88 <xTaskResumeAll+0x130>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b04:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <xTaskResumeAll+0x120>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1cc      	bne.n	8003aa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b12:	f000 fb1b 	bl	800414c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b16:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <xTaskResumeAll+0x134>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d010      	beq.n	8003b44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b22:	f000 f837 	bl	8003b94 <xTaskIncrementTick>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b2c:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <xTaskResumeAll+0x130>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f1      	bne.n	8003b22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b3e:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <xTaskResumeAll+0x134>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <xTaskResumeAll+0x130>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <xTaskResumeAll+0x138>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b60:	f000 fd84 	bl	800466c <vPortExitCritical>

	return xAlreadyYielded;
 8003b64:	68bb      	ldr	r3, [r7, #8]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000460 	.word	0x20000460
 8003b74:	20000438 	.word	0x20000438
 8003b78:	200003f8 	.word	0x200003f8
 8003b7c:	20000440 	.word	0x20000440
 8003b80:	2000033c 	.word	0x2000033c
 8003b84:	20000338 	.word	0x20000338
 8003b88:	2000044c 	.word	0x2000044c
 8003b8c:	20000448 	.word	0x20000448
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8003cdc <xTaskIncrementTick+0x148>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 808f 	bne.w	8003cc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce0 <xTaskIncrementTick+0x14c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <xTaskIncrementTick+0x14c>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d121      	bne.n	8003c00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bbc:	4b49      	ldr	r3, [pc, #292]	@ (8003ce4 <xTaskIncrementTick+0x150>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	603b      	str	r3, [r7, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <xTaskIncrementTick+0x46>
 8003bde:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <xTaskIncrementTick+0x150>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	4b40      	ldr	r3, [pc, #256]	@ (8003ce8 <xTaskIncrementTick+0x154>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce4 <xTaskIncrementTick+0x150>)
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce8 <xTaskIncrementTick+0x154>)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cec <xTaskIncrementTick+0x158>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8003cec <xTaskIncrementTick+0x158>)
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	f000 faa6 	bl	800414c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c00:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d348      	bcc.n	8003c9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ce4 <xTaskIncrementTick+0x150>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d104      	bne.n	8003c1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c14:	4b36      	ldr	r3, [pc, #216]	@ (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c16:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1a:	601a      	str	r2, [r3, #0]
					break;
 8003c1c:	e03e      	b.n	8003c9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <xTaskIncrementTick+0x150>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d203      	bcs.n	8003c3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c36:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c3c:	e02e      	b.n	8003c9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f8e8 	bl	8002e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3318      	adds	r3, #24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f8df 	bl	8002e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	2201      	movs	r2, #1
 8003c60:	409a      	lsls	r2, r3
 8003c62:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <xTaskIncrementTick+0x160>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <xTaskIncrementTick+0x160>)
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <xTaskIncrementTick+0x164>)
 8003c7a:	441a      	add	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f7ff f86b 	bl	8002d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <xTaskIncrementTick+0x168>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3b9      	bcc.n	8003c0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c9a:	e7b6      	b.n	8003c0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c9c:	4b17      	ldr	r3, [pc, #92]	@ (8003cfc <xTaskIncrementTick+0x168>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca2:	4915      	ldr	r1, [pc, #84]	@ (8003cf8 <xTaskIncrementTick+0x164>)
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d901      	bls.n	8003cb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <xTaskIncrementTick+0x16c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e004      	b.n	8003cd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <xTaskIncrementTick+0x170>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <xTaskIncrementTick+0x170>)
 8003cce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cd0:	697b      	ldr	r3, [r7, #20]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000460 	.word	0x20000460
 8003ce0:	2000043c 	.word	0x2000043c
 8003ce4:	200003f0 	.word	0x200003f0
 8003ce8:	200003f4 	.word	0x200003f4
 8003cec:	20000450 	.word	0x20000450
 8003cf0:	20000458 	.word	0x20000458
 8003cf4:	20000440 	.word	0x20000440
 8003cf8:	2000033c 	.word	0x2000033c
 8003cfc:	20000338 	.word	0x20000338
 8003d00:	2000044c 	.word	0x2000044c
 8003d04:	20000448 	.word	0x20000448

08003d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d0e:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <vTaskSwitchContext+0xa4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d16:	4b26      	ldr	r3, [pc, #152]	@ (8003db0 <vTaskSwitchContext+0xa8>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d1c:	e040      	b.n	8003da0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003d1e:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <vTaskSwitchContext+0xa8>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d24:	4b23      	ldr	r3, [pc, #140]	@ (8003db4 <vTaskSwitchContext+0xac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	f1c3 031f 	rsb	r3, r3, #31
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	491f      	ldr	r1, [pc, #124]	@ (8003db8 <vTaskSwitchContext+0xb0>)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	607b      	str	r3, [r7, #4]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <vTaskSwitchContext+0x5a>
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a11      	ldr	r2, [pc, #68]	@ (8003db8 <vTaskSwitchContext+0xb0>)
 8003d72:	4413      	add	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3308      	adds	r3, #8
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d104      	bne.n	8003d96 <vTaskSwitchContext+0x8e>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	@ (8003dbc <vTaskSwitchContext+0xb4>)
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	20000460 	.word	0x20000460
 8003db0:	2000044c 	.word	0x2000044c
 8003db4:	20000440 	.word	0x20000440
 8003db8:	2000033c 	.word	0x2000033c
 8003dbc:	20000338 	.word	0x20000338

08003dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	60fb      	str	r3, [r7, #12]
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de8:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <vTaskPlaceOnEventList+0x48>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3318      	adds	r3, #24
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fe ffd8 	bl	8002da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003df6:	2101      	movs	r1, #1
 8003df8:	6838      	ldr	r0, [r7, #0]
 8003dfa:	f000 fa6d 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000338 	.word	0x20000338

08003e0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	60fb      	str	r3, [r7, #12]
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	e7fd      	b.n	8003e36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	3318      	adds	r3, #24
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe ffea 	bl	8002e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e44:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <xTaskRemoveFromEventList+0xb0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11c      	bne.n	8003e86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe ffe1 	bl	8002e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <xTaskRemoveFromEventList+0xb4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	4a16      	ldr	r2, [pc, #88]	@ (8003ec0 <xTaskRemoveFromEventList+0xb4>)
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <xTaskRemoveFromEventList+0xb8>)
 8003e76:	441a      	add	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f7fe ff6d 	bl	8002d5e <vListInsertEnd>
 8003e84:	e005      	b.n	8003e92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3318      	adds	r3, #24
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	480e      	ldr	r0, [pc, #56]	@ (8003ec8 <xTaskRemoveFromEventList+0xbc>)
 8003e8e:	f7fe ff66 	bl	8002d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <xTaskRemoveFromEventList+0xc0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d905      	bls.n	8003eac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <xTaskRemoveFromEventList+0xc4>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e001      	b.n	8003eb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003eb0:	697b      	ldr	r3, [r7, #20]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000460 	.word	0x20000460
 8003ec0:	20000440 	.word	0x20000440
 8003ec4:	2000033c 	.word	0x2000033c
 8003ec8:	200003f8 	.word	0x200003f8
 8003ecc:	20000338 	.word	0x20000338
 8003ed0:	2000044c 	.word	0x2000044c

08003ed4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <vTaskInternalSetTimeOutState+0x24>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <vTaskInternalSetTimeOutState+0x28>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	20000450 	.word	0x20000450
 8003efc:	2000043c 	.word	0x2000043c

08003f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	613b      	str	r3, [r7, #16]
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60fb      	str	r3, [r7, #12]
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f46:	f000 fb5f 	bl	8004608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <xTaskCheckForTimeOut+0xc0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d102      	bne.n	8003f6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	e023      	b.n	8003fb2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <xTaskCheckForTimeOut+0xc4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d007      	beq.n	8003f86 <xTaskCheckForTimeOut+0x86>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e015      	b.n	8003fb2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d20b      	bcs.n	8003fa8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff99 	bl	8003ed4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e004      	b.n	8003fb2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fb2:	f000 fb5b 	bl	800466c <vPortExitCritical>

	return xReturn;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2000043c 	.word	0x2000043c
 8003fc4:	20000450 	.word	0x20000450

08003fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <vTaskMissedYield+0x14>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	2000044c 	.word	0x2000044c

08003fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fe8:	f000 f852 	bl	8004090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fec:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <prvIdleTask+0x28>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d9f9      	bls.n	8003fe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <prvIdleTask+0x2c>)
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004004:	e7f0      	b.n	8003fe8 <prvIdleTask+0x8>
 8004006:	bf00      	nop
 8004008:	2000033c 	.word	0x2000033c
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	e00c      	b.n	8004036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <prvInitialiseTaskLists+0x60>)
 8004028:	4413      	add	r3, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fe6a 	bl	8002d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3301      	adds	r3, #1
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d9ef      	bls.n	800401c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800403c:	480d      	ldr	r0, [pc, #52]	@ (8004074 <prvInitialiseTaskLists+0x64>)
 800403e:	f7fe fe61 	bl	8002d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004042:	480d      	ldr	r0, [pc, #52]	@ (8004078 <prvInitialiseTaskLists+0x68>)
 8004044:	f7fe fe5e 	bl	8002d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004048:	480c      	ldr	r0, [pc, #48]	@ (800407c <prvInitialiseTaskLists+0x6c>)
 800404a:	f7fe fe5b 	bl	8002d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800404e:	480c      	ldr	r0, [pc, #48]	@ (8004080 <prvInitialiseTaskLists+0x70>)
 8004050:	f7fe fe58 	bl	8002d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004054:	480b      	ldr	r0, [pc, #44]	@ (8004084 <prvInitialiseTaskLists+0x74>)
 8004056:	f7fe fe55 	bl	8002d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <prvInitialiseTaskLists+0x78>)
 800405c:	4a05      	ldr	r2, [pc, #20]	@ (8004074 <prvInitialiseTaskLists+0x64>)
 800405e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004060:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <prvInitialiseTaskLists+0x7c>)
 8004062:	4a05      	ldr	r2, [pc, #20]	@ (8004078 <prvInitialiseTaskLists+0x68>)
 8004064:	601a      	str	r2, [r3, #0]
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	2000033c 	.word	0x2000033c
 8004074:	200003c8 	.word	0x200003c8
 8004078:	200003dc 	.word	0x200003dc
 800407c:	200003f8 	.word	0x200003f8
 8004080:	2000040c 	.word	0x2000040c
 8004084:	20000424 	.word	0x20000424
 8004088:	200003f0 	.word	0x200003f0
 800408c:	200003f4 	.word	0x200003f4

08004090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004096:	e019      	b.n	80040cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004098:	f000 fab6 	bl	8004608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409c:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <prvCheckTasksWaitingTermination+0x50>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe feb5 	bl	8002e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <prvCheckTasksWaitingTermination+0x54>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4a0b      	ldr	r2, [pc, #44]	@ (80040e4 <prvCheckTasksWaitingTermination+0x54>)
 80040b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <prvCheckTasksWaitingTermination+0x58>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <prvCheckTasksWaitingTermination+0x58>)
 80040c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040c2:	f000 fad3 	bl	800466c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f810 	bl	80040ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <prvCheckTasksWaitingTermination+0x58>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e1      	bne.n	8004098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	2000040c 	.word	0x2000040c
 80040e4:	20000438 	.word	0x20000438
 80040e8:	20000420 	.word	0x20000420

080040ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fc2e 	bl	8004964 <vPortFree>
				vPortFree( pxTCB );
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fc2b 	bl	8004964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800410e:	e019      	b.n	8004144 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004116:	2b01      	cmp	r3, #1
 8004118:	d103      	bne.n	8004122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fc22 	bl	8004964 <vPortFree>
	}
 8004120:	e010      	b.n	8004144 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004128:	2b02      	cmp	r3, #2
 800412a:	d00b      	beq.n	8004144 <prvDeleteTCB+0x58>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <prvDeleteTCB+0x54>
	}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <prvResetNextTaskUnblockTime+0x38>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800415c:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <prvResetNextTaskUnblockTime+0x3c>)
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004164:	e008      	b.n	8004178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004166:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <prvResetNextTaskUnblockTime+0x38>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <prvResetNextTaskUnblockTime+0x3c>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	200003f0 	.word	0x200003f0
 8004188:	20000458 	.word	0x20000458

0800418c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004192:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <xTaskGetSchedulerState+0x34>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800419a:	2301      	movs	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	e008      	b.n	80041b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <xTaskGetSchedulerState+0x38>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041a8:	2302      	movs	r3, #2
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e001      	b.n	80041b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041b2:	687b      	ldr	r3, [r7, #4]
	}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000444 	.word	0x20000444
 80041c4:	20000460 	.word	0x20000460

080041c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d070      	beq.n	80042c0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041de:	4b3b      	ldr	r3, [pc, #236]	@ (80042cc <xTaskPriorityDisinherit+0x104>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d00b      	beq.n	8004200 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	60bb      	str	r3, [r7, #8]
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	429a      	cmp	r2, r3
 8004234:	d044      	beq.n	80042c0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d140      	bne.n	80042c0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fde8 	bl	8002e18 <uxListRemove>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004252:	491f      	ldr	r1, [pc, #124]	@ (80042d0 <xTaskPriorityDisinherit+0x108>)
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xTaskPriorityDisinherit+0xb2>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	2201      	movs	r2, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	4b18      	ldr	r3, [pc, #96]	@ (80042d4 <xTaskPriorityDisinherit+0x10c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4013      	ands	r3, r2
 8004276:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <xTaskPriorityDisinherit+0x10c>)
 8004278:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	f1c3 0207 	rsb	r2, r3, #7
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <xTaskPriorityDisinherit+0x10c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <xTaskPriorityDisinherit+0x10c>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a08      	ldr	r2, [pc, #32]	@ (80042d0 <xTaskPriorityDisinherit+0x108>)
 80042ae:	441a      	add	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe fd51 	bl	8002d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042c0:	697b      	ldr	r3, [r7, #20]
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000338 	.word	0x20000338
 80042d0:	2000033c 	.word	0x2000033c
 80042d4:	20000440 	.word	0x20000440

080042d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042e2:	4b29      	ldr	r3, [pc, #164]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042e8:	4b28      	ldr	r3, [pc, #160]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fd92 	bl	8002e18 <uxListRemove>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042fa:	4b24      	ldr	r3, [pc, #144]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	2201      	movs	r2, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43da      	mvns	r2, r3
 8004308:	4b21      	ldr	r3, [pc, #132]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4013      	ands	r3, r2
 800430e:	4a20      	ldr	r2, [pc, #128]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d10a      	bne.n	8004330 <prvAddCurrentTaskToDelayedList+0x58>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004320:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	481a      	ldr	r0, [pc, #104]	@ (8004394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800432a:	f7fe fd18 	bl	8002d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800432e:	e026      	b.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004338:	4b14      	ldr	r3, [pc, #80]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d209      	bcs.n	800435c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004348:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fe fd26 	bl	8002da6 <vListInsert>
}
 800435a:	e010      	b.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800435c:	4b0f      	ldr	r3, [pc, #60]	@ (800439c <prvAddCurrentTaskToDelayedList+0xc4>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7fe fd1c 	bl	8002da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	429a      	cmp	r2, r3
 8004376:	d202      	bcs.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004378:	4a09      	ldr	r2, [pc, #36]	@ (80043a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6013      	str	r3, [r2, #0]
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	2000043c 	.word	0x2000043c
 800438c:	20000338 	.word	0x20000338
 8004390:	20000440 	.word	0x20000440
 8004394:	20000424 	.word	0x20000424
 8004398:	200003f4 	.word	0x200003f4
 800439c:	200003f0 	.word	0x200003f0
 80043a0:	20000458 	.word	0x20000458

080043a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3b04      	subs	r3, #4
 80043d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004408 <pxPortInitialiseStack+0x64>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b14      	subs	r3, #20
 80043de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b04      	subs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f06f 0202 	mvn.w	r2, #2
 80043f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b20      	subs	r3, #32
 80043f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043fa:	68fb      	ldr	r3, [r7, #12]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	0800440d 	.word	0x0800440d

0800440c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004416:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <prvTaskExitError+0x58>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d00b      	beq.n	8004438 <prvTaskExitError+0x2c>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <prvTaskExitError+0x28>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60bb      	str	r3, [r7, #8]
}
 800444a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800444c:	bf00      	nop
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0fc      	beq.n	800444e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c
	...

08004470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004470:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <pxCurrentTCBConst2>)
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6808      	ldr	r0, [r1, #0]
 8004476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	f380 8809 	msr	PSP, r0
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	4770      	bx	lr
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst2>:
 8004490:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004498:	4808      	ldr	r0, [pc, #32]	@ (80044bc <prvPortStartFirstTask+0x24>)
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	6800      	ldr	r0, [r0, #0]
 800449e:	f380 8808 	msr	MSP, r0
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8814 	msr	CONTROL, r0
 80044aa:	b662      	cpsie	i
 80044ac:	b661      	cpsie	f
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	df00      	svc	0
 80044b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ba:	bf00      	nop
 80044bc:	e000ed08 	.word	0xe000ed08

080044c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044c6:	4b47      	ldr	r3, [pc, #284]	@ (80045e4 <xPortStartScheduler+0x124>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a47      	ldr	r2, [pc, #284]	@ (80045e8 <xPortStartScheduler+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10b      	bne.n	80044e8 <xPortStartScheduler+0x28>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	613b      	str	r3, [r7, #16]
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044e8:	4b3e      	ldr	r3, [pc, #248]	@ (80045e4 <xPortStartScheduler+0x124>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3f      	ldr	r2, [pc, #252]	@ (80045ec <xPortStartScheduler+0x12c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10b      	bne.n	800450a <xPortStartScheduler+0x4a>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	60fb      	str	r3, [r7, #12]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800450a:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <xPortStartScheduler+0x130>)
 800450c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	22ff      	movs	r2, #255	@ 0xff
 800451a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b31      	ldr	r3, [pc, #196]	@ (80045f4 <xPortStartScheduler+0x134>)
 8004530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004532:	4b31      	ldr	r3, [pc, #196]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004538:	e009      	b.n	800454e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800453a:	4b2f      	ldr	r3, [pc, #188]	@ (80045f8 <xPortStartScheduler+0x138>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3b01      	subs	r3, #1
 8004540:	4a2d      	ldr	r2, [pc, #180]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b80      	cmp	r3, #128	@ 0x80
 8004558:	d0ef      	beq.n	800453a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800455a:	4b27      	ldr	r3, [pc, #156]	@ (80045f8 <xPortStartScheduler+0x138>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1c3 0307 	rsb	r3, r3, #7
 8004562:	2b04      	cmp	r3, #4
 8004564:	d00b      	beq.n	800457e <xPortStartScheduler+0xbe>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60bb      	str	r3, [r7, #8]
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	e7fd      	b.n	800457a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800457e:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <xPortStartScheduler+0x138>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004590:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800459c:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <xPortStartScheduler+0x13c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a16      	ldr	r2, [pc, #88]	@ (80045fc <xPortStartScheduler+0x13c>)
 80045a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045a8:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <xPortStartScheduler+0x13c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <xPortStartScheduler+0x13c>)
 80045ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80045b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045b4:	f000 f8da 	bl	800476c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045b8:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <xPortStartScheduler+0x140>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045be:	f000 f8f9 	bl	80047b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <xPortStartScheduler+0x144>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004604 <xPortStartScheduler+0x144>)
 80045c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045ce:	f7ff ff63 	bl	8004498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045d2:	f7ff fb99 	bl	8003d08 <vTaskSwitchContext>
	prvTaskExitError();
 80045d6:	f7ff ff19 	bl	800440c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	e000ed00 	.word	0xe000ed00
 80045e8:	410fc271 	.word	0x410fc271
 80045ec:	410fc270 	.word	0x410fc270
 80045f0:	e000e400 	.word	0xe000e400
 80045f4:	20000464 	.word	0x20000464
 80045f8:	20000468 	.word	0x20000468
 80045fc:	e000ed20 	.word	0xe000ed20
 8004600:	2000000c 	.word	0x2000000c
 8004604:	e000ef34 	.word	0xe000ef34

08004608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	607b      	str	r3, [r7, #4]
}
 8004620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004622:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <vPortEnterCritical+0x5c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <vPortEnterCritical+0x5c>)
 800462a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800462c:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <vPortEnterCritical+0x5c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d110      	bne.n	8004656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004634:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <vPortEnterCritical+0x60>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <vPortEnterCritical+0x4e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	603b      	str	r3, [r7, #0]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <vPortEnterCritical+0x4a>
	}
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000000c 	.word	0x2000000c
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004672:	4b12      	ldr	r3, [pc, #72]	@ (80046bc <vPortExitCritical+0x50>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <vPortExitCritical+0x26>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	607b      	str	r3, [r7, #4]
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	e7fd      	b.n	800468e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <vPortExitCritical+0x50>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	4a08      	ldr	r2, [pc, #32]	@ (80046bc <vPortExitCritical+0x50>)
 800469a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800469c:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <vPortExitCritical+0x50>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <vPortExitCritical+0x44>
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	2000000c 	.word	0x2000000c

080046c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046c0:	f3ef 8009 	mrs	r0, PSP
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <pxCurrentTCBConst>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f01e 0f10 	tst.w	lr, #16
 80046d0:	bf08      	it	eq
 80046d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	6010      	str	r0, [r2, #0]
 80046dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046e4:	f380 8811 	msr	BASEPRI, r0
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f7ff fb0a 	bl	8003d08 <vTaskSwitchContext>
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f380 8811 	msr	BASEPRI, r0
 80046fc:	bc09      	pop	{r0, r3}
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	6808      	ldr	r0, [r1, #0]
 8004702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004706:	f01e 0f10 	tst.w	lr, #16
 800470a:	bf08      	it	eq
 800470c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004710:	f380 8809 	msr	PSP, r0
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst>:
 8004720:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	607b      	str	r3, [r7, #4]
}
 8004740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004742:	f7ff fa27 	bl	8003b94 <xTaskIncrementTick>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <xPortSysTickHandler+0x40>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f383 8811 	msr	BASEPRI, r3
}
 800475e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <vPortSetupTimerInterrupt+0x34>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <vPortSetupTimerInterrupt+0x38>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800477c:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <vPortSetupTimerInterrupt+0x3c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <vPortSetupTimerInterrupt+0x40>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <vPortSetupTimerInterrupt+0x44>)
 800478a:	3b01      	subs	r3, #1
 800478c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800478e:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <vPortSetupTimerInterrupt+0x34>)
 8004790:	2207      	movs	r2, #7
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000e010 	.word	0xe000e010
 80047a4:	e000e018 	.word	0xe000e018
 80047a8:	20000000 	.word	0x20000000
 80047ac:	10624dd3 	.word	0x10624dd3
 80047b0:	e000e014 	.word	0xe000e014

080047b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80047c4 <vPortEnableVFP+0x10>
 80047b8:	6801      	ldr	r1, [r0, #0]
 80047ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047be:	6001      	str	r1, [r0, #0]
 80047c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047c2:	bf00      	nop
 80047c4:	e000ed88 	.word	0xe000ed88

080047c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047d4:	f7ff f932 	bl	8003a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047d8:	4b5c      	ldr	r3, [pc, #368]	@ (800494c <pvPortMalloc+0x184>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047e0:	f000 f924 	bl	8004a2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004950 <pvPortMalloc+0x188>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f040 8095 	bne.w	800491c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d015      	beq.n	8004836 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f023 0307 	bic.w	r3, r3, #7
 8004810:	3308      	adds	r3, #8
 8004812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <pvPortMalloc+0x6e>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	617b      	str	r3, [r7, #20]
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	e7fd      	b.n	8004832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d06f      	beq.n	800491c <pvPortMalloc+0x154>
 800483c:	4b45      	ldr	r3, [pc, #276]	@ (8004954 <pvPortMalloc+0x18c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d86a      	bhi.n	800491c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004846:	4b44      	ldr	r3, [pc, #272]	@ (8004958 <pvPortMalloc+0x190>)
 8004848:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800484a:	4b43      	ldr	r3, [pc, #268]	@ (8004958 <pvPortMalloc+0x190>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004850:	e004      	b.n	800485c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d903      	bls.n	800486e <pvPortMalloc+0xa6>
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f1      	bne.n	8004852 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800486e:	4b37      	ldr	r3, [pc, #220]	@ (800494c <pvPortMalloc+0x184>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004874:	429a      	cmp	r2, r3
 8004876:	d051      	beq.n	800491c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	4413      	add	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1ad2      	subs	r2, r2, r3
 8004892:	2308      	movs	r3, #8
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	429a      	cmp	r2, r3
 8004898:	d920      	bls.n	80048dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <pvPortMalloc+0xfc>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	613b      	str	r3, [r7, #16]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	f000 f90a 	bl	8004af0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004954 <pvPortMalloc+0x18c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <pvPortMalloc+0x18c>)
 80048e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004954 <pvPortMalloc+0x18c>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <pvPortMalloc+0x194>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d203      	bcs.n	80048fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f6:	4b17      	ldr	r3, [pc, #92]	@ (8004954 <pvPortMalloc+0x18c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a18      	ldr	r2, [pc, #96]	@ (800495c <pvPortMalloc+0x194>)
 80048fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <pvPortMalloc+0x188>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <pvPortMalloc+0x198>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	4a11      	ldr	r2, [pc, #68]	@ (8004960 <pvPortMalloc+0x198>)
 800491a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800491c:	f7ff f89c 	bl	8003a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <pvPortMalloc+0x17a>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60fb      	str	r3, [r7, #12]
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	e7fd      	b.n	800493e <pvPortMalloc+0x176>
	return pvReturn;
 8004942:	69fb      	ldr	r3, [r7, #28]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3728      	adds	r7, #40	@ 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20004074 	.word	0x20004074
 8004950:	20004088 	.word	0x20004088
 8004954:	20004078 	.word	0x20004078
 8004958:	2000406c 	.word	0x2000406c
 800495c:	2000407c 	.word	0x2000407c
 8004960:	20004080 	.word	0x20004080

08004964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04f      	beq.n	8004a16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004976:	2308      	movs	r3, #8
 8004978:	425b      	negs	r3, r3
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4b25      	ldr	r3, [pc, #148]	@ (8004a20 <vPortFree+0xbc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <vPortFree+0x46>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <vPortFree+0x66>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	60bb      	str	r3, [r7, #8]
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	e7fd      	b.n	80049c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <vPortFree+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01e      	beq.n	8004a16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11a      	bne.n	8004a16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <vPortFree+0xbc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	401a      	ands	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049f0:	f7ff f824 	bl	8003a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <vPortFree+0xc0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	4a09      	ldr	r2, [pc, #36]	@ (8004a24 <vPortFree+0xc0>)
 8004a00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a02:	6938      	ldr	r0, [r7, #16]
 8004a04:	f000 f874 	bl	8004af0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a08:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <vPortFree+0xc4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a06      	ldr	r2, [pc, #24]	@ (8004a28 <vPortFree+0xc4>)
 8004a10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a12:	f7ff f821 	bl	8003a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20004088 	.word	0x20004088
 8004a24:	20004078 	.word	0x20004078
 8004a28:	20004084 	.word	0x20004084

08004a2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004a36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a38:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <prvHeapInit+0xac>)
 8004a3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0307 	bic.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <prvHeapInit+0xac>)
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a64:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <prvHeapInit+0xb0>)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004adc <prvHeapInit+0xb0>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4413      	add	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a78:	2208      	movs	r2, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0307 	bic.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004a8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a96:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <prvHeapInit+0xb8>)
 8004aba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <prvHeapInit+0xbc>)
 8004ac2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <prvHeapInit+0xc0>)
 8004ac6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	2000046c 	.word	0x2000046c
 8004adc:	2000406c 	.word	0x2000406c
 8004ae0:	20004074 	.word	0x20004074
 8004ae4:	2000407c 	.word	0x2000407c
 8004ae8:	20004078 	.word	0x20004078
 8004aec:	20004088 	.word	0x20004088

08004af0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004af8:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <prvInsertBlockIntoFreeList+0xac>)
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e002      	b.n	8004b04 <prvInsertBlockIntoFreeList+0x14>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d8f7      	bhi.n	8004afe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d108      	bne.n	8004b32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	441a      	add	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d118      	bne.n	8004b78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d00d      	beq.n	8004b6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	441a      	add	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e008      	b.n	8004b80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e003      	b.n	8004b80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d002      	beq.n	8004b8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	2000406c 	.word	0x2000406c
 8004ba0:	20004074 	.word	0x20004074

08004ba4 <siprintf>:
 8004ba4:	b40e      	push	{r1, r2, r3}
 8004ba6:	b500      	push	{lr}
 8004ba8:	b09c      	sub	sp, #112	@ 0x70
 8004baa:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bac:	9002      	str	r0, [sp, #8]
 8004bae:	9006      	str	r0, [sp, #24]
 8004bb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bb4:	4809      	ldr	r0, [pc, #36]	@ (8004bdc <siprintf+0x38>)
 8004bb6:	9107      	str	r1, [sp, #28]
 8004bb8:	9104      	str	r1, [sp, #16]
 8004bba:	4909      	ldr	r1, [pc, #36]	@ (8004be0 <siprintf+0x3c>)
 8004bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc0:	9105      	str	r1, [sp, #20]
 8004bc2:	6800      	ldr	r0, [r0, #0]
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	a902      	add	r1, sp, #8
 8004bc8:	f000 f9a2 	bl	8004f10 <_svfiprintf_r>
 8004bcc:	9b02      	ldr	r3, [sp, #8]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	b01c      	add	sp, #112	@ 0x70
 8004bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bd8:	b003      	add	sp, #12
 8004bda:	4770      	bx	lr
 8004bdc:	20000010 	.word	0x20000010
 8004be0:	ffff0208 	.word	0xffff0208

08004be4 <memset>:
 8004be4:	4402      	add	r2, r0
 8004be6:	4603      	mov	r3, r0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d100      	bne.n	8004bee <memset+0xa>
 8004bec:	4770      	bx	lr
 8004bee:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf2:	e7f9      	b.n	8004be8 <memset+0x4>

08004bf4 <__errno>:
 8004bf4:	4b01      	ldr	r3, [pc, #4]	@ (8004bfc <__errno+0x8>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000010 	.word	0x20000010

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4d0d      	ldr	r5, [pc, #52]	@ (8004c38 <__libc_init_array+0x38>)
 8004c04:	4c0d      	ldr	r4, [pc, #52]	@ (8004c3c <__libc_init_array+0x3c>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	4d0b      	ldr	r5, [pc, #44]	@ (8004c40 <__libc_init_array+0x40>)
 8004c12:	4c0c      	ldr	r4, [pc, #48]	@ (8004c44 <__libc_init_array+0x44>)
 8004c14:	f000 fc66 	bl	80054e4 <_init>
 8004c18:	1b64      	subs	r4, r4, r5
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	42a6      	cmp	r6, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c28:	4798      	blx	r3
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c32:	4798      	blx	r3
 8004c34:	3601      	adds	r6, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	080056dc 	.word	0x080056dc
 8004c3c:	080056dc 	.word	0x080056dc
 8004c40:	080056dc 	.word	0x080056dc
 8004c44:	080056e0 	.word	0x080056e0

08004c48 <__retarget_lock_acquire_recursive>:
 8004c48:	4770      	bx	lr

08004c4a <__retarget_lock_release_recursive>:
 8004c4a:	4770      	bx	lr

08004c4c <memcpy>:
 8004c4c:	440a      	add	r2, r1
 8004c4e:	4291      	cmp	r1, r2
 8004c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c54:	d100      	bne.n	8004c58 <memcpy+0xc>
 8004c56:	4770      	bx	lr
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c62:	4291      	cmp	r1, r2
 8004c64:	d1f9      	bne.n	8004c5a <memcpy+0xe>
 8004c66:	bd10      	pop	{r4, pc}

08004c68 <_free_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d041      	beq.n	8004cf4 <_free_r+0x8c>
 8004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c74:	1f0c      	subs	r4, r1, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	18e4      	addlt	r4, r4, r3
 8004c7c:	f000 f8e0 	bl	8004e40 <__malloc_lock>
 8004c80:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf8 <_free_r+0x90>)
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	b933      	cbnz	r3, 8004c94 <_free_r+0x2c>
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	6014      	str	r4, [r2, #0]
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c90:	f000 b8dc 	b.w	8004e4c <__malloc_unlock>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d908      	bls.n	8004caa <_free_r+0x42>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	1821      	adds	r1, r4, r0
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf01      	itttt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	1809      	addeq	r1, r1, r0
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	e7ed      	b.n	8004c86 <_free_r+0x1e>
 8004caa:	461a      	mov	r2, r3
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b10b      	cbz	r3, 8004cb4 <_free_r+0x4c>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d9fa      	bls.n	8004caa <_free_r+0x42>
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	1850      	adds	r0, r2, r1
 8004cb8:	42a0      	cmp	r0, r4
 8004cba:	d10b      	bne.n	8004cd4 <_free_r+0x6c>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	1850      	adds	r0, r2, r1
 8004cc2:	4283      	cmp	r3, r0
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	d1e0      	bne.n	8004c8a <_free_r+0x22>
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	6053      	str	r3, [r2, #4]
 8004cce:	4408      	add	r0, r1
 8004cd0:	6010      	str	r0, [r2, #0]
 8004cd2:	e7da      	b.n	8004c8a <_free_r+0x22>
 8004cd4:	d902      	bls.n	8004cdc <_free_r+0x74>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	e7d6      	b.n	8004c8a <_free_r+0x22>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	1821      	adds	r1, r4, r0
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf04      	itt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	6063      	str	r3, [r4, #4]
 8004cea:	bf04      	itt	eq
 8004cec:	1809      	addeq	r1, r1, r0
 8004cee:	6021      	streq	r1, [r4, #0]
 8004cf0:	6054      	str	r4, [r2, #4]
 8004cf2:	e7ca      	b.n	8004c8a <_free_r+0x22>
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200041d0 	.word	0x200041d0

08004cfc <sbrk_aligned>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8004d3c <sbrk_aligned+0x40>)
 8004d00:	460c      	mov	r4, r1
 8004d02:	6831      	ldr	r1, [r6, #0]
 8004d04:	4605      	mov	r5, r0
 8004d06:	b911      	cbnz	r1, 8004d0e <sbrk_aligned+0x12>
 8004d08:	f000 fba6 	bl	8005458 <_sbrk_r>
 8004d0c:	6030      	str	r0, [r6, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fba1 	bl	8005458 <_sbrk_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d103      	bne.n	8004d22 <sbrk_aligned+0x26>
 8004d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d1e:	4620      	mov	r0, r4
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	1cc4      	adds	r4, r0, #3
 8004d24:	f024 0403 	bic.w	r4, r4, #3
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d0f8      	beq.n	8004d1e <sbrk_aligned+0x22>
 8004d2c:	1a21      	subs	r1, r4, r0
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fb92 	bl	8005458 <_sbrk_r>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d1f2      	bne.n	8004d1e <sbrk_aligned+0x22>
 8004d38:	e7ef      	b.n	8004d1a <sbrk_aligned+0x1e>
 8004d3a:	bf00      	nop
 8004d3c:	200041cc 	.word	0x200041cc

08004d40 <_malloc_r>:
 8004d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d44:	1ccd      	adds	r5, r1, #3
 8004d46:	f025 0503 	bic.w	r5, r5, #3
 8004d4a:	3508      	adds	r5, #8
 8004d4c:	2d0c      	cmp	r5, #12
 8004d4e:	bf38      	it	cc
 8004d50:	250c      	movcc	r5, #12
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	4606      	mov	r6, r0
 8004d56:	db01      	blt.n	8004d5c <_malloc_r+0x1c>
 8004d58:	42a9      	cmp	r1, r5
 8004d5a:	d904      	bls.n	8004d66 <_malloc_r+0x26>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	2000      	movs	r0, #0
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e3c <_malloc_r+0xfc>
 8004d6a:	f000 f869 	bl	8004e40 <__malloc_lock>
 8004d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d72:	461c      	mov	r4, r3
 8004d74:	bb44      	cbnz	r4, 8004dc8 <_malloc_r+0x88>
 8004d76:	4629      	mov	r1, r5
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7ff ffbf 	bl	8004cfc <sbrk_aligned>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	4604      	mov	r4, r0
 8004d82:	d158      	bne.n	8004e36 <_malloc_r+0xf6>
 8004d84:	f8d8 4000 	ldr.w	r4, [r8]
 8004d88:	4627      	mov	r7, r4
 8004d8a:	2f00      	cmp	r7, #0
 8004d8c:	d143      	bne.n	8004e16 <_malloc_r+0xd6>
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d04b      	beq.n	8004e2a <_malloc_r+0xea>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4639      	mov	r1, r7
 8004d96:	4630      	mov	r0, r6
 8004d98:	eb04 0903 	add.w	r9, r4, r3
 8004d9c:	f000 fb5c 	bl	8005458 <_sbrk_r>
 8004da0:	4581      	cmp	r9, r0
 8004da2:	d142      	bne.n	8004e2a <_malloc_r+0xea>
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	1a6d      	subs	r5, r5, r1
 8004da8:	4629      	mov	r1, r5
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7ff ffa6 	bl	8004cfc <sbrk_aligned>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d03a      	beq.n	8004e2a <_malloc_r+0xea>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	442b      	add	r3, r5
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	f8d8 3000 	ldr.w	r3, [r8]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	bb62      	cbnz	r2, 8004e1c <_malloc_r+0xdc>
 8004dc2:	f8c8 7000 	str.w	r7, [r8]
 8004dc6:	e00f      	b.n	8004de8 <_malloc_r+0xa8>
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	1b52      	subs	r2, r2, r5
 8004dcc:	d420      	bmi.n	8004e10 <_malloc_r+0xd0>
 8004dce:	2a0b      	cmp	r2, #11
 8004dd0:	d917      	bls.n	8004e02 <_malloc_r+0xc2>
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	6025      	str	r5, [r4, #0]
 8004dd8:	bf18      	it	ne
 8004dda:	6059      	strne	r1, [r3, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	bf08      	it	eq
 8004de0:	f8c8 1000 	streq.w	r1, [r8]
 8004de4:	5162      	str	r2, [r4, r5]
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	4630      	mov	r0, r6
 8004dea:	f000 f82f 	bl	8004e4c <__malloc_unlock>
 8004dee:	f104 000b 	add.w	r0, r4, #11
 8004df2:	1d23      	adds	r3, r4, #4
 8004df4:	f020 0007 	bic.w	r0, r0, #7
 8004df8:	1ac2      	subs	r2, r0, r3
 8004dfa:	bf1c      	itt	ne
 8004dfc:	1a1b      	subne	r3, r3, r0
 8004dfe:	50a3      	strne	r3, [r4, r2]
 8004e00:	e7af      	b.n	8004d62 <_malloc_r+0x22>
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	bf0c      	ite	eq
 8004e08:	f8c8 2000 	streq.w	r2, [r8]
 8004e0c:	605a      	strne	r2, [r3, #4]
 8004e0e:	e7eb      	b.n	8004de8 <_malloc_r+0xa8>
 8004e10:	4623      	mov	r3, r4
 8004e12:	6864      	ldr	r4, [r4, #4]
 8004e14:	e7ae      	b.n	8004d74 <_malloc_r+0x34>
 8004e16:	463c      	mov	r4, r7
 8004e18:	687f      	ldr	r7, [r7, #4]
 8004e1a:	e7b6      	b.n	8004d8a <_malloc_r+0x4a>
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	42a3      	cmp	r3, r4
 8004e22:	d1fb      	bne.n	8004e1c <_malloc_r+0xdc>
 8004e24:	2300      	movs	r3, #0
 8004e26:	6053      	str	r3, [r2, #4]
 8004e28:	e7de      	b.n	8004de8 <_malloc_r+0xa8>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 f80c 	bl	8004e4c <__malloc_unlock>
 8004e34:	e794      	b.n	8004d60 <_malloc_r+0x20>
 8004e36:	6005      	str	r5, [r0, #0]
 8004e38:	e7d6      	b.n	8004de8 <_malloc_r+0xa8>
 8004e3a:	bf00      	nop
 8004e3c:	200041d0 	.word	0x200041d0

08004e40 <__malloc_lock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	@ (8004e48 <__malloc_lock+0x8>)
 8004e42:	f7ff bf01 	b.w	8004c48 <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	200041c8 	.word	0x200041c8

08004e4c <__malloc_unlock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__malloc_unlock+0x8>)
 8004e4e:	f7ff befc 	b.w	8004c4a <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	200041c8 	.word	0x200041c8

08004e58 <__ssputs_r>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	688e      	ldr	r6, [r1, #8]
 8004e5e:	461f      	mov	r7, r3
 8004e60:	42be      	cmp	r6, r7
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	4682      	mov	sl, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4690      	mov	r8, r2
 8004e6a:	d82d      	bhi.n	8004ec8 <__ssputs_r+0x70>
 8004e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e74:	d026      	beq.n	8004ec4 <__ssputs_r+0x6c>
 8004e76:	6965      	ldr	r5, [r4, #20]
 8004e78:	6909      	ldr	r1, [r1, #16]
 8004e7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e7e:	eba3 0901 	sub.w	r9, r3, r1
 8004e82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e86:	1c7b      	adds	r3, r7, #1
 8004e88:	444b      	add	r3, r9
 8004e8a:	106d      	asrs	r5, r5, #1
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	bf38      	it	cc
 8004e90:	461d      	movcc	r5, r3
 8004e92:	0553      	lsls	r3, r2, #21
 8004e94:	d527      	bpl.n	8004ee6 <__ssputs_r+0x8e>
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7ff ff52 	bl	8004d40 <_malloc_r>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	b360      	cbz	r0, 8004efa <__ssputs_r+0xa2>
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	464a      	mov	r2, r9
 8004ea4:	f7ff fed2 	bl	8004c4c <memcpy>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	6126      	str	r6, [r4, #16]
 8004eb6:	6165      	str	r5, [r4, #20]
 8004eb8:	444e      	add	r6, r9
 8004eba:	eba5 0509 	sub.w	r5, r5, r9
 8004ebe:	6026      	str	r6, [r4, #0]
 8004ec0:	60a5      	str	r5, [r4, #8]
 8004ec2:	463e      	mov	r6, r7
 8004ec4:	42be      	cmp	r6, r7
 8004ec6:	d900      	bls.n	8004eca <__ssputs_r+0x72>
 8004ec8:	463e      	mov	r6, r7
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4641      	mov	r1, r8
 8004ed0:	f000 faa8 	bl	8005424 <memmove>
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	1b9b      	subs	r3, r3, r6
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4433      	add	r3, r6
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	f000 fac6 	bl	8005478 <_realloc_r>
 8004eec:	4606      	mov	r6, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d1e0      	bne.n	8004eb4 <__ssputs_r+0x5c>
 8004ef2:	6921      	ldr	r1, [r4, #16]
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	f7ff feb7 	bl	8004c68 <_free_r>
 8004efa:	230c      	movs	r3, #12
 8004efc:	f8ca 3000 	str.w	r3, [sl]
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e7e9      	b.n	8004ee2 <__ssputs_r+0x8a>
	...

08004f10 <_svfiprintf_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	4698      	mov	r8, r3
 8004f16:	898b      	ldrh	r3, [r1, #12]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	b09d      	sub	sp, #116	@ 0x74
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	4614      	mov	r4, r2
 8004f22:	d510      	bpl.n	8004f46 <_svfiprintf_r+0x36>
 8004f24:	690b      	ldr	r3, [r1, #16]
 8004f26:	b973      	cbnz	r3, 8004f46 <_svfiprintf_r+0x36>
 8004f28:	2140      	movs	r1, #64	@ 0x40
 8004f2a:	f7ff ff09 	bl	8004d40 <_malloc_r>
 8004f2e:	6028      	str	r0, [r5, #0]
 8004f30:	6128      	str	r0, [r5, #16]
 8004f32:	b930      	cbnz	r0, 8004f42 <_svfiprintf_r+0x32>
 8004f34:	230c      	movs	r3, #12
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b01d      	add	sp, #116	@ 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	2340      	movs	r3, #64	@ 0x40
 8004f44:	616b      	str	r3, [r5, #20]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f54:	2330      	movs	r3, #48	@ 0x30
 8004f56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050f4 <_svfiprintf_r+0x1e4>
 8004f5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f5e:	f04f 0901 	mov.w	r9, #1
 8004f62:	4623      	mov	r3, r4
 8004f64:	469a      	mov	sl, r3
 8004f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6a:	b10a      	cbz	r2, 8004f70 <_svfiprintf_r+0x60>
 8004f6c:	2a25      	cmp	r2, #37	@ 0x25
 8004f6e:	d1f9      	bne.n	8004f64 <_svfiprintf_r+0x54>
 8004f70:	ebba 0b04 	subs.w	fp, sl, r4
 8004f74:	d00b      	beq.n	8004f8e <_svfiprintf_r+0x7e>
 8004f76:	465b      	mov	r3, fp
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f7ff ff6b 	bl	8004e58 <__ssputs_r>
 8004f82:	3001      	adds	r0, #1
 8004f84:	f000 80a7 	beq.w	80050d6 <_svfiprintf_r+0x1c6>
 8004f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f8a:	445a      	add	r2, fp
 8004f8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 809f 	beq.w	80050d6 <_svfiprintf_r+0x1c6>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa2:	f10a 0a01 	add.w	sl, sl, #1
 8004fa6:	9304      	str	r3, [sp, #16]
 8004fa8:	9307      	str	r3, [sp, #28]
 8004faa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fb0:	4654      	mov	r4, sl
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	484e      	ldr	r0, [pc, #312]	@ (80050f4 <_svfiprintf_r+0x1e4>)
 8004fba:	f7fb f911 	bl	80001e0 <memchr>
 8004fbe:	9a04      	ldr	r2, [sp, #16]
 8004fc0:	b9d8      	cbnz	r0, 8004ffa <_svfiprintf_r+0xea>
 8004fc2:	06d0      	lsls	r0, r2, #27
 8004fc4:	bf44      	itt	mi
 8004fc6:	2320      	movmi	r3, #32
 8004fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fcc:	0711      	lsls	r1, r2, #28
 8004fce:	bf44      	itt	mi
 8004fd0:	232b      	movmi	r3, #43	@ 0x2b
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fdc:	d015      	beq.n	800500a <_svfiprintf_r+0xfa>
 8004fde:	9a07      	ldr	r2, [sp, #28]
 8004fe0:	4654      	mov	r4, sl
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f04f 0c0a 	mov.w	ip, #10
 8004fe8:	4621      	mov	r1, r4
 8004fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fee:	3b30      	subs	r3, #48	@ 0x30
 8004ff0:	2b09      	cmp	r3, #9
 8004ff2:	d94b      	bls.n	800508c <_svfiprintf_r+0x17c>
 8004ff4:	b1b0      	cbz	r0, 8005024 <_svfiprintf_r+0x114>
 8004ff6:	9207      	str	r2, [sp, #28]
 8004ff8:	e014      	b.n	8005024 <_svfiprintf_r+0x114>
 8004ffa:	eba0 0308 	sub.w	r3, r0, r8
 8004ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8005002:	4313      	orrs	r3, r2
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	46a2      	mov	sl, r4
 8005008:	e7d2      	b.n	8004fb0 <_svfiprintf_r+0xa0>
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	1d19      	adds	r1, r3, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	9103      	str	r1, [sp, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfbb      	ittet	lt
 8005016:	425b      	neglt	r3, r3
 8005018:	f042 0202 	orrlt.w	r2, r2, #2
 800501c:	9307      	strge	r3, [sp, #28]
 800501e:	9307      	strlt	r3, [sp, #28]
 8005020:	bfb8      	it	lt
 8005022:	9204      	strlt	r2, [sp, #16]
 8005024:	7823      	ldrb	r3, [r4, #0]
 8005026:	2b2e      	cmp	r3, #46	@ 0x2e
 8005028:	d10a      	bne.n	8005040 <_svfiprintf_r+0x130>
 800502a:	7863      	ldrb	r3, [r4, #1]
 800502c:	2b2a      	cmp	r3, #42	@ 0x2a
 800502e:	d132      	bne.n	8005096 <_svfiprintf_r+0x186>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9203      	str	r2, [sp, #12]
 8005038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800503c:	3402      	adds	r4, #2
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005104 <_svfiprintf_r+0x1f4>
 8005044:	7821      	ldrb	r1, [r4, #0]
 8005046:	2203      	movs	r2, #3
 8005048:	4650      	mov	r0, sl
 800504a:	f7fb f8c9 	bl	80001e0 <memchr>
 800504e:	b138      	cbz	r0, 8005060 <_svfiprintf_r+0x150>
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	eba0 000a 	sub.w	r0, r0, sl
 8005056:	2240      	movs	r2, #64	@ 0x40
 8005058:	4082      	lsls	r2, r0
 800505a:	4313      	orrs	r3, r2
 800505c:	3401      	adds	r4, #1
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005064:	4824      	ldr	r0, [pc, #144]	@ (80050f8 <_svfiprintf_r+0x1e8>)
 8005066:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800506a:	2206      	movs	r2, #6
 800506c:	f7fb f8b8 	bl	80001e0 <memchr>
 8005070:	2800      	cmp	r0, #0
 8005072:	d036      	beq.n	80050e2 <_svfiprintf_r+0x1d2>
 8005074:	4b21      	ldr	r3, [pc, #132]	@ (80050fc <_svfiprintf_r+0x1ec>)
 8005076:	bb1b      	cbnz	r3, 80050c0 <_svfiprintf_r+0x1b0>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	3307      	adds	r3, #7
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005086:	4433      	add	r3, r6
 8005088:	9309      	str	r3, [sp, #36]	@ 0x24
 800508a:	e76a      	b.n	8004f62 <_svfiprintf_r+0x52>
 800508c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005090:	460c      	mov	r4, r1
 8005092:	2001      	movs	r0, #1
 8005094:	e7a8      	b.n	8004fe8 <_svfiprintf_r+0xd8>
 8005096:	2300      	movs	r3, #0
 8005098:	3401      	adds	r4, #1
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4620      	mov	r0, r4
 80050a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a8:	3a30      	subs	r2, #48	@ 0x30
 80050aa:	2a09      	cmp	r2, #9
 80050ac:	d903      	bls.n	80050b6 <_svfiprintf_r+0x1a6>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0c6      	beq.n	8005040 <_svfiprintf_r+0x130>
 80050b2:	9105      	str	r1, [sp, #20]
 80050b4:	e7c4      	b.n	8005040 <_svfiprintf_r+0x130>
 80050b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ba:	4604      	mov	r4, r0
 80050bc:	2301      	movs	r3, #1
 80050be:	e7f0      	b.n	80050a2 <_svfiprintf_r+0x192>
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <_svfiprintf_r+0x1f0>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4638      	mov	r0, r7
 80050cc:	f3af 8000 	nop.w
 80050d0:	1c42      	adds	r2, r0, #1
 80050d2:	4606      	mov	r6, r0
 80050d4:	d1d6      	bne.n	8005084 <_svfiprintf_r+0x174>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	065b      	lsls	r3, r3, #25
 80050da:	f53f af2d 	bmi.w	8004f38 <_svfiprintf_r+0x28>
 80050de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050e0:	e72c      	b.n	8004f3c <_svfiprintf_r+0x2c>
 80050e2:	ab03      	add	r3, sp, #12
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	462a      	mov	r2, r5
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <_svfiprintf_r+0x1f0>)
 80050ea:	a904      	add	r1, sp, #16
 80050ec:	4638      	mov	r0, r7
 80050ee:	f000 f879 	bl	80051e4 <_printf_i>
 80050f2:	e7ed      	b.n	80050d0 <_svfiprintf_r+0x1c0>
 80050f4:	080056a0 	.word	0x080056a0
 80050f8:	080056aa 	.word	0x080056aa
 80050fc:	00000000 	.word	0x00000000
 8005100:	08004e59 	.word	0x08004e59
 8005104:	080056a6 	.word	0x080056a6

08005108 <_printf_common>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	4616      	mov	r6, r2
 800510e:	4698      	mov	r8, r3
 8005110:	688a      	ldr	r2, [r1, #8]
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005118:	4293      	cmp	r3, r2
 800511a:	bfb8      	it	lt
 800511c:	4613      	movlt	r3, r2
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005124:	4607      	mov	r7, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b10a      	cbz	r2, 800512e <_printf_common+0x26>
 800512a:	3301      	adds	r3, #1
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	0699      	lsls	r1, r3, #26
 8005132:	bf42      	ittt	mi
 8005134:	6833      	ldrmi	r3, [r6, #0]
 8005136:	3302      	addmi	r3, #2
 8005138:	6033      	strmi	r3, [r6, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	f015 0506 	ands.w	r5, r5, #6
 8005140:	d106      	bne.n	8005150 <_printf_common+0x48>
 8005142:	f104 0a19 	add.w	sl, r4, #25
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6832      	ldr	r2, [r6, #0]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ab      	cmp	r3, r5
 800514e:	dc26      	bgt.n	800519e <_printf_common+0x96>
 8005150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	3b00      	subs	r3, #0
 8005158:	bf18      	it	ne
 800515a:	2301      	movne	r3, #1
 800515c:	0692      	lsls	r2, r2, #26
 800515e:	d42b      	bmi.n	80051b8 <_printf_common+0xb0>
 8005160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005164:	4641      	mov	r1, r8
 8005166:	4638      	mov	r0, r7
 8005168:	47c8      	blx	r9
 800516a:	3001      	adds	r0, #1
 800516c:	d01e      	beq.n	80051ac <_printf_common+0xa4>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf02      	ittt	eq
 800517a:	68e5      	ldreq	r5, [r4, #12]
 800517c:	6833      	ldreq	r3, [r6, #0]
 800517e:	1aed      	subeq	r5, r5, r3
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	2600      	movs	r6, #0
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xc8>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xa8>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4641      	mov	r1, r8
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c8      	blx	r9
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xac>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c6      	b.n	8005146 <_printf_common+0x3e>
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	2030      	movs	r0, #48	@ 0x30
 80051be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051c2:	4422      	add	r2, r4
 80051c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051cc:	3302      	adds	r3, #2
 80051ce:	e7c7      	b.n	8005160 <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4641      	mov	r1, r8
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c8      	blx	r9
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa4>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x8e>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	7e0f      	ldrb	r7, [r1, #24]
 80051ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051ec:	2f78      	cmp	r7, #120	@ 0x78
 80051ee:	4691      	mov	r9, r2
 80051f0:	4680      	mov	r8, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	469a      	mov	sl, r3
 80051f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	@ 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d2 	beq.w	80053aa <_printf_i+0x1c6>
 8005206:	2f58      	cmp	r7, #88	@ 0x58
 8005208:	f000 80b9 	beq.w	800537e <_printf_i+0x19a>
 800520c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a101      	add	r1, pc, #4	@ (adr r1, 8005224 <_printf_i+0x40>)
 8005220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	08005391 	.word	0x08005391
 8005254:	080052bb 	.word	0x080052bb
 8005258:	0800534b 	.word	0x0800534b
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053b3 	.word	0x080053b3
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052bb 	.word	0x080052bb
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005353 	.word	0x08005353
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e09d      	b.n	80053cc <_printf_i+0x1e8>
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	6031      	str	r1, [r6, #0]
 8005298:	0606      	lsls	r6, r0, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xbc>
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	e003      	b.n	80052a8 <_printf_i+0xc4>
 80052a0:	0645      	lsls	r5, r0, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xb8>
 80052a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	da03      	bge.n	80052b4 <_printf_i+0xd0>
 80052ac:	232d      	movs	r3, #45	@ 0x2d
 80052ae:	426d      	negs	r5, r5
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b4:	4859      	ldr	r0, [pc, #356]	@ (800541c <_printf_i+0x238>)
 80052b6:	230a      	movs	r3, #10
 80052b8:	e011      	b.n	80052de <_printf_i+0xfa>
 80052ba:	6821      	ldr	r1, [r4, #0]
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	0608      	lsls	r0, r1, #24
 80052c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c4:	d402      	bmi.n	80052cc <_printf_i+0xe8>
 80052c6:	0649      	lsls	r1, r1, #25
 80052c8:	bf48      	it	mi
 80052ca:	b2ad      	uxthmi	r5, r5
 80052cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ce:	4853      	ldr	r0, [pc, #332]	@ (800541c <_printf_i+0x238>)
 80052d0:	6033      	str	r3, [r6, #0]
 80052d2:	bf14      	ite	ne
 80052d4:	230a      	movne	r3, #10
 80052d6:	2308      	moveq	r3, #8
 80052d8:	2100      	movs	r1, #0
 80052da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052de:	6866      	ldr	r6, [r4, #4]
 80052e0:	60a6      	str	r6, [r4, #8]
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	bfa2      	ittt	ge
 80052e6:	6821      	ldrge	r1, [r4, #0]
 80052e8:	f021 0104 	bicge.w	r1, r1, #4
 80052ec:	6021      	strge	r1, [r4, #0]
 80052ee:	b90d      	cbnz	r5, 80052f4 <_printf_i+0x110>
 80052f0:	2e00      	cmp	r6, #0
 80052f2:	d04b      	beq.n	800538c <_printf_i+0x1a8>
 80052f4:	4616      	mov	r6, r2
 80052f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80052fa:	fb03 5711 	mls	r7, r3, r1, r5
 80052fe:	5dc7      	ldrb	r7, [r0, r7]
 8005300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005304:	462f      	mov	r7, r5
 8005306:	42bb      	cmp	r3, r7
 8005308:	460d      	mov	r5, r1
 800530a:	d9f4      	bls.n	80052f6 <_printf_i+0x112>
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10b      	bne.n	8005328 <_printf_i+0x144>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07df      	lsls	r7, r3, #31
 8005314:	d508      	bpl.n	8005328 <_printf_i+0x144>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4299      	cmp	r1, r3
 800531c:	bfde      	ittt	le
 800531e:	2330      	movle	r3, #48	@ 0x30
 8005320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005328:	1b92      	subs	r2, r2, r6
 800532a:	6122      	str	r2, [r4, #16]
 800532c:	f8cd a000 	str.w	sl, [sp]
 8005330:	464b      	mov	r3, r9
 8005332:	aa03      	add	r2, sp, #12
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fee6 	bl	8005108 <_printf_common>
 800533c:	3001      	adds	r0, #1
 800533e:	d14a      	bne.n	80053d6 <_printf_i+0x1f2>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	b004      	add	sp, #16
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	4833      	ldr	r0, [pc, #204]	@ (8005420 <_printf_i+0x23c>)
 8005354:	2778      	movs	r7, #120	@ 0x78
 8005356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6831      	ldr	r1, [r6, #0]
 800535e:	061f      	lsls	r7, r3, #24
 8005360:	f851 5b04 	ldr.w	r5, [r1], #4
 8005364:	d402      	bmi.n	800536c <_printf_i+0x188>
 8005366:	065f      	lsls	r7, r3, #25
 8005368:	bf48      	it	mi
 800536a:	b2ad      	uxthmi	r5, r5
 800536c:	6031      	str	r1, [r6, #0]
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	bf44      	itt	mi
 8005372:	f043 0320 	orrmi.w	r3, r3, #32
 8005376:	6023      	strmi	r3, [r4, #0]
 8005378:	b11d      	cbz	r5, 8005382 <_printf_i+0x19e>
 800537a:	2310      	movs	r3, #16
 800537c:	e7ac      	b.n	80052d8 <_printf_i+0xf4>
 800537e:	4827      	ldr	r0, [pc, #156]	@ (800541c <_printf_i+0x238>)
 8005380:	e7e9      	b.n	8005356 <_printf_i+0x172>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	e7f6      	b.n	800537a <_printf_i+0x196>
 800538c:	4616      	mov	r6, r2
 800538e:	e7bd      	b.n	800530c <_printf_i+0x128>
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	1d18      	adds	r0, r3, #4
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	062e      	lsls	r6, r5, #24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0x1c0>
 80053a0:	6019      	str	r1, [r3, #0]
 80053a2:	e002      	b.n	80053aa <_printf_i+0x1c6>
 80053a4:	0668      	lsls	r0, r5, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0x1bc>
 80053a8:	8019      	strh	r1, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	4616      	mov	r6, r2
 80053b0:	e7bc      	b.n	800532c <_printf_i+0x148>
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	1d1a      	adds	r2, r3, #4
 80053b6:	6032      	str	r2, [r6, #0]
 80053b8:	681e      	ldr	r6, [r3, #0]
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	2100      	movs	r1, #0
 80053be:	4630      	mov	r0, r6
 80053c0:	f7fa ff0e 	bl	80001e0 <memchr>
 80053c4:	b108      	cbz	r0, 80053ca <_printf_i+0x1e6>
 80053c6:	1b80      	subs	r0, r0, r6
 80053c8:	6060      	str	r0, [r4, #4]
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	e7aa      	b.n	800532c <_printf_i+0x148>
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	4632      	mov	r2, r6
 80053da:	4649      	mov	r1, r9
 80053dc:	4640      	mov	r0, r8
 80053de:	47d0      	blx	sl
 80053e0:	3001      	adds	r0, #1
 80053e2:	d0ad      	beq.n	8005340 <_printf_i+0x15c>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	079b      	lsls	r3, r3, #30
 80053e8:	d413      	bmi.n	8005412 <_printf_i+0x22e>
 80053ea:	68e0      	ldr	r0, [r4, #12]
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	4298      	cmp	r0, r3
 80053f0:	bfb8      	it	lt
 80053f2:	4618      	movlt	r0, r3
 80053f4:	e7a6      	b.n	8005344 <_printf_i+0x160>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4632      	mov	r2, r6
 80053fa:	4649      	mov	r1, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	47d0      	blx	sl
 8005400:	3001      	adds	r0, #1
 8005402:	d09d      	beq.n	8005340 <_printf_i+0x15c>
 8005404:	3501      	adds	r5, #1
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	9903      	ldr	r1, [sp, #12]
 800540a:	1a5b      	subs	r3, r3, r1
 800540c:	42ab      	cmp	r3, r5
 800540e:	dcf2      	bgt.n	80053f6 <_printf_i+0x212>
 8005410:	e7eb      	b.n	80053ea <_printf_i+0x206>
 8005412:	2500      	movs	r5, #0
 8005414:	f104 0619 	add.w	r6, r4, #25
 8005418:	e7f5      	b.n	8005406 <_printf_i+0x222>
 800541a:	bf00      	nop
 800541c:	080056b1 	.word	0x080056b1
 8005420:	080056c2 	.word	0x080056c2

08005424 <memmove>:
 8005424:	4288      	cmp	r0, r1
 8005426:	b510      	push	{r4, lr}
 8005428:	eb01 0402 	add.w	r4, r1, r2
 800542c:	d902      	bls.n	8005434 <memmove+0x10>
 800542e:	4284      	cmp	r4, r0
 8005430:	4623      	mov	r3, r4
 8005432:	d807      	bhi.n	8005444 <memmove+0x20>
 8005434:	1e43      	subs	r3, r0, #1
 8005436:	42a1      	cmp	r1, r4
 8005438:	d008      	beq.n	800544c <memmove+0x28>
 800543a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800543e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005442:	e7f8      	b.n	8005436 <memmove+0x12>
 8005444:	4402      	add	r2, r0
 8005446:	4601      	mov	r1, r0
 8005448:	428a      	cmp	r2, r1
 800544a:	d100      	bne.n	800544e <memmove+0x2a>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005456:	e7f7      	b.n	8005448 <memmove+0x24>

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb fb90 	bl	8000b88 <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200041c4 	.word	0x200041c4

08005478 <_realloc_r>:
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	4680      	mov	r8, r0
 800547e:	4615      	mov	r5, r2
 8005480:	460c      	mov	r4, r1
 8005482:	b921      	cbnz	r1, 800548e <_realloc_r+0x16>
 8005484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005488:	4611      	mov	r1, r2
 800548a:	f7ff bc59 	b.w	8004d40 <_malloc_r>
 800548e:	b92a      	cbnz	r2, 800549c <_realloc_r+0x24>
 8005490:	f7ff fbea 	bl	8004c68 <_free_r>
 8005494:	2400      	movs	r4, #0
 8005496:	4620      	mov	r0, r4
 8005498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800549c:	f000 f81a 	bl	80054d4 <_malloc_usable_size_r>
 80054a0:	4285      	cmp	r5, r0
 80054a2:	4606      	mov	r6, r0
 80054a4:	d802      	bhi.n	80054ac <_realloc_r+0x34>
 80054a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054aa:	d8f4      	bhi.n	8005496 <_realloc_r+0x1e>
 80054ac:	4629      	mov	r1, r5
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7ff fc46 	bl	8004d40 <_malloc_r>
 80054b4:	4607      	mov	r7, r0
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d0ec      	beq.n	8005494 <_realloc_r+0x1c>
 80054ba:	42b5      	cmp	r5, r6
 80054bc:	462a      	mov	r2, r5
 80054be:	4621      	mov	r1, r4
 80054c0:	bf28      	it	cs
 80054c2:	4632      	movcs	r2, r6
 80054c4:	f7ff fbc2 	bl	8004c4c <memcpy>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fbcc 	bl	8004c68 <_free_r>
 80054d0:	463c      	mov	r4, r7
 80054d2:	e7e0      	b.n	8005496 <_realloc_r+0x1e>

080054d4 <_malloc_usable_size_r>:
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f18      	subs	r0, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfbc      	itt	lt
 80054de:	580b      	ldrlt	r3, [r1, r0]
 80054e0:	18c0      	addlt	r0, r0, r3
 80054e2:	4770      	bx	lr

080054e4 <_init>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr

080054f0 <_fini>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr
