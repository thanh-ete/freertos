
007Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab4  08004ab4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab4  08004ab4  00005ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004abc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00004064  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004074  20004074  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ad2  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c9  00000000  00000000  00016b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000193e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c27  00000000  00000000  0001a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022463  00000000  00000000  0001af9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012800  00000000  00000000  0003d402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a17  00000000  00000000  0004fc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122619  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040ec  00000000  00000000  0012265c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00126748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004998 	.word	0x08004998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004998 	.word	0x08004998

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <Send_UART>:

void High_Task(void *argument);
void Medium_Task(void *argument);

void Send_UART(char *str)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  xSemaphoreTake(SimpleMutex, portMAX_DELAY);
 800050c:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <Send_UART+0x4c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f04f 31ff 	mov.w	r1, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fbf7 	bl	8002d08 <xQueueSemaphoreTake>
  HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f7ff fe58 	bl	80001d0 <strlen>
 8000520:	4603      	mov	r3, r0
 8000522:	b29a      	uxth	r2, r3
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	480a      	ldr	r0, [pc, #40]	@ (8000554 <Send_UART+0x50>)
 800052c:	f001 fd84 	bl	8002038 <HAL_UART_Transmit>
  HAL_Delay(2000);
 8000530:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000534:	f000 fb22 	bl	8000b7c <HAL_Delay>
  xSemaphoreGive(SimpleMutex);
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <Send_UART+0x4c>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	f002 fadf 	bl	8002b04 <xQueueGenericSend>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200002c8 	.word	0x200002c8
 8000554:	20000280 	.word	0x20000280

08000558 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 facb 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f83f 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f8d1 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056a:	f000 f8a5 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SimpleMutex = xSemaphoreCreateMutex();
 800056e:	2001      	movs	r0, #1
 8000570:	f002 fab0 	bl	8002ad4 <xQueueCreateMutex>
 8000574:	4603      	mov	r3, r0
 8000576:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <main+0x68>)
 8000578:	6013      	str	r3, [r2, #0]
  if (SimpleMutex != NULL)
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <main+0x68>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <main+0x38>
  {
    HAL_UART_Transmit(&huart2, "Mutex created\n\n", 15, 1000);
 8000582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000586:	220f      	movs	r2, #15
 8000588:	490e      	ldr	r1, [pc, #56]	@ (80005c4 <main+0x6c>)
 800058a:	480f      	ldr	r0, [pc, #60]	@ (80005c8 <main+0x70>)
 800058c:	f001 fd54 	bl	8002038 <HAL_UART_Transmit>
  }

  /*----------------Create Task----------------*/
  xTaskCreate(High_Task, "HPT", 128, NULL, 3, &HighPT_Handler);
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <main+0x74>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <main+0x78>)
 800059e:	480d      	ldr	r0, [pc, #52]	@ (80005d4 <main+0x7c>)
 80005a0:	f002 fe24 	bl	80031ec <xTaskCreate>
  xTaskCreate(Medium_Task, "MPT", 128, NULL, 2, &MediumPT_Handler);
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <main+0x80>)
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	490a      	ldr	r1, [pc, #40]	@ (80005dc <main+0x84>)
 80005b2:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <main+0x88>)
 80005b4:	f002 fe1a 	bl	80031ec <xTaskCreate>

  vTaskStartScheduler();
 80005b8:	f002 ff86 	bl	80034c8 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x64>
 80005c0:	200002c8 	.word	0x200002c8
 80005c4:	080049b0 	.word	0x080049b0
 80005c8:	20000280 	.word	0x20000280
 80005cc:	200002cc 	.word	0x200002cc
 80005d0:	080049c0 	.word	0x080049c0
 80005d4:	0800075d 	.word	0x0800075d
 80005d8:	200002d0 	.word	0x200002d0
 80005dc:	080049c4 	.word	0x080049c4
 80005e0:	080007c1 	.word	0x080007c1

080005e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	@ 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f996 	bl	8004924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	@ (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	@ 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fd29 	bl	80010c0 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000674:	f000 f8e8 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2103      	movs	r1, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff8a 	bl	80015b0 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a2:	f000 f8d1 	bl	8000848 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fc52 	bl	8001f98 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f8a5 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000280 	.word	0x20000280
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_GPIO_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <MX_GPIO_Init+0x4c>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <MX_GPIO_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_GPIO_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <MX_GPIO_Init+0x4c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_GPIO_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <High_Task>:

/* USER CODE BEGIN 4 */
void High_Task(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint8_t *strtosend = "IN HPT--------------------------\n";
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <High_Task+0x54>)
 8000766:	617b      	str	r3, [r7, #20]
  while (1)
  {
    char *str = "Enter Hight_PT and About to take MUTEX\n";
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <High_Task+0x58>)
 800076a:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 800076c:	6938      	ldr	r0, [r7, #16]
 800076e:	f7ff fd2f 	bl	80001d0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	6939      	ldr	r1, [r7, #16]
 800077c:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <High_Task+0x5c>)
 800077e:	f001 fc5b 	bl	8002038 <HAL_UART_Transmit>

    Send_UART(strtosend);
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff febe 	bl	8000504 <Send_UART>

    char *str2 = "Leaving Hight_PT\n\n";
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <High_Task+0x60>)
 800078a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, str2, strlen(str2), HAL_MAX_DELAY);
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f7ff fd1f 	bl	80001d0 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	68f9      	ldr	r1, [r7, #12]
 800079c:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <High_Task+0x5c>)
 800079e:	f001 fc4b 	bl	8002038 <HAL_UART_Transmit>

    vTaskDelay(2000);
 80007a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007a6:	f002 fe59 	bl	800345c <vTaskDelay>
  {
 80007aa:	bf00      	nop
 80007ac:	e7dc      	b.n	8000768 <High_Task+0xc>
 80007ae:	bf00      	nop
 80007b0:	080049c8 	.word	0x080049c8
 80007b4:	080049ec 	.word	0x080049ec
 80007b8:	20000280 	.word	0x20000280
 80007bc:	08004a14 	.word	0x08004a14

080007c0 <Medium_Task>:
  }
}

void Medium_Task(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint8_t *strtosend = "IN MPT...........................\n";
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <Medium_Task+0x54>)
 80007ca:	617b      	str	r3, [r7, #20]
  while (1)
  {
    char *str = "Enter Medium_PT and About to take MUTEX\n";
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <Medium_Task+0x58>)
 80007ce:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 80007d0:	6938      	ldr	r0, [r7, #16]
 80007d2:	f7ff fcfd 	bl	80001d0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	6939      	ldr	r1, [r7, #16]
 80007e0:	480e      	ldr	r0, [pc, #56]	@ (800081c <Medium_Task+0x5c>)
 80007e2:	f001 fc29 	bl	8002038 <HAL_UART_Transmit>

    Send_UART(strtosend);
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff fe8c 	bl	8000504 <Send_UART>

    char *str2 = "Leaving Medium_PT\n\n";
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <Medium_Task+0x60>)
 80007ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, str2, strlen(str2), HAL_MAX_DELAY);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f7ff fced 	bl	80001d0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	68f9      	ldr	r1, [r7, #12]
 8000800:	4806      	ldr	r0, [pc, #24]	@ (800081c <Medium_Task+0x5c>)
 8000802:	f001 fc19 	bl	8002038 <HAL_UART_Transmit>

    vTaskDelay(1500);
 8000806:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800080a:	f002 fe27 	bl	800345c <vTaskDelay>
  {
 800080e:	bf00      	nop
 8000810:	e7dc      	b.n	80007cc <Medium_Task+0xc>
 8000812:	bf00      	nop
 8000814:	08004a28 	.word	0x08004a28
 8000818:	08004a4c 	.word	0x08004a4c
 800081c:	20000280 	.word	0x20000280
 8000820:	08004a78 	.word	0x08004a78

08000824 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000836:	f000 f981 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40001000 	.word	0x40001000

08000848 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	@ (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fa4b 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <HAL_UART_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <HAL_UART_MspInit+0x8c>)
 8000922:	f000 fa31 	bl	8000d88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <HAL_InitTick+0xe4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a32      	ldr	r2, [pc, #200]	@ (8000a20 <HAL_InitTick+0xe4>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <HAL_InitTick+0xe4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f83c 	bl	80019f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000982:	f001 f80d 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8000986:	6378      	str	r0, [r7, #52]	@ 0x34
 8000988:	e004      	b.n	8000994 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800098a:	f001 f809 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 800098e:	4603      	mov	r3, r0
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000996:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <HAL_InitTick+0xe8>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <HAL_InitTick+0xec>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <HAL_InitTick+0xf0>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_InitTick+0xec>)
 80009aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_InitTick+0xec>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_InitTick+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_InitTick+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_InitTick+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <HAL_InitTick+0xec>)
 80009ca:	f001 f843 	bl	8001a54 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <HAL_InitTick+0xec>)
 80009de:	f001 f893 	bl	8001b08 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009f0:	2036      	movs	r0, #54	@ 0x36
 80009f2:	f000 f9bb 	bl	8000d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2036      	movs	r0, #54	@ 0x36
 8000a02:	f000 f997 	bl	8000d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_InitTick+0xf4>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3738      	adds	r7, #56	@ 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	200002d4 	.word	0x200002d4
 8000a2c:	40001000 	.word	0x40001000
 8000a30:	20000004 	.word	0x20000004

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <TIM6_DAC_IRQHandler+0x10>)
 8000a72:	f001 f8b9 	bl	8001be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200002d4 	.word	0x200002d4

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 ff2f 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fd3f 	bl	8000558 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae8:	08004abc 	.word	0x08004abc
  ldr r2, =_sbss
 8000aec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af0:	20004074 	.word	0x20004074

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8fc 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff ff08 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe92 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	2000031c 	.word	0x2000031c

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000031c 	.word	0x2000031c

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff ffee 	bl	8000b64 <HAL_GetTick>
 8000b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ffde 	bl	8000b64 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	@ 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e16b      	b.n	800107c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 815a 	bne.w	8001076 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80b4 	beq.w	8001076 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b60      	ldr	r3, [pc, #384]	@ (8001094 <HAL_GPIO_Init+0x30c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a5f      	ldr	r2, [pc, #380]	@ (8001094 <HAL_GPIO_Init+0x30c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001094 <HAL_GPIO_Init+0x30c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001098 <HAL_GPIO_Init+0x310>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a52      	ldr	r2, [pc, #328]	@ (800109c <HAL_GPIO_Init+0x314>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d02b      	beq.n	8000fae <HAL_GPIO_Init+0x226>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a51      	ldr	r2, [pc, #324]	@ (80010a0 <HAL_GPIO_Init+0x318>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d025      	beq.n	8000faa <HAL_GPIO_Init+0x222>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a50      	ldr	r2, [pc, #320]	@ (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01f      	beq.n	8000fa6 <HAL_GPIO_Init+0x21e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	@ (80010a8 <HAL_GPIO_Init+0x320>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	@ (80010b0 <HAL_GPIO_Init+0x328>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	@ (80010b4 <HAL_GPIO_Init+0x32c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	@ (80010b8 <HAL_GPIO_Init+0x330>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e00e      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f96:	2306      	movs	r3, #6
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	4935      	ldr	r1, [pc, #212]	@ (8001098 <HAL_GPIO_Init+0x310>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <HAL_GPIO_Init+0x334>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a32      	ldr	r2, [pc, #200]	@ (80010bc <HAL_GPIO_Init+0x334>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <HAL_GPIO_Init+0x334>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <HAL_GPIO_Init+0x334>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <HAL_GPIO_Init+0x334>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001046:	4a1d      	ldr	r2, [pc, #116]	@ (80010bc <HAL_GPIO_Init+0x334>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <HAL_GPIO_Init+0x334>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001070:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <HAL_GPIO_Init+0x334>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f67f ae90 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40013800 	.word	0x40013800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40021c00 	.word	0x40021c00
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e267      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d075      	beq.n	80011ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010de:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00c      	beq.n	8001104 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b82      	ldr	r3, [pc, #520]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4b7e      	ldr	r3, [pc, #504]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05b      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d157      	bne.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e242      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x74>
 8001126:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a75      	ldr	r2, [pc, #468]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b70      	ldr	r3, [pc, #448]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6f      	ldr	r2, [pc, #444]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6d      	ldr	r3, [pc, #436]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6c      	ldr	r2, [pc, #432]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001158:	4b69      	ldr	r3, [pc, #420]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a68      	ldr	r2, [pc, #416]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b66      	ldr	r3, [pc, #408]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a65      	ldr	r2, [pc, #404]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcf4 	bl	8000b64 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcf0 	bl	8000b64 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e207      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xc0>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fce0 	bl	8000b64 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcdc 	bl	8000b64 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1f3      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1c7      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4937      	ldr	r1, [pc, #220]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <HAL_RCC_OscConfig+0x244>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fc95 	bl	8000b64 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fc91 	bl	8000b64 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e1a8      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4925      	ldr	r1, [pc, #148]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_RCC_OscConfig+0x244>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fc74 	bl	8000b64 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc70 	bl	8000b64 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e187      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d036      	beq.n	8001318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_RCC_OscConfig+0x248>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc54 	bl	8000b64 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc50 	bl	8000b64 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e167      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80012d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x200>
 80012de:	e01b      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_RCC_OscConfig+0x248>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fc3d 	bl	8000b64 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	e00e      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc39 	bl	8000b64 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d907      	bls.n	800130c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e150      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001300:	40023800 	.word	0x40023800
 8001304:	42470000 	.word	0x42470000
 8001308:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ea      	bne.n	80012ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8097 	beq.w	8001454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132a:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b7d      	ldr	r3, [pc, #500]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a7c      	ldr	r2, [pc, #496]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b77      	ldr	r3, [pc, #476]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a73      	ldr	r2, [pc, #460]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbf9 	bl	8000b64 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fbf5 	bl	8000b64 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e10c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x2ea>
 800139c:	4b64      	ldr	r3, [pc, #400]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a0:	4a63      	ldr	r2, [pc, #396]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x30c>
 80013b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013be:	4b5c      	ldr	r3, [pc, #368]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013cc:	4b58      	ldr	r3, [pc, #352]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d0:	4a57      	ldr	r2, [pc, #348]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013dc:	4a54      	ldr	r2, [pc, #336]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fbba 	bl	8000b64 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fbb6 	bl	8000b64 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0cb      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	4b49      	ldr	r3, [pc, #292]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ee      	beq.n	80013f4 <HAL_RCC_OscConfig+0x334>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fba4 	bl	8000b64 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fba0 	bl	8000b64 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0b5      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ee      	bne.n	8001420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001448:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a38      	ldr	r2, [pc, #224]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800144e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a1 	beq.w	80015a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d05c      	beq.n	8001524 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d141      	bne.n	80014f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb74 	bl	8000b64 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb70 	bl	8000b64 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e087      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	491b      	ldr	r1, [pc, #108]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb49 	bl	8000b64 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb45 	bl	8000b64 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e05c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x416>
 80014f4:	e054      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb32 	bl	8000b64 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb2e 	bl	8000b64 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e045      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x444>
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e038      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000
 8001538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_RCC_OscConfig+0x4ec>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d028      	beq.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d121      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d11a      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001574:	4293      	cmp	r3, r2
 8001576:	d111      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa60 	bl	8000b64 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa5c 	bl	8000b64 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	@ (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f8f0 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08004a94 	.word	0x08004a94
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b094      	sub	sp, #80	@ 0x50
 8001782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001794:	4b79      	ldr	r3, [pc, #484]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	f200 80e1 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x34>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ae:	e0db      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017b4:	e0db      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x208>)
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ba:	e0d8      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	2200      	movs	r2, #0
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001800:	0150      	lsls	r0, r2, #5
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4621      	mov	r1, r4
 8001808:	1a51      	subs	r1, r2, r1
 800180a:	6139      	str	r1, [r7, #16]
 800180c:	4629      	mov	r1, r5
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001820:	4659      	mov	r1, fp
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	4651      	mov	r1, sl
 8001826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182a:	4651      	mov	r1, sl
 800182c:	018a      	lsls	r2, r1, #6
 800182e:	4651      	mov	r1, sl
 8001830:	ebb2 0801 	subs.w	r8, r2, r1
 8001834:	4659      	mov	r1, fp
 8001836:	eb63 0901 	sbc.w	r9, r3, r1
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184e:	4690      	mov	r8, r2
 8001850:	4699      	mov	r9, r3
 8001852:	4623      	mov	r3, r4
 8001854:	eb18 0303 	adds.w	r3, r8, r3
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	462b      	mov	r3, r5
 800185c:	eb49 0303 	adc.w	r3, r9, r3
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800186e:	4629      	mov	r1, r5
 8001870:	024b      	lsls	r3, r1, #9
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001878:	4621      	mov	r1, r4
 800187a:	024a      	lsls	r2, r1, #9
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001882:	2200      	movs	r2, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800188c:	f7fe fca8 	bl	80001e0 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001898:	e058      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b38      	ldr	r3, [pc, #224]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	2200      	movs	r2, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	4611      	mov	r1, r2
 80018a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018b4:	4642      	mov	r2, r8
 80018b6:	464b      	mov	r3, r9
 80018b8:	f04f 0000 	mov.w	r0, #0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	0159      	lsls	r1, r3, #5
 80018c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c6:	0150      	lsls	r0, r2, #5
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4641      	mov	r1, r8
 80018ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d2:	4649      	mov	r1, r9
 80018d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018ec:	ebb2 040a 	subs.w	r4, r2, sl
 80018f0:	eb63 050b 	sbc.w	r5, r3, fp
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	00eb      	lsls	r3, r5, #3
 80018fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001902:	00e2      	lsls	r2, r4, #3
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4643      	mov	r3, r8
 800190a:	18e3      	adds	r3, r4, r3
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	464b      	mov	r3, r9
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001936:	2200      	movs	r2, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	61fa      	str	r2, [r7, #28]
 800193c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001940:	f7fe fc4e 	bl	80001e0 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800195c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800195e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001970:	4618      	mov	r0, r3
 8001972:	3750      	adds	r7, #80	@ 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08004aa4 	.word	0x08004aa4

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019cc:	f7ff ffdc 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	@ (80019ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08004aa4 	.word	0x08004aa4

080019f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	220f      	movs	r2, #15
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <HAL_RCC_GetClockConfig+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0207 	and.w	r2, r3, #7
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f839 	bl	8001af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f9c0 	bl	8001e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e04e      	b.n	8001bbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4a:	d01d      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d018      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d111      	bne.n	8001bac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d010      	beq.n	8001bbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001baa:	e007      	b.n	8001bbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40000800 	.word	0x40000800
 8001bd8:	40000c00 	.word	0x40000c00
 8001bdc:	40010400 	.word	0x40010400
 8001be0:	40014000 	.word	0x40014000
 8001be4:	40001800 	.word	0x40001800

08001be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0202 	mvn.w	r2, #2
 8001c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8d2 	bl	8001ddc <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8c4 	bl	8001dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8d5 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0204 	mvn.w	r2, #4
 8001c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8ac 	bl	8001ddc <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f89e 	bl	8001dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8af 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0208 	mvn.w	r2, #8
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f886 	bl	8001ddc <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f878 	bl	8001dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f889 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0210 	mvn.w	r2, #16
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2208      	movs	r2, #8
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f860 	bl	8001ddc <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f852 	bl	8001dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f863 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00c      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0201 	mvn.w	r2, #1
 8001d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fd68 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f906 	bl	8001f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f834 	bl	8001e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0220 	mvn.w	r2, #32
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8d8 	bl	8001f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a46      	ldr	r2, [pc, #280]	@ (8001f44 <TIM_Base_SetConfig+0x12c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e36:	d00f      	beq.n	8001e58 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a43      	ldr	r2, [pc, #268]	@ (8001f48 <TIM_Base_SetConfig+0x130>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00b      	beq.n	8001e58 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a42      	ldr	r2, [pc, #264]	@ (8001f4c <TIM_Base_SetConfig+0x134>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <TIM_Base_SetConfig+0x40>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a41      	ldr	r2, [pc, #260]	@ (8001f50 <TIM_Base_SetConfig+0x138>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <TIM_Base_SetConfig+0x40>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a40      	ldr	r2, [pc, #256]	@ (8001f54 <TIM_Base_SetConfig+0x13c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d108      	bne.n	8001e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a35      	ldr	r2, [pc, #212]	@ (8001f44 <TIM_Base_SetConfig+0x12c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e78:	d027      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a32      	ldr	r2, [pc, #200]	@ (8001f48 <TIM_Base_SetConfig+0x130>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d023      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <TIM_Base_SetConfig+0x134>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a30      	ldr	r2, [pc, #192]	@ (8001f50 <TIM_Base_SetConfig+0x138>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01b      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a2f      	ldr	r2, [pc, #188]	@ (8001f54 <TIM_Base_SetConfig+0x13c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d017      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <TIM_Base_SetConfig+0x140>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f5c <TIM_Base_SetConfig+0x144>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00f      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2c      	ldr	r2, [pc, #176]	@ (8001f60 <TIM_Base_SetConfig+0x148>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f64 <TIM_Base_SetConfig+0x14c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f68 <TIM_Base_SetConfig+0x150>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	@ (8001f6c <TIM_Base_SetConfig+0x154>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d108      	bne.n	8001edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <TIM_Base_SetConfig+0x12c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d003      	beq.n	8001f10 <TIM_Base_SetConfig+0xf8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <TIM_Base_SetConfig+0x13c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d103      	bne.n	8001f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]
  }
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40000c00 	.word	0x40000c00
 8001f54:	40010400 	.word	0x40010400
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40014400 	.word	0x40014400
 8001f60:	40014800 	.word	0x40014800
 8001f64:	40001800 	.word	0x40001800
 8001f68:	40001c00 	.word	0x40001c00
 8001f6c:	40002000 	.word	0x40002000

08001f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e042      	b.n	8002030 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fc74 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	@ 0x24
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f973 	bl	80022c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b20      	cmp	r3, #32
 8002056:	d175      	bne.n	8002144 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <HAL_UART_Transmit+0x2c>
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e06e      	b.n	8002146 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2221      	movs	r2, #33	@ 0x21
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002076:	f7fe fd75 	bl	8000b64 <HAL_GetTick>
 800207a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002090:	d108      	bne.n	80020a4 <HAL_UART_Transmit+0x6c>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e003      	b.n	80020ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020ac:	e02e      	b.n	800210c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f848 	bl	800214e <UART_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e03a      	b.n	8002146 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10b      	bne.n	80020ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3302      	adds	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e007      	b.n	80020fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3301      	adds	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1cb      	bne.n	80020ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	2140      	movs	r1, #64	@ 0x40
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f814 	bl	800214e <UART_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e006      	b.n	8002146 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215e:	e03b      	b.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002166:	d037      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002168:	f7fe fcfc 	bl	8000b64 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <UART_WaitOnFlagUntilTimeout+0x30>
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e03a      	b.n	80021f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b80      	cmp	r3, #128	@ 0x80
 8002194:	d020      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b40      	cmp	r3, #64	@ 0x40
 800219a:	d01d      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d116      	bne.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f81d 	bl	8002200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2208      	movs	r2, #8
 80021ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e00f      	b.n	80021f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d0b4      	beq.n	8002160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002200:	b480      	push	{r7}
 8002202:	b095      	sub	sp, #84	@ 0x54
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	330c      	adds	r3, #12
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800221e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002228:	643a      	str	r2, [r7, #64]	@ 0x40
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800222e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002230:	e841 2300 	strex	r3, r2, [r1]
 8002234:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3314      	adds	r3, #20
 8002242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	e853 3f00 	ldrex	r3, [r3]
 800224a:	61fb      	str	r3, [r7, #28]
   return(result);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3314      	adds	r3, #20
 800225a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800225c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800225e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002264:	e841 2300 	strex	r3, r2, [r1]
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	2b01      	cmp	r3, #1
 8002276:	d119      	bne.n	80022ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	330c      	adds	r3, #12
 800227e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e853 3f00 	ldrex	r3, [r3]
 8002286:	60bb      	str	r3, [r7, #8]
   return(result);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 0310 	bic.w	r3, r3, #16
 800228e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	330c      	adds	r3, #12
 8002296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002298:	61ba      	str	r2, [r7, #24]
 800229a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229c:	6979      	ldr	r1, [r7, #20]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	e841 2300 	strex	r3, r2, [r1]
 80022a4:	613b      	str	r3, [r7, #16]
   return(result);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e5      	bne.n	8002278 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022ba:	bf00      	nop
 80022bc:	3754      	adds	r7, #84	@ 0x54
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b0c0      	sub	sp, #256	@ 0x100
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	ea40 0301 	orr.w	r3, r0, r1
 80022f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002320:	f021 010c 	bic.w	r1, r1, #12
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002342:	6999      	ldr	r1, [r3, #24]
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	ea40 0301 	orr.w	r3, r0, r1
 800234e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b8f      	ldr	r3, [pc, #572]	@ (8002594 <UART_SetConfig+0x2cc>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d005      	beq.n	8002368 <UART_SetConfig+0xa0>
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b8d      	ldr	r3, [pc, #564]	@ (8002598 <UART_SetConfig+0x2d0>)
 8002364:	429a      	cmp	r2, r3
 8002366:	d104      	bne.n	8002372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff fb2e 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 800236c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002370:	e003      	b.n	800237a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002372:	f7ff fb15 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002376:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002384:	f040 810c 	bne.w	80025a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800238c:	2200      	movs	r2, #0
 800238e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002392:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800239a:	4622      	mov	r2, r4
 800239c:	462b      	mov	r3, r5
 800239e:	1891      	adds	r1, r2, r2
 80023a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023a2:	415b      	adcs	r3, r3
 80023a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023aa:	4621      	mov	r1, r4
 80023ac:	eb12 0801 	adds.w	r8, r2, r1
 80023b0:	4629      	mov	r1, r5
 80023b2:	eb43 0901 	adc.w	r9, r3, r1
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ca:	4690      	mov	r8, r2
 80023cc:	4699      	mov	r9, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	eb18 0303 	adds.w	r3, r8, r3
 80023d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023d8:	462b      	mov	r3, r5
 80023da:	eb49 0303 	adc.w	r3, r9, r3
 80023de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023f6:	460b      	mov	r3, r1
 80023f8:	18db      	adds	r3, r3, r3
 80023fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80023fc:	4613      	mov	r3, r2
 80023fe:	eb42 0303 	adc.w	r3, r2, r3
 8002402:	657b      	str	r3, [r7, #84]	@ 0x54
 8002404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800240c:	f7fd fee8 	bl	80001e0 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4b61      	ldr	r3, [pc, #388]	@ (800259c <UART_SetConfig+0x2d4>)
 8002416:	fba3 2302 	umull	r2, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	011c      	lsls	r4, r3, #4
 800241e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002422:	2200      	movs	r2, #0
 8002424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002428:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800242c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002430:	4642      	mov	r2, r8
 8002432:	464b      	mov	r3, r9
 8002434:	1891      	adds	r1, r2, r2
 8002436:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002438:	415b      	adcs	r3, r3
 800243a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800243c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002440:	4641      	mov	r1, r8
 8002442:	eb12 0a01 	adds.w	sl, r2, r1
 8002446:	4649      	mov	r1, r9
 8002448:	eb43 0b01 	adc.w	fp, r3, r1
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800245c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002460:	4692      	mov	sl, r2
 8002462:	469b      	mov	fp, r3
 8002464:	4643      	mov	r3, r8
 8002466:	eb1a 0303 	adds.w	r3, sl, r3
 800246a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800246e:	464b      	mov	r3, r9
 8002470:	eb4b 0303 	adc.w	r3, fp, r3
 8002474:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002484:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800248c:	460b      	mov	r3, r1
 800248e:	18db      	adds	r3, r3, r3
 8002490:	643b      	str	r3, [r7, #64]	@ 0x40
 8002492:	4613      	mov	r3, r2
 8002494:	eb42 0303 	adc.w	r3, r2, r3
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
 800249a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800249e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024a2:	f7fd fe9d 	bl	80001e0 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <UART_SetConfig+0x2d4>)
 80024ae:	fba3 2301 	umull	r2, r3, r3, r1
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2264      	movs	r2, #100	@ 0x64
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024c2:	4b36      	ldr	r3, [pc, #216]	@ (800259c <UART_SetConfig+0x2d4>)
 80024c4:	fba3 2302 	umull	r2, r3, r3, r2
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024d0:	441c      	add	r4, r3
 80024d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d6:	2200      	movs	r2, #0
 80024d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024e4:	4642      	mov	r2, r8
 80024e6:	464b      	mov	r3, r9
 80024e8:	1891      	adds	r1, r2, r2
 80024ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024ec:	415b      	adcs	r3, r3
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024f4:	4641      	mov	r1, r8
 80024f6:	1851      	adds	r1, r2, r1
 80024f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80024fa:	4649      	mov	r1, r9
 80024fc:	414b      	adcs	r3, r1
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800250c:	4659      	mov	r1, fp
 800250e:	00cb      	lsls	r3, r1, #3
 8002510:	4651      	mov	r1, sl
 8002512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002516:	4651      	mov	r1, sl
 8002518:	00ca      	lsls	r2, r1, #3
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	4603      	mov	r3, r0
 8002520:	4642      	mov	r2, r8
 8002522:	189b      	adds	r3, r3, r2
 8002524:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002528:	464b      	mov	r3, r9
 800252a:	460a      	mov	r2, r1
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002540:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002548:	460b      	mov	r3, r1
 800254a:	18db      	adds	r3, r3, r3
 800254c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800254e:	4613      	mov	r3, r2
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800255a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800255e:	f7fd fe3f 	bl	80001e0 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <UART_SetConfig+0x2d4>)
 8002568:	fba3 1302 	umull	r1, r3, r3, r2
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	2164      	movs	r1, #100	@ 0x64
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	3332      	adds	r3, #50	@ 0x32
 800257a:	4a08      	ldr	r2, [pc, #32]	@ (800259c <UART_SetConfig+0x2d4>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	f003 0207 	and.w	r2, r3, #7
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4422      	add	r2, r4
 800258e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002590:	e106      	b.n	80027a0 <UART_SetConfig+0x4d8>
 8002592:	bf00      	nop
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	1891      	adds	r1, r2, r2
 80025b8:	6239      	str	r1, [r7, #32]
 80025ba:	415b      	adcs	r3, r3
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025c2:	4641      	mov	r1, r8
 80025c4:	1854      	adds	r4, r2, r1
 80025c6:	4649      	mov	r1, r9
 80025c8:	eb43 0501 	adc.w	r5, r3, r1
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	00eb      	lsls	r3, r5, #3
 80025d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025da:	00e2      	lsls	r2, r4, #3
 80025dc:	4614      	mov	r4, r2
 80025de:	461d      	mov	r5, r3
 80025e0:	4643      	mov	r3, r8
 80025e2:	18e3      	adds	r3, r4, r3
 80025e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025e8:	464b      	mov	r3, r9
 80025ea:	eb45 0303 	adc.w	r3, r5, r3
 80025ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800260e:	4629      	mov	r1, r5
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002618:	4621      	mov	r1, r4
 800261a:	008a      	lsls	r2, r1, #2
 800261c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002620:	f7fd fdde 	bl	80001e0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b60      	ldr	r3, [pc, #384]	@ (80027ac <UART_SetConfig+0x4e4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011c      	lsls	r4, r3, #4
 8002632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800263c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	1891      	adds	r1, r2, r2
 800264a:	61b9      	str	r1, [r7, #24]
 800264c:	415b      	adcs	r3, r3
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002654:	4641      	mov	r1, r8
 8002656:	1851      	adds	r1, r2, r1
 8002658:	6139      	str	r1, [r7, #16]
 800265a:	4649      	mov	r1, r9
 800265c:	414b      	adcs	r3, r1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800266c:	4659      	mov	r1, fp
 800266e:	00cb      	lsls	r3, r1, #3
 8002670:	4651      	mov	r1, sl
 8002672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002676:	4651      	mov	r1, sl
 8002678:	00ca      	lsls	r2, r1, #3
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	4603      	mov	r3, r0
 8002680:	4642      	mov	r2, r8
 8002682:	189b      	adds	r3, r3, r2
 8002684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002688:	464b      	mov	r3, r9
 800268a:	460a      	mov	r2, r1
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026ac:	4649      	mov	r1, r9
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b6:	4641      	mov	r1, r8
 80026b8:	008a      	lsls	r2, r1, #2
 80026ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026be:	f7fd fd8f 	bl	80001e0 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <UART_SetConfig+0x4e4>)
 80026ca:	fba3 2301 	umull	r2, r3, r3, r1
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2264      	movs	r2, #100	@ 0x64
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	1acb      	subs	r3, r1, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	@ 0x32
 80026dc:	4a33      	ldr	r2, [pc, #204]	@ (80027ac <UART_SetConfig+0x4e4>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e8:	441c      	add	r4, r3
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80026f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80026f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	415b      	adcs	r3, r3
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002708:	4641      	mov	r1, r8
 800270a:	1851      	adds	r1, r2, r1
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	4649      	mov	r1, r9
 8002710:	414b      	adcs	r3, r1
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002720:	4659      	mov	r1, fp
 8002722:	00cb      	lsls	r3, r1, #3
 8002724:	4651      	mov	r1, sl
 8002726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272a:	4651      	mov	r1, sl
 800272c:	00ca      	lsls	r2, r1, #3
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	4603      	mov	r3, r0
 8002734:	4642      	mov	r2, r8
 8002736:	189b      	adds	r3, r3, r2
 8002738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800273a:	464b      	mov	r3, r9
 800273c:	460a      	mov	r2, r1
 800273e:	eb42 0303 	adc.w	r3, r2, r3
 8002742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	663b      	str	r3, [r7, #96]	@ 0x60
 800274e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800275c:	4649      	mov	r1, r9
 800275e:	008b      	lsls	r3, r1, #2
 8002760:	4641      	mov	r1, r8
 8002762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002766:	4641      	mov	r1, r8
 8002768:	008a      	lsls	r2, r1, #2
 800276a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800276e:	f7fd fd37 	bl	80001e0 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <UART_SetConfig+0x4e4>)
 8002778:	fba3 1302 	umull	r1, r3, r3, r2
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	2164      	movs	r1, #100	@ 0x64
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	3332      	adds	r3, #50	@ 0x32
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <UART_SetConfig+0x4e4>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4422      	add	r2, r4
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027a6:	46bd      	mov	sp, r7
 80027a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ac:	51eb851f 	.word	0x51eb851f

080027b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 0208 	add.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 0208 	add.w	r2, r3, #8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0208 	add.w	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d103      	bne.n	8002872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e00c      	b.n	800288c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3308      	adds	r3, #8
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e002      	b.n	8002880 <vListInsert+0x2e>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d2f6      	bcs.n	800287a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6892      	ldr	r2, [r2, #8]
 80028da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6852      	ldr	r2, [r2, #4]
 80028e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d103      	bne.n	80028f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002944:	f001 fd20 	bl	8004388 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	3b01      	subs	r3, #1
 8002976:	68f9      	ldr	r1, [r7, #12]
 8002978:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	441a      	add	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	22ff      	movs	r2, #255	@ 0xff
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	22ff      	movs	r2, #255	@ 0xff
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d114      	bne.n	80029c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01a      	beq.n	80029d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3310      	adds	r3, #16
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ffd8 	bl	800395c <xTaskRemoveFromEventList>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <xQueueGenericReset+0xd0>)
 80029b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	e009      	b.n	80029d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3310      	adds	r3, #16
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fef1 	bl	80027b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3324      	adds	r3, #36	@ 0x24
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff feec 	bl	80027b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029d8:	f001 fd08 	bl	80043ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	@ 0x28
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	613b      	str	r3, [r7, #16]
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3348      	adds	r3, #72	@ 0x48
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fd8e 	bl	8004548 <pvPortMalloc>
 8002a2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d011      	beq.n	8002a58 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3348      	adds	r3, #72	@ 0x48
 8002a3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f805 	bl	8002a62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a58:	69bb      	ldr	r3, [r7, #24]
	}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e002      	b.n	8002a84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a90:	2101      	movs	r1, #1
 8002a92:	69b8      	ldr	r0, [r7, #24]
 8002a94:	f7ff ff40 	bl	8002918 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f81c 	bl	8002b04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	6939      	ldr	r1, [r7, #16]
 8002aec:	6978      	ldr	r0, [r7, #20]
 8002aee:	f7ff ff7d 	bl	80029ec <xQueueGenericCreate>
 8002af2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff ffd3 	bl	8002aa0 <prvInitialiseMutex>

		return xNewQueue;
 8002afa:	68fb      	ldr	r3, [r7, #12]
	}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	@ 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <xQueueGenericSend+0x34>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <xQueueGenericSend+0x42>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <xQueueGenericSend+0x46>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericSend+0x48>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <xQueueGenericSend+0x64>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d103      	bne.n	8002b76 <xQueueGenericSend+0x72>
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <xQueueGenericSend+0x76>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericSend+0x78>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <xQueueGenericSend+0x94>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	623b      	str	r3, [r7, #32]
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b98:	f001 f8a0 	bl	8003cdc <xTaskGetSchedulerState>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <xQueueGenericSend+0xa4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <xQueueGenericSend+0xa8>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <xQueueGenericSend+0xaa>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xQueueGenericSend+0xc6>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	61fb      	str	r3, [r7, #28]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bca:	f001 fbdd 	bl	8004388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <xQueueGenericSend+0xdc>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d129      	bne.n	8002c34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002be6:	f000 f9b7 	bl	8002f58 <prvCopyDataToQueue>
 8002bea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	3324      	adds	r3, #36	@ 0x24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 feaf 	bl	800395c <xTaskRemoveFromEventList>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c04:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <xQueueGenericSend+0x200>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	e00a      	b.n	8002c2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <xQueueGenericSend+0x200>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c2c:	f001 fbde 	bl	80043ec <vPortExitCritical>
				return pdPASS;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e063      	b.n	8002cfc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c3a:	f001 fbd7 	bl	80043ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e05c      	b.n	8002cfc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fee9 	bl	8003a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c56:	f001 fbc9 	bl	80043ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c5a:	f000 fc97 	bl	800358c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5e:	f001 fb93 	bl	8004388 <vPortEnterCritical>
 8002c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d103      	bne.n	8002c78 <xQueueGenericSend+0x174>
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSend+0x18a>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c8e:	f001 fbad 	bl	80043ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c92:	1d3a      	adds	r2, r7, #4
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fed8 	bl	8003a50 <xTaskCheckForTimeOut>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d124      	bne.n	8002cf0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ca8:	f000 fa28 	bl	80030fc <prvIsQueueFull>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fe28 	bl	8003910 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cc2:	f000 f9b3 	bl	800302c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cc6:	f000 fc6f 	bl	80035a8 <xTaskResumeAll>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f af7c 	bne.w	8002bca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <xQueueGenericSend+0x200>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	e772      	b.n	8002bca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ce6:	f000 f9a1 	bl	800302c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cea:	f000 fc5d 	bl	80035a8 <xTaskResumeAll>
 8002cee:	e76c      	b.n	8002bca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cf2:	f000 f99b 	bl	800302c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cf6:	f000 fc57 	bl	80035a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3738      	adds	r7, #56	@ 0x38
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	@ 0x38
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	623b      	str	r3, [r7, #32]
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	61fb      	str	r3, [r7, #28]
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d5c:	f000 ffbe 	bl	8003cdc <xTaskGetSchedulerState>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <xQueueSemaphoreTake+0x64>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <xQueueSemaphoreTake+0x68>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <xQueueSemaphoreTake+0x6a>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	61bb      	str	r3, [r7, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	e7fd      	b.n	8002d8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d8e:	f001 fafb 	bl	8004388 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d024      	beq.n	8002de8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002dae:	f001 f941 	bl	8004034 <pvTaskIncrementMutexHeldCount>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	3310      	adds	r3, #16
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fdc9 	bl	800395c <xTaskRemoveFromEventList>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002dd0:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <xQueueSemaphoreTake+0x21c>)
 8002dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002de0:	f001 fb04 	bl	80043ec <vPortExitCritical>
				return pdPASS;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e098      	b.n	8002f1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d112      	bne.n	8002e14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	617b      	str	r3, [r7, #20]
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002e0c:	f001 faee 	bl	80043ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e082      	b.n	8002f1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fe00 	bl	8003a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e28:	f001 fae0 	bl	80043ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e2c:	f000 fbae 	bl	800358c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e30:	f001 faaa 	bl	8004388 <vPortEnterCritical>
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d103      	bne.n	8002e4a <xQueueSemaphoreTake+0x142>
 8002e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d103      	bne.n	8002e60 <xQueueSemaphoreTake+0x158>
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e60:	f001 fac4 	bl	80043ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e64:	463a      	mov	r2, r7
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fdef 	bl	8003a50 <xTaskCheckForTimeOut>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d132      	bne.n	8002ede <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e7a:	f000 f929 	bl	80030d0 <prvIsQueueEmpty>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d026      	beq.n	8002ed2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002e8c:	f001 fa7c 	bl	8004388 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 ff3f 	bl	8003d18 <xTaskPriorityInherit>
 8002e9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002e9c:	f001 faa6 	bl	80043ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea2:	3324      	adds	r3, #36	@ 0x24
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fd31 	bl	8003910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002eb0:	f000 f8bc 	bl	800302c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb4:	f000 fb78 	bl	80035a8 <xTaskResumeAll>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f47f af67 	bne.w	8002d8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002ec0:	4b18      	ldr	r3, [pc, #96]	@ (8002f24 <xQueueSemaphoreTake+0x21c>)
 8002ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	e75d      	b.n	8002d8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002ed2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ed4:	f000 f8aa 	bl	800302c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ed8:	f000 fb66 	bl	80035a8 <xTaskResumeAll>
 8002edc:	e757      	b.n	8002d8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ee0:	f000 f8a4 	bl	800302c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ee4:	f000 fb60 	bl	80035a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002eea:	f000 f8f1 	bl	80030d0 <prvIsQueueEmpty>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f43f af4c 	beq.w	8002d8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002efc:	f001 fa44 	bl	8004388 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002f00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f02:	f000 f811 	bl	8002f28 <prvGetDisinheritPriorityAfterTimeout>
 8002f06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f800 	bl	8003f14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002f14:	f001 fa6a 	bl	80043ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3738      	adds	r7, #56	@ 0x38
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e001      	b.n	8002f4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d14d      	bne.n	800301a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 ff3e 	bl	8003e04 <xTaskPriorityDisinherit>
 8002f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e043      	b.n	800301a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d119      	bne.n	8002fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6858      	ldr	r0, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f001 fcea 	bl	800497c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d32b      	bcc.n	800301a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e026      	b.n	800301a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68d8      	ldr	r0, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	f001 fcd0 	bl	800497c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d207      	bcs.n	8003008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	425b      	negs	r3, r3
 8003002:	441a      	add	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d105      	bne.n	800301a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	3b01      	subs	r3, #1
 8003018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003022:	697b      	ldr	r3, [r7, #20]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003034:	f001 f9a8 	bl	8004388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800303e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003040:	e011      	b.n	8003066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3324      	adds	r3, #36	@ 0x24
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fc84 	bl	800395c <xTaskRemoveFromEventList>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800305a:	f000 fd5d 	bl	8003b18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3b01      	subs	r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	dce9      	bgt.n	8003042 <prvUnlockQueue+0x16>
 800306e:	e000      	b.n	8003072 <prvUnlockQueue+0x46>
					break;
 8003070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	22ff      	movs	r2, #255	@ 0xff
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800307a:	f001 f9b7 	bl	80043ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800307e:	f001 f983 	bl	8004388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800308a:	e011      	b.n	80030b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3310      	adds	r3, #16
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc5f 	bl	800395c <xTaskRemoveFromEventList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030a4:	f000 fd38 	bl	8003b18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	dce9      	bgt.n	800308c <prvUnlockQueue+0x60>
 80030b8:	e000      	b.n	80030bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	22ff      	movs	r2, #255	@ 0xff
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80030c4:	f001 f992 	bl	80043ec <vPortExitCritical>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d8:	f001 f956 	bl	8004388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e001      	b.n	80030ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ee:	f001 f97d 	bl	80043ec <vPortExitCritical>

	return xReturn;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003104:	f001 f940 	bl	8004388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003110:	429a      	cmp	r2, r3
 8003112:	d102      	bne.n	800311a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e001      	b.n	800311e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800311e:	f001 f965 	bl	80043ec <vPortExitCritical>

	return xReturn;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af04      	add	r7, sp, #16
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800313a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	623b      	str	r3, [r7, #32]
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <xTaskCreateStatic+0x4a>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	61fb      	str	r3, [r7, #28]
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003176:	2354      	movs	r3, #84	@ 0x54
 8003178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b54      	cmp	r3, #84	@ 0x54
 800317e:	d00b      	beq.n	8003198 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003198:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01e      	beq.n	80031de <xTaskCreateStatic+0xb2>
 80031a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01b      	beq.n	80031de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031b8:	2300      	movs	r3, #0
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f850 	bl	8003276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031d8:	f000 f8d6 	bl	8003388 <prvAddNewTaskToReadyList>
 80031dc:	e001      	b.n	80031e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031e2:	697b      	ldr	r3, [r7, #20]
	}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3728      	adds	r7, #40	@ 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	@ 0x30
 80031f0:	af04      	add	r7, sp, #16
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f001 f9a1 	bl	8004548 <pvPortMalloc>
 8003206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800320e:	2054      	movs	r0, #84	@ 0x54
 8003210:	f001 f99a 	bl	8004548 <pvPortMalloc>
 8003214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
 8003222:	e005      	b.n	8003230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003224:	6978      	ldr	r0, [r7, #20]
 8003226:	f001 fa5d 	bl	80046e4 <vPortFree>
 800322a:	e001      	b.n	8003230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	2300      	movs	r3, #0
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f80e 	bl	8003276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800325a:	69f8      	ldr	r0, [r7, #28]
 800325c:	f000 f894 	bl	8003388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003260:	2301      	movs	r3, #1
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e002      	b.n	800326c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800326c:	69bb      	ldr	r3, [r7, #24]
	}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b088      	sub	sp, #32
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800328e:	3b01      	subs	r3, #1
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f023 0307 	bic.w	r3, r3, #7
 800329c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	617b      	str	r3, [r7, #20]
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01f      	beq.n	8003306 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e012      	b.n	80032f2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	7819      	ldrb	r1, [r3, #0]
 80032d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	3334      	adds	r3, #52	@ 0x34
 80032dc:	460a      	mov	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3301      	adds	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d9e9      	bls.n	80032cc <prvInitialiseNewTask+0x56>
 80032f8:	e000      	b.n	80032fc <prvInitialiseNewTask+0x86>
			{
				break;
 80032fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003304:	e003      	b.n	800330e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	2b06      	cmp	r3, #6
 8003312:	d901      	bls.n	8003318 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003314:	2306      	movs	r3, #6
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	2200      	movs	r2, #0
 8003328:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fa5e 	bl	80027f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003336:	3318      	adds	r3, #24
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fa59 	bl	80027f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	f1c3 0207 	rsb	r2, r3, #7
 800334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	2200      	movs	r2, #0
 8003358:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800335a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	69b8      	ldr	r0, [r7, #24]
 8003368:	f000 fede 	bl	8004128 <pxPortInitialiseStack>
 800336c:	4602      	mov	r2, r0
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003390:	f000 fffa 	bl	8004388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003394:	4b2a      	ldr	r3, [pc, #168]	@ (8003440 <prvAddNewTaskToReadyList+0xb8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3301      	adds	r3, #1
 800339a:	4a29      	ldr	r2, [pc, #164]	@ (8003440 <prvAddNewTaskToReadyList+0xb8>)
 800339c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800339e:	4b29      	ldr	r3, [pc, #164]	@ (8003444 <prvAddNewTaskToReadyList+0xbc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033a6:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <prvAddNewTaskToReadyList+0xbc>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033ac:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <prvAddNewTaskToReadyList+0xb8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d110      	bne.n	80033d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033b4:	f000 fbd4 	bl	8003b60 <prvInitialiseTaskLists>
 80033b8:	e00d      	b.n	80033d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033ba:	4b23      	ldr	r3, [pc, #140]	@ (8003448 <prvAddNewTaskToReadyList+0xc0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033c2:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <prvAddNewTaskToReadyList+0xbc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d802      	bhi.n	80033d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <prvAddNewTaskToReadyList+0xbc>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <prvAddNewTaskToReadyList+0xc4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <prvAddNewTaskToReadyList+0xc4>)
 80033de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <prvAddNewTaskToReadyList+0xc8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	4a18      	ldr	r2, [pc, #96]	@ (8003450 <prvAddNewTaskToReadyList+0xc8>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4a15      	ldr	r2, [pc, #84]	@ (8003454 <prvAddNewTaskToReadyList+0xcc>)
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f7ff f9fe 	bl	800280a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800340e:	f000 ffed 	bl	80043ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <prvAddNewTaskToReadyList+0xc0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800341a:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <prvAddNewTaskToReadyList+0xbc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	429a      	cmp	r2, r3
 8003426:	d207      	bcs.n	8003438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <prvAddNewTaskToReadyList+0xd0>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000420 	.word	0x20000420
 8003444:	20000320 	.word	0x20000320
 8003448:	2000042c 	.word	0x2000042c
 800344c:	2000043c 	.word	0x2000043c
 8003450:	20000428 	.word	0x20000428
 8003454:	20000324 	.word	0x20000324
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d018      	beq.n	80034a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800346e:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <vTaskDelay+0x64>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <vTaskDelay+0x32>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60bb      	str	r3, [r7, #8]
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	e7fd      	b.n	800348a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800348e:	f000 f87d 	bl	800358c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003492:	2100      	movs	r1, #0
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fde1 	bl	800405c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800349a:	f000 f885 	bl	80035a8 <xTaskResumeAll>
 800349e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80034a6:	4b07      	ldr	r3, [pc, #28]	@ (80034c4 <vTaskDelay+0x68>)
 80034a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000448 	.word	0x20000448
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034d6:	463a      	mov	r2, r7
 80034d8:	1d39      	adds	r1, r7, #4
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fc fff6 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	9202      	str	r2, [sp, #8]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	460a      	mov	r2, r1
 80034f6:	491f      	ldr	r1, [pc, #124]	@ (8003574 <vTaskStartScheduler+0xac>)
 80034f8:	481f      	ldr	r0, [pc, #124]	@ (8003578 <vTaskStartScheduler+0xb0>)
 80034fa:	f7ff fe17 	bl	800312c <xTaskCreateStatic>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a1e      	ldr	r2, [pc, #120]	@ (800357c <vTaskStartScheduler+0xb4>)
 8003502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003504:	4b1d      	ldr	r3, [pc, #116]	@ (800357c <vTaskStartScheduler+0xb4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e001      	b.n	8003516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d116      	bne.n	800354a <vTaskStartScheduler+0x82>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	613b      	str	r3, [r7, #16]
}
 800352e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003530:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <vTaskStartScheduler+0xb8>)
 8003532:	f04f 32ff 	mov.w	r2, #4294967295
 8003536:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003538:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <vTaskStartScheduler+0xbc>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <vTaskStartScheduler+0xc0>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003544:	f000 fe7c 	bl	8004240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003548:	e00f      	b.n	800356a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d10b      	bne.n	800356a <vTaskStartScheduler+0xa2>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <vTaskStartScheduler+0x9e>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	08004a8c 	.word	0x08004a8c
 8003578:	08003b31 	.word	0x08003b31
 800357c:	20000444 	.word	0x20000444
 8003580:	20000440 	.word	0x20000440
 8003584:	2000042c 	.word	0x2000042c
 8003588:	20000424 	.word	0x20000424

0800358c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003590:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <vTaskSuspendAll+0x18>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	4a03      	ldr	r2, [pc, #12]	@ (80035a4 <vTaskSuspendAll+0x18>)
 8003598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	20000448 	.word	0x20000448

080035a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035b6:	4b42      	ldr	r3, [pc, #264]	@ (80036c0 <xTaskResumeAll+0x118>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	603b      	str	r3, [r7, #0]
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	e7fd      	b.n	80035d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035d6:	f000 fed7 	bl	8004388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035da:	4b39      	ldr	r3, [pc, #228]	@ (80036c0 <xTaskResumeAll+0x118>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3b01      	subs	r3, #1
 80035e0:	4a37      	ldr	r2, [pc, #220]	@ (80036c0 <xTaskResumeAll+0x118>)
 80035e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e4:	4b36      	ldr	r3, [pc, #216]	@ (80036c0 <xTaskResumeAll+0x118>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d161      	bne.n	80036b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ec:	4b35      	ldr	r3, [pc, #212]	@ (80036c4 <xTaskResumeAll+0x11c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d05d      	beq.n	80036b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035f4:	e02e      	b.n	8003654 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f6:	4b34      	ldr	r3, [pc, #208]	@ (80036c8 <xTaskResumeAll+0x120>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3318      	adds	r3, #24
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f95e 	bl	80028c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3304      	adds	r3, #4
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff f959 	bl	80028c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	2201      	movs	r2, #1
 8003618:	409a      	lsls	r2, r3
 800361a:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <xTaskResumeAll+0x124>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	4a2a      	ldr	r2, [pc, #168]	@ (80036cc <xTaskResumeAll+0x124>)
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <xTaskResumeAll+0x128>)
 8003632:	441a      	add	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f7ff f8e5 	bl	800280a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003644:	4b23      	ldr	r3, [pc, #140]	@ (80036d4 <xTaskResumeAll+0x12c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800364e:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <xTaskResumeAll+0x130>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003654:	4b1c      	ldr	r3, [pc, #112]	@ (80036c8 <xTaskResumeAll+0x120>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1cc      	bne.n	80035f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003662:	f000 fb1b 	bl	8003c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003666:	4b1d      	ldr	r3, [pc, #116]	@ (80036dc <xTaskResumeAll+0x134>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003672:	f000 f837 	bl	80036e4 <xTaskIncrementTick>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800367c:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <xTaskResumeAll+0x130>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3b01      	subs	r3, #1
 8003686:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f1      	bne.n	8003672 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800368e:	4b13      	ldr	r3, [pc, #76]	@ (80036dc <xTaskResumeAll+0x134>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003694:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <xTaskResumeAll+0x130>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036a0:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <xTaskResumeAll+0x138>)
 80036a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036b0:	f000 fe9c 	bl	80043ec <vPortExitCritical>

	return xAlreadyYielded;
 80036b4:	68bb      	ldr	r3, [r7, #8]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000448 	.word	0x20000448
 80036c4:	20000420 	.word	0x20000420
 80036c8:	200003e0 	.word	0x200003e0
 80036cc:	20000428 	.word	0x20000428
 80036d0:	20000324 	.word	0x20000324
 80036d4:	20000320 	.word	0x20000320
 80036d8:	20000434 	.word	0x20000434
 80036dc:	20000430 	.word	0x20000430
 80036e0:	e000ed04 	.word	0xe000ed04

080036e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ee:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <xTaskIncrementTick+0x148>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 808f 	bne.w	8003816 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003830 <xTaskIncrementTick+0x14c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003700:	4a4b      	ldr	r2, [pc, #300]	@ (8003830 <xTaskIncrementTick+0x14c>)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d121      	bne.n	8003750 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800370c:	4b49      	ldr	r3, [pc, #292]	@ (8003834 <xTaskIncrementTick+0x150>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	603b      	str	r3, [r7, #0]
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xTaskIncrementTick+0x46>
 800372e:	4b41      	ldr	r3, [pc, #260]	@ (8003834 <xTaskIncrementTick+0x150>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	4b40      	ldr	r3, [pc, #256]	@ (8003838 <xTaskIncrementTick+0x154>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3e      	ldr	r2, [pc, #248]	@ (8003834 <xTaskIncrementTick+0x150>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4a3e      	ldr	r2, [pc, #248]	@ (8003838 <xTaskIncrementTick+0x154>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b3e      	ldr	r3, [pc, #248]	@ (800383c <xTaskIncrementTick+0x158>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	4a3c      	ldr	r2, [pc, #240]	@ (800383c <xTaskIncrementTick+0x158>)
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	f000 faa6 	bl	8003c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003750:	4b3b      	ldr	r3, [pc, #236]	@ (8003840 <xTaskIncrementTick+0x15c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	429a      	cmp	r2, r3
 8003758:	d348      	bcc.n	80037ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800375a:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <xTaskIncrementTick+0x150>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003764:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <xTaskIncrementTick+0x15c>)
 8003766:	f04f 32ff 	mov.w	r2, #4294967295
 800376a:	601a      	str	r2, [r3, #0]
					break;
 800376c:	e03e      	b.n	80037ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376e:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <xTaskIncrementTick+0x150>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d203      	bcs.n	800378e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003786:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <xTaskIncrementTick+0x15c>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800378c:	e02e      	b.n	80037ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3304      	adds	r3, #4
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f896 	bl	80028c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3318      	adds	r3, #24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff f88d 	bl	80028c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	2201      	movs	r2, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <xTaskIncrementTick+0x160>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <xTaskIncrementTick+0x160>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <xTaskIncrementTick+0x164>)
 80037ca:	441a      	add	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7ff f819 	bl	800280a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <xTaskIncrementTick+0x168>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3b9      	bcc.n	800375a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ea:	e7b6      	b.n	800375a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <xTaskIncrementTick+0x168>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f2:	4915      	ldr	r1, [pc, #84]	@ (8003848 <xTaskIncrementTick+0x164>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d901      	bls.n	8003808 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003808:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <xTaskIncrementTick+0x16c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e004      	b.n	8003820 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003816:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <xTaskIncrementTick+0x170>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	4a0d      	ldr	r2, [pc, #52]	@ (8003854 <xTaskIncrementTick+0x170>)
 800381e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003820:	697b      	ldr	r3, [r7, #20]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000448 	.word	0x20000448
 8003830:	20000424 	.word	0x20000424
 8003834:	200003d8 	.word	0x200003d8
 8003838:	200003dc 	.word	0x200003dc
 800383c:	20000438 	.word	0x20000438
 8003840:	20000440 	.word	0x20000440
 8003844:	20000428 	.word	0x20000428
 8003848:	20000324 	.word	0x20000324
 800384c:	20000320 	.word	0x20000320
 8003850:	20000434 	.word	0x20000434
 8003854:	20000430 	.word	0x20000430

08003858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800385e:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <vTaskSwitchContext+0xa4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003866:	4b26      	ldr	r3, [pc, #152]	@ (8003900 <vTaskSwitchContext+0xa8>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800386c:	e040      	b.n	80038f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <vTaskSwitchContext+0xa8>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003874:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <vTaskSwitchContext+0xac>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f1c3 031f 	rsb	r3, r3, #31
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	491f      	ldr	r1, [pc, #124]	@ (8003908 <vTaskSwitchContext+0xb0>)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	607b      	str	r3, [r7, #4]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <vTaskSwitchContext+0x5a>
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a11      	ldr	r2, [pc, #68]	@ (8003908 <vTaskSwitchContext+0xb0>)
 80038c2:	4413      	add	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	3308      	adds	r3, #8
 80038d8:	429a      	cmp	r2, r3
 80038da:	d104      	bne.n	80038e6 <vTaskSwitchContext+0x8e>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a07      	ldr	r2, [pc, #28]	@ (800390c <vTaskSwitchContext+0xb4>)
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	20000448 	.word	0x20000448
 8003900:	20000434 	.word	0x20000434
 8003904:	20000428 	.word	0x20000428
 8003908:	20000324 	.word	0x20000324
 800390c:	20000320 	.word	0x20000320

08003910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	60fb      	str	r3, [r7, #12]
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003938:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <vTaskPlaceOnEventList+0x48>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3318      	adds	r3, #24
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fe ff86 	bl	8002852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003946:	2101      	movs	r1, #1
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f000 fb87 	bl	800405c <prvAddCurrentTaskToDelayedList>
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000320 	.word	0x20000320

0800395c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60fb      	str	r3, [r7, #12]
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	e7fd      	b.n	8003986 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3318      	adds	r3, #24
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe ff98 	bl	80028c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <xTaskRemoveFromEventList+0xb0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11c      	bne.n	80039d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ff8f 	bl	80028c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	2201      	movs	r2, #1
 80039ac:	409a      	lsls	r2, r3
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <xTaskRemoveFromEventList+0xb4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <xTaskRemoveFromEventList+0xb4>)
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <xTaskRemoveFromEventList+0xb8>)
 80039c6:	441a      	add	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f7fe ff1b 	bl	800280a <vListInsertEnd>
 80039d4:	e005      	b.n	80039e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3318      	adds	r3, #24
 80039da:	4619      	mov	r1, r3
 80039dc:	480e      	ldr	r0, [pc, #56]	@ (8003a18 <xTaskRemoveFromEventList+0xbc>)
 80039de:	f7fe ff14 	bl	800280a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <xTaskRemoveFromEventList+0xc0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d905      	bls.n	80039fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a20 <xTaskRemoveFromEventList+0xc4>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e001      	b.n	8003a00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a00:	697b      	ldr	r3, [r7, #20]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000448 	.word	0x20000448
 8003a10:	20000428 	.word	0x20000428
 8003a14:	20000324 	.word	0x20000324
 8003a18:	200003e0 	.word	0x200003e0
 8003a1c:	20000320 	.word	0x20000320
 8003a20:	20000434 	.word	0x20000434

08003a24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <vTaskInternalSetTimeOutState+0x24>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <vTaskInternalSetTimeOutState+0x28>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	605a      	str	r2, [r3, #4]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000438 	.word	0x20000438
 8003a4c:	20000424 	.word	0x20000424

08003a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	613b      	str	r3, [r7, #16]
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	60fb      	str	r3, [r7, #12]
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	e7fd      	b.n	8003a92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003a96:	f000 fc77 	bl	8004388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <xTaskCheckForTimeOut+0xc0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d102      	bne.n	8003aba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	e023      	b.n	8003b02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <xTaskCheckForTimeOut+0xc4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d007      	beq.n	8003ad6 <xTaskCheckForTimeOut+0x86>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	e015      	b.n	8003b02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d20b      	bcs.n	8003af8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff99 	bl	8003a24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e004      	b.n	8003b02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b02:	f000 fc73 	bl	80043ec <vPortExitCritical>

	return xReturn;
 8003b06:	69fb      	ldr	r3, [r7, #28]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000424 	.word	0x20000424
 8003b14:	20000438 	.word	0x20000438

08003b18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	@ (8003b2c <vTaskMissedYield+0x14>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	20000434 	.word	0x20000434

08003b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b38:	f000 f852 	bl	8003be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b3c:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <prvIdleTask+0x28>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d9f9      	bls.n	8003b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <prvIdleTask+0x2c>)
 8003b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b54:	e7f0      	b.n	8003b38 <prvIdleTask+0x8>
 8003b56:	bf00      	nop
 8003b58:	20000324 	.word	0x20000324
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e00c      	b.n	8003b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4a12      	ldr	r2, [pc, #72]	@ (8003bc0 <prvInitialiseTaskLists+0x60>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fe18 	bl	80027b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d9ef      	bls.n	8003b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b8c:	480d      	ldr	r0, [pc, #52]	@ (8003bc4 <prvInitialiseTaskLists+0x64>)
 8003b8e:	f7fe fe0f 	bl	80027b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b92:	480d      	ldr	r0, [pc, #52]	@ (8003bc8 <prvInitialiseTaskLists+0x68>)
 8003b94:	f7fe fe0c 	bl	80027b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b98:	480c      	ldr	r0, [pc, #48]	@ (8003bcc <prvInitialiseTaskLists+0x6c>)
 8003b9a:	f7fe fe09 	bl	80027b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b9e:	480c      	ldr	r0, [pc, #48]	@ (8003bd0 <prvInitialiseTaskLists+0x70>)
 8003ba0:	f7fe fe06 	bl	80027b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ba4:	480b      	ldr	r0, [pc, #44]	@ (8003bd4 <prvInitialiseTaskLists+0x74>)
 8003ba6:	f7fe fe03 	bl	80027b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <prvInitialiseTaskLists+0x78>)
 8003bac:	4a05      	ldr	r2, [pc, #20]	@ (8003bc4 <prvInitialiseTaskLists+0x64>)
 8003bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <prvInitialiseTaskLists+0x7c>)
 8003bb2:	4a05      	ldr	r2, [pc, #20]	@ (8003bc8 <prvInitialiseTaskLists+0x68>)
 8003bb4:	601a      	str	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000324 	.word	0x20000324
 8003bc4:	200003b0 	.word	0x200003b0
 8003bc8:	200003c4 	.word	0x200003c4
 8003bcc:	200003e0 	.word	0x200003e0
 8003bd0:	200003f4 	.word	0x200003f4
 8003bd4:	2000040c 	.word	0x2000040c
 8003bd8:	200003d8 	.word	0x200003d8
 8003bdc:	200003dc 	.word	0x200003dc

08003be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be6:	e019      	b.n	8003c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003be8:	f000 fbce 	bl	8004388 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bec:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <prvCheckTasksWaitingTermination+0x50>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fe63 	bl	80028c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <prvCheckTasksWaitingTermination+0x54>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	4a0b      	ldr	r2, [pc, #44]	@ (8003c34 <prvCheckTasksWaitingTermination+0x54>)
 8003c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <prvCheckTasksWaitingTermination+0x58>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <prvCheckTasksWaitingTermination+0x58>)
 8003c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c12:	f000 fbeb 	bl	80043ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f810 	bl	8003c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <prvCheckTasksWaitingTermination+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e1      	bne.n	8003be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200003f4 	.word	0x200003f4
 8003c34:	20000420 	.word	0x20000420
 8003c38:	20000408 	.word	0x20000408

08003c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd46 	bl	80046e4 <vPortFree>
				vPortFree( pxTCB );
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fd43 	bl	80046e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c5e:	e019      	b.n	8003c94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d103      	bne.n	8003c72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fd3a 	bl	80046e4 <vPortFree>
	}
 8003c70:	e010      	b.n	8003c94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d00b      	beq.n	8003c94 <prvDeleteTCB+0x58>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	60fb      	str	r3, [r7, #12]
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <prvDeleteTCB+0x54>
	}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <prvResetNextTaskUnblockTime+0x38>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cb4:	e008      	b.n	8003cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb6:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <prvResetNextTaskUnblockTime+0x38>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	200003d8 	.word	0x200003d8
 8003cd8:	20000440 	.word	0x20000440

08003cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <xTaskGetSchedulerState+0x34>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cea:	2301      	movs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	e008      	b.n	8003d02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf0:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <xTaskGetSchedulerState+0x38>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e001      	b.n	8003d02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d02:	687b      	ldr	r3, [r7, #4]
	}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	2000042c 	.word	0x2000042c
 8003d14:	20000448 	.word	0x20000448

08003d18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d05e      	beq.n	8003dec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	4b31      	ldr	r3, [pc, #196]	@ (8003df8 <xTaskPriorityInherit+0xe0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d24e      	bcs.n	8003dda <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db06      	blt.n	8003d52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d44:	4b2c      	ldr	r3, [pc, #176]	@ (8003df8 <xTaskPriorityInherit+0xe0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	f1c3 0207 	rsb	r2, r3, #7
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6959      	ldr	r1, [r3, #20]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <xTaskPriorityInherit+0xe4>)
 8003d64:	4413      	add	r3, r2
 8003d66:	4299      	cmp	r1, r3
 8003d68:	d12f      	bne.n	8003dca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fda8 	bl	80028c4 <uxListRemove>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	2201      	movs	r2, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43da      	mvns	r2, r3
 8003d86:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <xTaskPriorityInherit+0xe8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <xTaskPriorityInherit+0xe8>)
 8003d8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d90:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <xTaskPriorityInherit+0xe0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	409a      	lsls	r2, r3
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <xTaskPriorityInherit+0xe8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <xTaskPriorityInherit+0xe8>)
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a10      	ldr	r2, [pc, #64]	@ (8003dfc <xTaskPriorityInherit+0xe4>)
 8003dba:	441a      	add	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7fe fd21 	bl	800280a <vListInsertEnd>
 8003dc8:	e004      	b.n	8003dd4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003dca:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <xTaskPriorityInherit+0xe0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e008      	b.n	8003dec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <xTaskPriorityInherit+0xe0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d201      	bcs.n	8003dec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dec:	68fb      	ldr	r3, [r7, #12]
	}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000320 	.word	0x20000320
 8003dfc:	20000324 	.word	0x20000324
 8003e00:	20000428 	.word	0x20000428

08003e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d070      	beq.n	8003efc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f08 <xTaskPriorityDisinherit+0x104>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d00b      	beq.n	8003e3c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60bb      	str	r3, [r7, #8]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e60:	1e5a      	subs	r2, r3, #1
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d044      	beq.n	8003efc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d140      	bne.n	8003efc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fd20 	bl	80028c4 <uxListRemove>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d115      	bne.n	8003eb6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8e:	491f      	ldr	r1, [pc, #124]	@ (8003f0c <xTaskPriorityDisinherit+0x108>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <xTaskPriorityDisinherit+0xb2>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <xTaskPriorityDisinherit+0x10c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	4a17      	ldr	r2, [pc, #92]	@ (8003f10 <xTaskPriorityDisinherit+0x10c>)
 8003eb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	f1c3 0207 	rsb	r2, r3, #7
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <xTaskPriorityDisinherit+0x10c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <xTaskPriorityDisinherit+0x10c>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a08      	ldr	r2, [pc, #32]	@ (8003f0c <xTaskPriorityDisinherit+0x108>)
 8003eea:	441a      	add	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe fc89 	bl	800280a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003efc:	697b      	ldr	r3, [r7, #20]
	}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000320 	.word	0x20000320
 8003f0c:	20000324 	.word	0x20000324
 8003f10:	20000428 	.word	0x20000428

08003f14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d079      	beq.n	8004020 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10b      	bne.n	8003f4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	60fb      	str	r3, [r7, #12]
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d902      	bls.n	8003f5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e002      	b.n	8003f62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d059      	beq.n	8004020 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d154      	bne.n	8004020 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003f76:	4b2c      	ldr	r3, [pc, #176]	@ (8004028 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d10b      	bne.n	8003f98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	60bb      	str	r3, [r7, #8]
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	db04      	blt.n	8003fb6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f1c3 0207 	rsb	r2, r3, #7
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	6959      	ldr	r1, [r3, #20]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d129      	bne.n	8004020 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fc77 	bl	80028c4 <uxListRemove>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4013      	ands	r3, r2
 8003fee:	4a10      	ldr	r2, [pc, #64]	@ (8004030 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003ff0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4a06      	ldr	r2, [pc, #24]	@ (800402c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004012:	441a      	add	r2, r3
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7fe fbf5 	bl	800280a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004020:	bf00      	nop
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000320 	.word	0x20000320
 800402c:	20000324 	.word	0x20000324
 8004030:	20000428 	.word	0x20000428

08004034 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <pvTaskIncrementMutexHeldCount+0x24>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <pvTaskIncrementMutexHeldCount+0x24>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004046:	3201      	adds	r2, #1
 8004048:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800404a:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <pvTaskIncrementMutexHeldCount+0x24>)
 800404c:	681b      	ldr	r3, [r3, #0]
	}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	20000320 	.word	0x20000320

0800405c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004066:	4b29      	ldr	r3, [pc, #164]	@ (800410c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3304      	adds	r3, #4
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fc26 	bl	80028c4 <uxListRemove>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800407e:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <prvAddCurrentTaskToDelayedList+0xb8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4013      	ands	r3, r2
 8004092:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004094:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d10a      	bne.n	80040b4 <prvAddCurrentTaskToDelayedList+0x58>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	481a      	ldr	r0, [pc, #104]	@ (8004118 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040ae:	f7fe fbac 	bl	800280a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040b2:	e026      	b.n	8004102 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040bc:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d209      	bcs.n	80040e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040cc:	4b13      	ldr	r3, [pc, #76]	@ (800411c <prvAddCurrentTaskToDelayedList+0xc0>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7fe fbba 	bl	8002852 <vListInsert>
}
 80040de:	e010      	b.n	8004102 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7fe fbb0 	bl	8002852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d202      	bcs.n	8004102 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040fc:	4a09      	ldr	r2, [pc, #36]	@ (8004124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6013      	str	r3, [r2, #0]
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000424 	.word	0x20000424
 8004110:	20000320 	.word	0x20000320
 8004114:	20000428 	.word	0x20000428
 8004118:	2000040c 	.word	0x2000040c
 800411c:	200003dc 	.word	0x200003dc
 8004120:	200003d8 	.word	0x200003d8
 8004124:	20000440 	.word	0x20000440

08004128 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b04      	subs	r3, #4
 8004138:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b04      	subs	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3b04      	subs	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004158:	4a0c      	ldr	r2, [pc, #48]	@ (800418c <pxPortInitialiseStack+0x64>)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b14      	subs	r3, #20
 8004162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b04      	subs	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f06f 0202 	mvn.w	r2, #2
 8004176:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b20      	subs	r3, #32
 800417c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	08004191 	.word	0x08004191

08004190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <prvTaskExitError+0x58>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d00b      	beq.n	80041bc <prvTaskExitError+0x2c>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <prvTaskExitError+0x28>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60bb      	str	r3, [r7, #8]
}
 80041ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041d0:	bf00      	nop
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0fc      	beq.n	80041d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	00000000 	.word	0x00000000

080041f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041f0:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <pxCurrentTCBConst2>)
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6808      	ldr	r0, [r1, #0]
 80041f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	f380 8809 	msr	PSP, r0
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8811 	msr	BASEPRI, r0
 800420a:	4770      	bx	lr
 800420c:	f3af 8000 	nop.w

08004210 <pxCurrentTCBConst2>:
 8004210:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004218:	4808      	ldr	r0, [pc, #32]	@ (800423c <prvPortStartFirstTask+0x24>)
 800421a:	6800      	ldr	r0, [r0, #0]
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f380 8808 	msr	MSP, r0
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f380 8814 	msr	CONTROL, r0
 800422a:	b662      	cpsie	i
 800422c:	b661      	cpsie	f
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	df00      	svc	0
 8004238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800423a:	bf00      	nop
 800423c:	e000ed08 	.word	0xe000ed08

08004240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004246:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <xPortStartScheduler+0x124>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a47      	ldr	r2, [pc, #284]	@ (8004368 <xPortStartScheduler+0x128>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10b      	bne.n	8004268 <xPortStartScheduler+0x28>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004268:	4b3e      	ldr	r3, [pc, #248]	@ (8004364 <xPortStartScheduler+0x124>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a3f      	ldr	r2, [pc, #252]	@ (800436c <xPortStartScheduler+0x12c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d10b      	bne.n	800428a <xPortStartScheduler+0x4a>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60fb      	str	r3, [r7, #12]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800428a:	4b39      	ldr	r3, [pc, #228]	@ (8004370 <xPortStartScheduler+0x130>)
 800428c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	22ff      	movs	r2, #255	@ 0xff
 800429a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b31      	ldr	r3, [pc, #196]	@ (8004374 <xPortStartScheduler+0x134>)
 80042b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042b2:	4b31      	ldr	r3, [pc, #196]	@ (8004378 <xPortStartScheduler+0x138>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b8:	e009      	b.n	80042ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80042ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004378 <xPortStartScheduler+0x138>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004378 <xPortStartScheduler+0x138>)
 80042c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d6:	2b80      	cmp	r3, #128	@ 0x80
 80042d8:	d0ef      	beq.n	80042ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042da:	4b27      	ldr	r3, [pc, #156]	@ (8004378 <xPortStartScheduler+0x138>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1c3 0307 	rsb	r3, r3, #7
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00b      	beq.n	80042fe <xPortStartScheduler+0xbe>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <xPortStartScheduler+0x138>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	4a1c      	ldr	r2, [pc, #112]	@ (8004378 <xPortStartScheduler+0x138>)
 8004306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004308:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <xPortStartScheduler+0x138>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004310:	4a19      	ldr	r2, [pc, #100]	@ (8004378 <xPortStartScheduler+0x138>)
 8004312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800431c:	4b17      	ldr	r3, [pc, #92]	@ (800437c <xPortStartScheduler+0x13c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <xPortStartScheduler+0x13c>)
 8004322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <xPortStartScheduler+0x13c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <xPortStartScheduler+0x13c>)
 800432e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004334:	f000 f8da 	bl	80044ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <xPortStartScheduler+0x140>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800433e:	f000 f8f9 	bl	8004534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <xPortStartScheduler+0x144>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a0f      	ldr	r2, [pc, #60]	@ (8004384 <xPortStartScheduler+0x144>)
 8004348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800434c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800434e:	f7ff ff63 	bl	8004218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004352:	f7ff fa81 	bl	8003858 <vTaskSwitchContext>
	prvTaskExitError();
 8004356:	f7ff ff1b 	bl	8004190 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	e000ed00 	.word	0xe000ed00
 8004368:	410fc271 	.word	0x410fc271
 800436c:	410fc270 	.word	0x410fc270
 8004370:	e000e400 	.word	0xe000e400
 8004374:	2000044c 	.word	0x2000044c
 8004378:	20000450 	.word	0x20000450
 800437c:	e000ed20 	.word	0xe000ed20
 8004380:	2000000c 	.word	0x2000000c
 8004384:	e000ef34 	.word	0xe000ef34

08004388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	607b      	str	r3, [r7, #4]
}
 80043a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043a2:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <vPortEnterCritical+0x5c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	4a0e      	ldr	r2, [pc, #56]	@ (80043e4 <vPortEnterCritical+0x5c>)
 80043aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043ac:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <vPortEnterCritical+0x5c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d110      	bne.n	80043d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <vPortEnterCritical+0x60>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	603b      	str	r3, [r7, #0]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <vPortEnterCritical+0x4a>
	}
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000000c 	.word	0x2000000c
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <vPortExitCritical+0x26>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	607b      	str	r3, [r7, #4]
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <vPortExitCritical+0x50>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3b01      	subs	r3, #1
 8004418:	4a08      	ldr	r2, [pc, #32]	@ (800443c <vPortExitCritical+0x50>)
 800441a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800441c:	4b07      	ldr	r3, [pc, #28]	@ (800443c <vPortExitCritical+0x50>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <vPortExitCritical+0x44>
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800442e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	2000000c 	.word	0x2000000c

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7ff f9f2 	bl	8003858 <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044c2:	f7ff f90f 	bl	80036e4 <xTaskIncrementTick>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <SysTick_Handler+0x40>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f383 8811 	msr	BASEPRI, r3
}
 80044de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <vPortSetupTimerInterrupt+0x34>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <vPortSetupTimerInterrupt+0x38>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <vPortSetupTimerInterrupt+0x3c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	@ (800452c <vPortSetupTimerInterrupt+0x40>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <vPortSetupTimerInterrupt+0x44>)
 800450a:	3b01      	subs	r3, #1
 800450c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800450e:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <vPortSetupTimerInterrupt+0x34>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e010 	.word	0xe000e010
 8004524:	e000e018 	.word	0xe000e018
 8004528:	20000000 	.word	0x20000000
 800452c:	10624dd3 	.word	0x10624dd3
 8004530:	e000e014 	.word	0xe000e014

08004534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004544 <vPortEnableVFP+0x10>
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800453e:	6001      	str	r1, [r0, #0]
 8004540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004542:	bf00      	nop
 8004544:	e000ed88 	.word	0xe000ed88

08004548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004554:	f7ff f81a 	bl	800358c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004558:	4b5c      	ldr	r3, [pc, #368]	@ (80046cc <pvPortMalloc+0x184>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004560:	f000 f924 	bl	80047ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004564:	4b5a      	ldr	r3, [pc, #360]	@ (80046d0 <pvPortMalloc+0x188>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8095 	bne.w	800469c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01e      	beq.n	80045b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004578:	2208      	movs	r2, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	3308      	adds	r3, #8
 8004592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <pvPortMalloc+0x6e>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	617b      	str	r3, [r7, #20]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d06f      	beq.n	800469c <pvPortMalloc+0x154>
 80045bc:	4b45      	ldr	r3, [pc, #276]	@ (80046d4 <pvPortMalloc+0x18c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d86a      	bhi.n	800469c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045c6:	4b44      	ldr	r3, [pc, #272]	@ (80046d8 <pvPortMalloc+0x190>)
 80045c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045ca:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <pvPortMalloc+0x190>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045d0:	e004      	b.n	80045dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d903      	bls.n	80045ee <pvPortMalloc+0xa6>
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f1      	bne.n	80045d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045ee:	4b37      	ldr	r3, [pc, #220]	@ (80046cc <pvPortMalloc+0x184>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d051      	beq.n	800469c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	4413      	add	r3, r2
 8004600:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1ad2      	subs	r2, r2, r3
 8004612:	2308      	movs	r3, #8
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	429a      	cmp	r2, r3
 8004618:	d920      	bls.n	800465c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800461a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <pvPortMalloc+0xfc>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	613b      	str	r3, [r7, #16]
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004656:	69b8      	ldr	r0, [r7, #24]
 8004658:	f000 f90a 	bl	8004870 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800465c:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <pvPortMalloc+0x18c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <pvPortMalloc+0x18c>)
 8004668:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <pvPortMalloc+0x18c>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <pvPortMalloc+0x194>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d203      	bcs.n	800467e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004676:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <pvPortMalloc+0x18c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <pvPortMalloc+0x194>)
 800467c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <pvPortMalloc+0x188>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	431a      	orrs	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004692:	4b13      	ldr	r3, [pc, #76]	@ (80046e0 <pvPortMalloc+0x198>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <pvPortMalloc+0x198>)
 800469a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800469c:	f7fe ff84 	bl	80035a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <pvPortMalloc+0x17a>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60fb      	str	r3, [r7, #12]
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	e7fd      	b.n	80046be <pvPortMalloc+0x176>
	return pvReturn;
 80046c2:	69fb      	ldr	r3, [r7, #28]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3728      	adds	r7, #40	@ 0x28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	2000405c 	.word	0x2000405c
 80046d0:	20004070 	.word	0x20004070
 80046d4:	20004060 	.word	0x20004060
 80046d8:	20004054 	.word	0x20004054
 80046dc:	20004064 	.word	0x20004064
 80046e0:	20004068 	.word	0x20004068

080046e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d04f      	beq.n	8004796 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046f6:	2308      	movs	r3, #8
 80046f8:	425b      	negs	r3, r3
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4413      	add	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	4b25      	ldr	r3, [pc, #148]	@ (80047a0 <vPortFree+0xbc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <vPortFree+0x46>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60fb      	str	r3, [r7, #12]
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	e7fd      	b.n	8004726 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <vPortFree+0x66>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60bb      	str	r3, [r7, #8]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4b14      	ldr	r3, [pc, #80]	@ (80047a0 <vPortFree+0xbc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01e      	beq.n	8004796 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11a      	bne.n	8004796 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	4b0e      	ldr	r3, [pc, #56]	@ (80047a0 <vPortFree+0xbc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	43db      	mvns	r3, r3
 800476a:	401a      	ands	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004770:	f7fe ff0c 	bl	800358c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <vPortFree+0xc0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4413      	add	r3, r2
 800477e:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <vPortFree+0xc0>)
 8004780:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004782:	6938      	ldr	r0, [r7, #16]
 8004784:	f000 f874 	bl	8004870 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004788:	4b07      	ldr	r3, [pc, #28]	@ (80047a8 <vPortFree+0xc4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a06      	ldr	r2, [pc, #24]	@ (80047a8 <vPortFree+0xc4>)
 8004790:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004792:	f7fe ff09 	bl	80035a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004796:	bf00      	nop
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20004070 	.word	0x20004070
 80047a4:	20004060 	.word	0x20004060
 80047a8:	2000406c 	.word	0x2000406c

080047ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80047b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047b8:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <prvHeapInit+0xac>)
 80047ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3307      	adds	r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <prvHeapInit+0xac>)
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047e4:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <prvHeapInit+0xb0>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047ea:	4b1c      	ldr	r3, [pc, #112]	@ (800485c <prvHeapInit+0xb0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a15      	ldr	r2, [pc, #84]	@ (8004860 <prvHeapInit+0xb4>)
 800480c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800480e:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <prvHeapInit+0xb4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004816:	4b12      	ldr	r3, [pc, #72]	@ (8004860 <prvHeapInit+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	1ad2      	subs	r2, r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800482c:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <prvHeapInit+0xb4>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a0a      	ldr	r2, [pc, #40]	@ (8004864 <prvHeapInit+0xb8>)
 800483a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a09      	ldr	r2, [pc, #36]	@ (8004868 <prvHeapInit+0xbc>)
 8004842:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004844:	4b09      	ldr	r3, [pc, #36]	@ (800486c <prvHeapInit+0xc0>)
 8004846:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800484a:	601a      	str	r2, [r3, #0]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	20000454 	.word	0x20000454
 800485c:	20004054 	.word	0x20004054
 8004860:	2000405c 	.word	0x2000405c
 8004864:	20004064 	.word	0x20004064
 8004868:	20004060 	.word	0x20004060
 800486c:	20004070 	.word	0x20004070

08004870 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004878:	4b28      	ldr	r3, [pc, #160]	@ (800491c <prvInsertBlockIntoFreeList+0xac>)
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e002      	b.n	8004884 <prvInsertBlockIntoFreeList+0x14>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d8f7      	bhi.n	800487e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d108      	bne.n	80048b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d118      	bne.n	80048f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <prvInsertBlockIntoFreeList+0xb0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d00d      	beq.n	80048ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e008      	b.n	8004900 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <prvInsertBlockIntoFreeList+0xb0>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e003      	b.n	8004900 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d002      	beq.n	800490e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20004054 	.word	0x20004054
 8004920:	2000405c 	.word	0x2000405c

08004924 <memset>:
 8004924:	4402      	add	r2, r0
 8004926:	4603      	mov	r3, r0
 8004928:	4293      	cmp	r3, r2
 800492a:	d100      	bne.n	800492e <memset+0xa>
 800492c:	4770      	bx	lr
 800492e:	f803 1b01 	strb.w	r1, [r3], #1
 8004932:	e7f9      	b.n	8004928 <memset+0x4>

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	4d0d      	ldr	r5, [pc, #52]	@ (800496c <__libc_init_array+0x38>)
 8004938:	4c0d      	ldr	r4, [pc, #52]	@ (8004970 <__libc_init_array+0x3c>)
 800493a:	1b64      	subs	r4, r4, r5
 800493c:	10a4      	asrs	r4, r4, #2
 800493e:	2600      	movs	r6, #0
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	4d0b      	ldr	r5, [pc, #44]	@ (8004974 <__libc_init_array+0x40>)
 8004946:	4c0c      	ldr	r4, [pc, #48]	@ (8004978 <__libc_init_array+0x44>)
 8004948:	f000 f826 	bl	8004998 <_init>
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	2600      	movs	r6, #0
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	08004ab4 	.word	0x08004ab4
 8004970:	08004ab4 	.word	0x08004ab4
 8004974:	08004ab4 	.word	0x08004ab4
 8004978:	08004ab8 	.word	0x08004ab8

0800497c <memcpy>:
 800497c:	440a      	add	r2, r1
 800497e:	4291      	cmp	r1, r2
 8004980:	f100 33ff 	add.w	r3, r0, #4294967295
 8004984:	d100      	bne.n	8004988 <memcpy+0xc>
 8004986:	4770      	bx	lr
 8004988:	b510      	push	{r4, lr}
 800498a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800498e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004992:	4291      	cmp	r1, r2
 8004994:	d1f9      	bne.n	800498a <memcpy+0xe>
 8004996:	bd10      	pop	{r4, pc}

08004998 <_init>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr

080049a4 <_fini>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr
